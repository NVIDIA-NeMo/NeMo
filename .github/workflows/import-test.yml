name: CI-Import-Check

on:
  push:
  pull_request:
    paths:
      - "**"

# Check https://hub.docker.com/r/pytorch/pytorch/tags for latest tags
jobs:

  test-asr-imports:
    runs-on: ubuntu-latest
    container:
      image: pytorch/pytorch:2.0.1-cuda11.7-cudnn8-runtime
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Update base dependencies
      run: |
        apt-get update && apt-get install -y build-essential
        apt-get install -y libsndfile1 make
    - name: Install nemo dependencies
      id: nemo-wheel
      run:  |
        pip install Cython
        # install test requirements
        pip install -r requirements/requirements_test.txt
        # Build nemo as a wheel
        pip install build
        python -m build --no-isolation --wheel
        # Preserve wheel location
        DIST_FILE=$(find ./dist -name "*.whl" | head -n 1)
        echo "::set-output name=DIST_FILE::${DIST_FILE}"
    - name: Test ASR Domain Imports
      run: |
        # Install NeMo Domain
        pip install "${{ steps.nemo-wheel.outputs.DIST_FILE }}[asr]"
        # Run import checks
        python tests/core_ptl/check_imports.py --domain "asr"
        # Uninstall NeMo
        pip uninstall -y nemo_toolkit

  test-tts-imports:
    runs-on: ubuntu-latest
    container:
      image: pytorch/pytorch:2.0.1-cuda11.7-cudnn8-runtime
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Update base dependencies
      run: |
        apt-get update && apt-get install -y build-essential
        apt-get install -y libsndfile1 make
    - name: Install nemo dependencies
      id: nemo-wheel
      run:  |
        pip install Cython
        # install test requirements
        pip install -r requirements/requirements_test.txt
        # Build nemo as a wheel
        pip install build
        python -m build --no-isolation --wheel
        # Preserve wheel location
        DIST_FILE=$(find ./dist -name "*.whl" | head -n 1)
        echo "::set-output name=DIST_FILE::${DIST_FILE}"
    - name: Test TTS Domain Imports
      run: |
        # Install NeMo Domain
        pip install "${{ steps.nemo-wheel.outputs.DIST_FILE }}[tts]"
        # Run import checks
        python tests/core_ptl/check_imports.py --domain "tts"
        # Uninstall NeMo
        pip uninstall -y nemo_toolkit

  test-nlp-imports:
    runs-on: ubuntu-latest
    container:
      image: pytorch/pytorch:2.0.1-cuda11.7-cudnn8-runtime
    steps:
    - name: Checkout repo
      uses: actions/checkout@v2
    - name: Update base dependencies
      run: |
        apt-get update && apt-get install -y build-essential
        apt-get install -y libsndfile1 make
    - name: Install nemo dependencies
      id: nemo-wheel
      run:  |
        pip install Cython
        # install test requirements
        pip install -r requirements/requirements_test.txt
        # Build nemo as a wheel
        pip install build
        python -m build --no-isolation --wheel
        # Preserve wheel location
        DIST_FILE=$(find ./dist -name "*.whl" | head -n 1)
        echo "::set-output name=DIST_FILE::${DIST_FILE}"
    - name: Install NeMo NLP
      run: |
        pip install --no-build-isolation "${{ steps.nemo-wheel.outputs.DIST_FILE }}[nlp]"
    - name: Uninstall megatron core
      run: |
        pip uninstall -y megatron-core
        echo "PYTHONPATH=/Megatron-LM:$PYTHONPATH" >> $GITHUB_ENV
    - name: Test NLP Domain Imports
      run: |
        echo "python before installing mcore"
        which python
        pip list
        echo $PATH
        echo $PYTHONPATH
        # Install Megatron Core
        git clone https://github.com/NVIDIA/Megatron-LM.git
        cd Megatron-LM
        git checkout 0609f27fe8376f17ab65c001d3d8f35cd8175950
        pip install -e .
        cd ..
        echo "python after installing mcore"
        which python
        pip list
        echo $PATH
        echo $PYTHONPATH
        # Run import checks
        python tests/core_ptl/check_imports.py --domain "nlp"
        # Uninstall NeMo
        pip uninstall -y nemo_toolkit

