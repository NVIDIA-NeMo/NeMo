# This config contains the default values for training a wav2vec model with CTC loss and BPE-based vocabulary.
# Default learning parameters in this config are set for effective batch size of 1k on 32 GPUs.
# To train it with smaller batch sizes, you may need to re-tune the learning parameters or use higher accumulate_grad_batches.

name: &name Wav2Vec_CTC

model:
  model_defaults:
    sample_rate: &sample_rate 16000
    embedding_dim: &emb_dim 768 # Project size of embedidng dimension for transformer
    final_dim: &final_dim 768 # Project final representations and targets to this dimension

  train_ds:
    manifest_filepath: ???
    sample_rate: *sample_rate
    batch_size: ???
    trim_silence: false
    max_duration: null
    shuffle: true
    is_tarred: false
    tarred_audio_filepaths: null
    use_start_end_token: false

  validation_ds:
    manifest_filepath: ???
    sample_rate: *sample_rate
    batch_size: 4
    shuffle: false
    use_start_end_token: false

  test_ds:
    manifest_filepath: null
    sample_rate: *sample_rate
    batch_size: null
    shuffle: false
    use_start_end_token: false
  
  tokenizer:
    dir: ??? # path to directory which contains either tokenizer.model (bpe) or vocab.txt (for wpe)
    type: bpe # Can be either bpe or wpe

  preprocessor:
    _target_: nemo.collections.asr.modules.wav2vec_modules.ConvFeatureEncoder
    extractor_mode: layer_norm # Mode for feature extractor. [group_norm, layer_norm]
    conv_bias: False # Include bias in convolution feature extractor model
    feature_grad_mult: 1.0 # Multiply extracted feature gradients
    normalize_audio: true
    embedding_dim: *emb_dim # Final dimensions of output
    conv_layers:
    - - 512
      - 10
      - 5
    - - 512
      - 3
      - 2
    - - 512
      - 3
      - 2
    - - 512
      - 3
      - 2
    - - 512
      - 3
      - 2
    - - 512
      - 2
      - 2
    - - 512
      - 2
      - 2

  spec_augment:
    _target_: nemo.collections.asr.modules.SpectrogramAugmentation
    freq_masks: 0
    time_masks: 0
    freq_width: 0
    time_width: 0
    mask_value: 0.0

  encoder:
    _target_: nemo.collections.asr.modules.wav2vec_modules.Wav2VecTransformerEncoder
    pos_embed: # Config for convolutional model that generates positional embeddings required for attention layer
      embedding_dim: *emb_dim
      conv_pos: 128 # Number of filters for convolutional positional embeddings
      conv_pos_groups: 16 # Number of groups for convolutional positional embeddings
    transformer:
      encoder_layers: 12 # Number of encoder layers in transformer model
      encoder_layerdrop: 0.05 # Probability of dropping transformer layers
      embedding_dim: *emb_dim # Encoder embedding dim
      ffn_embedding_dim: 3072 # Encoder embedding dim for feed forward
      num_attention_heads: 8 # Number of encoder attention heads
      dropout: 0.1 # Dropout probability for transformer encoder
      activation_fn: gelu # Activation for transformer
    
  decoder:
    _target_: nemo.collections.asr.modules.wav2vec_modules.Wav2VecLinearDecoder
    feat_in: *final_dim
    num_classes: -1  # filled with vocabulary size from tokenizer at runtime
    vocabulary: []  # filled with vocabulary from tokenizer at runtime

  optim:
    name: adamw
    lr: 0.0005
    eps: 1e-06
    # optimizer arguments
    betas: [ 0.9, 0.98 ]
    weight_decay: 0.01

    # scheduler setup
    sched:
      name: PolynomialDecayAnnealing
      min_lr: 0.001
      # Scheduler params
      warmup_steps: null
      warmup_ratio: 0.1

trainer:
  gpus: -1 # number of gpus
  max_epochs: null
  max_steps: 10000 #250000 # computed at runtime if not set
  num_nodes: 1
  accelerator: ddp
  accumulate_grad_batches: 1
  amp_backend: apex
  amp_level: O0
  checkpoint_callback: false  # Provided by exp_manager
  logger: false  # Provided by exp_manager
  log_every_n_steps: 10  # Interval of logging.
  val_check_interval: 0.25 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  check_val_every_n_epoch: 1
  precision: 32
  sync_batchnorm: false
  benchmark: false

exp_manager:
  exp_dir: null
  name: *name
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    monitor: "val_wer"
    mode: "min"
    save_top_k: 5
  create_wandb_logger: false
  wandb_logger_kwargs:
    name: null
    project: null
    entity: null
  resume_if_exists: true
  resume_ignore_no_checkpoint: true

hydra:
  run:
    dir: .
  job_logging:
    root:
      handlers: null

