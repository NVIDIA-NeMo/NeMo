name: &name "Wav2vec_Pretrain"
# For more details on the model parameters, see nemo/collections/asr/models/wav2vec/wav2vec_config.py
# These parameters are based off the FairSeq implementation.
# See here: https://github.com/pytorch/fairseq/blob/master/examples/wav2vec/config/pretraining/wav2vec2_base_librispeech.yaml

# kernel: \[([0-9]+)\]
# filters: ([0-9]+)

model:
  model_defaults:
    sample_rate: &sample_rate 16000
    dropout_input: 0.1 # Dropout applied to input raw features
    dropout_features: 0.1 # Dropout applied to the features generator by convolutions
    embedding_dim: &emb_dim 768 # Project size of embedidng dimension for transformer
    final_dim: &final_dim 768 # Project final representations and targets to this dimension

  train_ds:
    manifest_filepath: ???
    sample_rate: *sample_rate
    batch_size: 4
    trim_silence: false
    max_duration: null
    shuffle: true
    is_tarred: false
    tarred_audio_filepaths: null
    use_start_end_token: false

  validation_ds:
    manifest_filepath: ???
    sample_rate: *sample_rate
    batch_size: 4
    shuffle: false
    use_start_end_token: false

  preprocessor:
    _target_: nemo.collections.asr.modules.wav2vec_modules.ConvFeatureEncoder
    extractor_mode: layer_norm # Mode for feature extractor. [group_norm, layer_norm]
    conv_bias: False # Include bias in convolution feature extractor model
    feature_grad_mult: 1.0 # Multiply extracted feature gradients
    normalize_audio: true
    conv_layers:
    - - 512
      - 10
      - 5
    - - 512
      - 3
      - 2
    - - 512
      - 3
      - 2
    - - 512
      - 3
      - 2
    - - 512
      - 3
      - 2
    - - 512
      - 2
      - 2
    - - 512
      - 2
      - 2

  spec_augment:
    _target_: nemo.collections.asr.modules.SpectrogramAugmentation
    freq_masks: 0
    time_masks: 100
    freq_width: 0
    time_width: 1
    mask_value: 0.0

  encoder:
    _target_: nemo.collections.asr.modules.wav2vec_modules.Wav2VecTransformerEncoder
    pos_embed: # Config for convolutional model that generates positional embeddings required for attention layer
      embedding_dim: *emb_dim
      conv_pos: 128 # Number of filters for convolutional positional embeddings
      conv_pos_groups: 16 # Number of groups for convolutional positional embeddings
    transformer:
      encoder_layers: 12 # Number of encoder layers in transformer model
      encoder_layerdrop: 0.05 # Probability of dropping transformer layers
      embedding_dim: *emb_dim # Encoder embedding dim
      ffn_embedding_dim: 3072 # Encoder embedding dim for feed forward
      num_attention_heads: 8 # Number of encoder attention heads
      dropout: 0.1 # Dropout probability for transformer encoder
      activation_fn: gelu # Activation for transformer

  decoder:
    _target_: nemo.collections.asr.modules.wav2vec_modules.Wav2VecLinearReconstruction
    feat_in: *emb_dim
    feat_out: 128

  loss:
    _target_: nemo.collections.asr.losses.ContrastiveLoss
    in_dim: *emb_dim
    proj_dim: 128
    sample_from_non_masked: false
    combine_time_steps: 1
    codebook_size: 320
    prob_ppl_weight: .1
    logit_temp: .1
    num_groups: 2
    quantizer_temp_start: 2
    quantizer_temp_min: .5
    quantizer_temp_decay: 0.999995

  optim:
    name: adamw
    lr: 0.0005
    eps: 1e-06
    # optimizer arguments
    betas: [ 0.9, 0.98 ]
    weight_decay: 0.01

    # scheduler setup
    sched:
      name: PolynomialDecayAnnealing
      min_lr: 0.001
      # Scheduler params
      warmup_steps: null
      warmup_ratio: 0.1

trainer:
  gpus: -1 # number of gpus
  num_nodes: 1
  max_epochs: 100
  max_steps: null # computed at runtime if not set
  val_check_interval: 0.5 # Set to 0.25 to check 4 times per epoch, or an int for number of iterations
  accelerator: ddp
  accumulate_grad_batches: 1
  gradient_clip_val: 0.0
  precision: 32 # Should be set to 16 for O1 and O2 to enable the AMP.
  log_every_n_steps: 10 # Interval of logging.
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  num_sanity_val_steps: 0 # number of steps to perform validation steps for sanity check the validation process before starting the training, setting to 0 disables it
  check_val_every_n_epoch: 1 # number of evaluations on validation every n epochs
  sync_batchnorm: true
  checkpoint_callback: false # Provided by exp_manager
  logger: false # Provided by exp_manager

exp_manager:
  exp_dir: null
  name: *name
  create_tensorboard_logger: true
  create_checkpoint_callback: true
  create_wandb_logger: false
  wandb_logger_kwargs:
    name: null
    project: null
  resume_if_exists: false
  resume_ignore_no_checkpoint: false