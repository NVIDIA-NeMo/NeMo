name: nemo_video_neva
restore_from_path: null # used when starting from a .nemo file

trainer:
  devices: 8
  num_nodes: 1
  accelerator: gpu
  precision: bf16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  use_distributed_sampler: False
  max_epochs: -1 # PTL default. In practice, max_steps will be reached first.
  max_steps: 10000  # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10
  val_check_interval: 100
  check_val_every_n_epoch: null
  limit_val_batches: 50
  limit_test_batches: 500
  accumulate_grad_batches: 1 # do not modify, grad acc is automatic for training megatron models
  gradient_clip_val: 1.0
  benchmark: False
  enable_model_summary: False # default PTL callback for this does not support model parallelism, instead we log manually

exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: nemo_video_neva
  create_wandb_logger: True
  wandb_logger_kwargs:
    project: null
    name: null
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  resume_from_checkpoint: ${model.resume_from_checkpoint}
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 10
    mode: min
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: True # not recommended when training large models on clusters with short time limits
    filename: 'megatron_clip--{val_loss:.2f}-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}
  ema:
    enable: False
    decay: 0.9999
    validate_original_weights: False
    every_n_steps: 1
    cpu_offload: False

model:
  precision: ${trainer.precision}

  # specify micro_batch_size, global_batch_size, and model parallelism
  # gradient accumulation will be done automatically based on data_parallel_size

  # Batch size guideline for different types of dataset
  micro_batch_size: 1 # limited by GPU memory
  global_batch_size: 2 # will use more micro batches to reach global batch size


  context_parallel_size: 1 # kqv model parallelism

  restore_from_path: null # used in fine-tuning

  # Multimodal configs
  mm_cfg:
    llm:
      from_pretrained:  #path to nemo checkpoint
      freeze: True
      model_type: llama_2 # `nvgpt` or `llama_2` supported
    vision_encoder:
      from_pretrained: "" # path or name
      from_hf: True
      patch_dim: 14
      crop_size: [336, 336]
      hidden_size: 1024 # could be found from model but tricky in code
      vision_select_layer: -2   # default to the last layer
      class_token_length: 1
      freeze: True
    pretrain_mm_mlp_adapter: null # path to pretrained mm adapter
    mm_mlp_adapter_type: linear
    use_im_start_end: False


  # LLM configs
  # use GPTModel from megatron.core
  mcore_gpt: true
  moe_grouped_gemm: false
  moe_token_dispatcher_type: alltoall
  moe_aux_loss_coeff: 0.01
  rampup_batch_size: null
  tensor_model_parallel_size: 8
  pipeline_model_parallel_size: 4
  expert_model_parallel_size: 1
  virtual_pipeline_model_parallel_size: null
  encoder_seq_length: 4096
  max_position_embeddings: 32768
  num_layers: 32
  hidden_size: 4096
  ffn_hidden_size: 14336
  num_attention_heads: 32
  init_method_std: 0.02
  use_scaled_init_method: true
  hidden_dropout: 0.0
  attention_dropout: 0.0
  ffn_dropout: 0
  kv_channels: null
  apply_query_key_layer_scaling: false
  normalization: rmsnorm
  layernorm_epsilon: 1.0e-05
  do_layer_norm_weight_decay: false
  make_vocab_size_divisible_by: 128
  pre_process: true
  post_process: true
  persist_layer_norm: true
  bias: false
  activation: fast-swiglu
  headscale: false
  transformer_block_type: pre_ln
  openai_gelu: false
  normalize_attention_scores: true
  position_embedding_type: rope
  apply_rope_fusion: false
  rotary_percentage: 1.0
  rotary_base: 1000000.0
  moe_router_topk: 2
  num_moe_experts: 8
  attention_type: multihead
  share_embeddings_and_output_weights: false
  overlap_p2p_comm: false
  batch_p2p_comm: true
  seq_len_interpolation_factor: null
  num_query_groups: 8
  use_flash_attention: True


  # precision
  native_amp_init_scale: 4294967296
  native_amp_growth_interval: 1000
  hysteresis: 2
  fp32_residual_connection: false
  fp16_lm_cross_entropy: false
  megatron_amp_O2: True
  grad_allreduce_chunk_size_mb: 125
  grad_div_ar_fusion: true
  gradient_accumulation_fusion: false
  bias_activation_fusion: false
  bias_dropout_add_fusion: false
  masked_softmax_fusion: true
  get_attention_mask_from_fusion: true
  resume_from_checkpoint: null
  use_cpu_initialization: false
  onnx_safe: false
  apex_transformer_log_level: 30
  gradient_as_bucket_view: true
  sync_batch_comm: false
  activations_checkpoint_granularity: null
  activations_checkpoint_method: null
  activations_checkpoint_num_layers: null
  num_micro_batches_with_partial_activation_checkpoints: null
  activations_checkpoint_layers_per_pipeline: null
  sequence_parallel: false
  transformer_engine: true
  fp8: false
  fp8_e4m3: false
  fp8_hybrid: true
  fp8_margin: 0
  fp8_interval: 1
  fp8_amax_history_len: 1024
  fp8_amax_compute_algo: max
  reduce_amax: true
  use_emha: false
  ub_tp_comm_overlap: false
  ub_tp_comm_overlap_cfg: null

  # miscellaneous
  seed: 1234

  tokenizer:
    library: 'sentencepiece'
    type: null
    model: null
    vocab_file: null
    merge_file: null
    delimiter: null # only used for tabular tokenizer
    sentencepiece_legacy: False # Legacy=True allows you to add special tokens to sentencepiece tokenizers.
    additional_special_tokens: null # ["<extra_id_0>", "<extra_id_1>", "<extra_id_2>", "<extra_id_3>", "<extra_id_4>", "<extra_id_5>"]

  data:
    packed_sequence: False
    num_workers: 8
    dataloader_type: cyclic
    data_path: null
    lazy_preprocess: True
    is_multimodal: True
    media_type: video # currently supported: image or video
    splice_single_frame: null # 'first', 'middle', 'last' will represent video as first / middle / last frame only, all other frames discarded.
    num_frames: 8 # selects the number of frames to use from the video
    sep_token_between_frames: False # TODO: allow usage of separator tokens between frames
    sep_image_conv_front: False
    conv_template: ${model.mm_cfg.llm.model_type} # check `nemo/collections/multimodal/data/neva/conversation.py`
    image_folder: null
    video_folder: null
    image_aspect_ratio: 'square'

  # Nsys profiling options
  nsys_profile:
    enabled: False
    start_step: 10  # Global batch to start profiling
    end_step: 10 # Global batch to end profiling
    ranks: [ 0 ] # Global rank IDs to profile
    gen_shape: False # Generate model and kernel details including input shapes

  optim:
    name: fused_adam
    lr: 2e-3
    weight_decay: 0.
    betas:
      - 0.9
      - 0.95
    sched:
      name: CosineAnnealing
      warmup_steps: 140
      constant_steps: 0
      min_lr: 2e-4
