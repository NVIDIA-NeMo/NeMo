name: megatron_universal_prompt_gpt

trainer:
  devices: 1
  accelerator: gpu
  num_nodes: 1
  precision: 16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  replace_sampler_ddp: False
  max_epochs: 3 # min 25 recommended
  max_steps: -1 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  log_every_n_steps: 10 # frequency with which training steps are logged 
  val_check_interval: 1.0 # If is an int n > 1, will run val every n training steps, if a float 0.0 - 1.0 will run val every epoch fraction, e.g. 0.25 will run val every quarter epoch
  gradient_clip_val: 1.0
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  benchmark: False


exp_manager:
  explicit_log_dir: null
  exp_dir: null
  name: ${name}
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: null
    name: null
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: val_loss
    save_top_k: 2
    mode: min
    save_nemo_on_train_end: False # Should be false, correct prompt learning model file is saved at model.nemo_path set below, 
    filename: 'megatron_gpt_prompt_tune--{val_loss:.3f}-{step}'
    model_parallel_size: ${model.tensor_model_parallel_size}
    save_best_model: True

model:
  seed: 1234
  nemo_path: ${name}.nemo # .nemo filename/absolute path to where the prompt model parameters will be saved
  tensor_model_parallel_size: 1 # intra-layer model parallelism
  pipeline_model_parallel_size: 1 # inter-layer model parallelism
  global_batch_size: 8
  micro_batch_size: 4

  restore_path: null # Path to an existing .nemo model you wish to add new tasks to or run inference with
  language_model_path: ??? # Path to the GPT language model .nemo file, always required
  save_intermediate_nemo_file: True # Will save an inference ready .nemo file after every validation run if the new val loss is lower than all previous val losses

  ## Sequence Parallelism
  # Makes tensor parallelism more memory efficient for LLMs (20B+) by parallelizing layer norms and dropout sequentially
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  sequence_parallel: False

  ## Activation Checkpoint 
  activations_checkpoint_granularity: null # 'selective' or 'full' 
  activations_checkpoint_method: null # 'uniform', 'block', not used with 'selective'
  # 'uniform' divides the total number of transformer layers and checkpoints the input activation
  # of each chunk at the specified granularity
  # 'block' checkpoints the specified number of layers per pipeline stage at the specified granularity
  activations_checkpoint_num_layers: null # not used with 'selective'

  task_templates: # Add more/replace tasks as needed, these are just examples
    prompt_template: "{text}{answer}" # Prompt template for task, specify virtual prompt positions with <|VIRTUAL_PROMPT_#|>
    truncate_field: "text" # The {field} in the prompt template whose text will be truncated if the input is too long, if null, inputs that are too long will just be skipped.
    answer_only_loss: True 
    answer_field: "answer"

  data:
    train_ds: [data/rte_train.jsonl,]
    validation_ds: [data/rte_val.jsonl,]
    add_eos: True
    shuffle: True
    num_workers: 2
    pin_memory: True
    train_cache_data_path: null  # the path to the train cache data 
    validation_cache_data_path: null  # the path to the validation cache data 
    test_cache_data_path: null  # the path to the test cache data 
    load_cache: False  # whether to load from the cache data
  
  perceiver:
    init_method_std: 0.02 # Standard deviation of the zero mean normal distribution used for weight initialization.')

    hidden_size: 768
    ffn_hidden_size: 3072 # Transformer FFN hidden size. Usually 4 * hidden_size.
    num_layers: 4 #
    num_attention_heads: 12
    apply_query_key_layer_scaling: False # scale Q * K^T by 1 / layer-number.
    kv_channels: null # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
    hidden_dropout: 0.1 # Dropout probability for hidden state transformer.
    attention_dropout: 0.1 # Dropout probability in the attention layer.
    precision: 16
    fp32_residual_connection: False # Use FP32 for residual connections.
    activations_checkpoint_method: null # 'uniform', 'block'
    activations_checkpoint_num_layers: 1 

    layernorm_epsilon: 1e-5
    persist_layer_norm: True # Use of persistent fused layer norm kernel.
    bias_activation_fusion: True # Use a kernel that fuses the bias addition from weight matrices with the subsequent activation function.
    masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.
    bias_dropout_add_fusion: True # Use a kernel that fuses the bias addition, dropout and residual connection addition.
    bias: True # Whether to use bias terms in all weight matrices.

    openai_gelu: False # Use OpenAI's GELU instead of the default GeLU
    onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.
    activation: 'gelu' # Options ['gelu', 'geglu', 'swiglu', 'reglu']
    normalization: 'rmsnorm' # Normalization layer to use. Options are 'layernorm', 'rmsnorm'
    headscale: False # Whether to learn extra parameters that scale the output of the each self-attention head.
    transformer_block_type: 'pre_ln' # Options ['pre_ln', 'post_ln', 'normformer']
    hidden_steps: 32 # AKA virtual token length

  optim:
    name: fused_adam
    lr: 1e-4
    weight_decay: 0.01 
    betas: 
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 50
      min_lr: 0.0 # min_lr must be 0.0 for prompt learning when pipeline parallel > 1
      constant_steps: 0 # Constant steps should also be 0 when min_lr=0
      monitor: val_loss
      reduce_on_plateau: false
