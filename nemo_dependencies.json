{
    "nemo.utils.exp_manager.NotFoundError": [
        "nemo.lightning.resume"
    ],
    "nemo.utils.app_state.AppState": [
        "nemo.lightning.resume",
        "nemo.lightning.nemo_logger",
        "nemo.lightning.pytorch.callbacks.model_checkpoint",
        "nemo.lightning.pytorch.callbacks.nsys",
        "nemo.core.connectors.save_restore_connector",
        "nemo.core.classes.modelPT",
        "nemo.utils.nvtx",
        "nemo.utils.exp_manager",
        "nemo.utils.callbacks.nemo_model_checkpoint",
        "nemo.collections.nlp.data.language_modeling.megatron.blendable_dataset",
        "nemo.collections.speechlm.utils.resume",
        "nemo.collections.speechlm.models.base"
    ],
    "nemo.utils.model_utils.uninject_model_parallel_rank": [
        "nemo.lightning.resume",
        "nemo.utils.exp_manager",
        "nemo.utils.callbacks.nemo_model_checkpoint",
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.utils.exp_manager._filter_out_unfinished_checkpoints": [
        "nemo.lightning.resume"
    ],
    "nemo.lightning.io.load_context": [
        "nemo.lightning.resume",
        "nemo.lightning.fabric.fabric"
    ],
    "nemo.lightning.base.NEMO_MODELS_CACHE": [
        "nemo.lightning.resume",
        "nemo.lightning.io.connector",
        "nemo.collections.llm.api",
        "nemo.collections.llm.gpt.model.hyena"
    ],
    "nemo.utils.logging": [
        "nemo.lightning.resume",
        "nemo.lightning.megatron_init",
        "nemo.lightning._strategy_lib",
        "nemo.lightning.nemo_logger",
        "nemo.lightning.megatron_parallel",
        "nemo.lightning.base",
        "nemo.lightning.io.mixin",
        "nemo.lightning.io.pl",
        "nemo.lightning.io.connector",
        "nemo.lightning.io.state",
        "nemo.lightning.run.plugins",
        "nemo.lightning.pytorch.accelerate.transformer_engine",
        "nemo.lightning.pytorch.callbacks.garbage_collection",
        "nemo.lightning.pytorch.callbacks.memory_profiler",
        "nemo.lightning.pytorch.callbacks.megatron_comm_overlap",
        "nemo.lightning.pytorch.callbacks.model_transform",
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.lightning.pytorch.callbacks.model_checkpoint",
        "nemo.lightning.pytorch.callbacks.pytorch_profiler",
        "nemo.lightning.pytorch.callbacks.debugging",
        "nemo.lightning.pytorch.callbacks.preemption",
        "nemo.lightning.pytorch.callbacks.flops_callback",
        "nemo.lightning.pytorch.callbacks.ddp_parity_checker",
        "nemo.lightning.pytorch.callbacks.nsys",
        "nemo.lightning.pytorch.plugins.mixed_precision",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.fsdp2_strategy",
        "nemo.core.connectors.save_restore_connector",
        "nemo.core.classes.exportable",
        "nemo.core.classes.common",
        "nemo.core.classes.modelPT",
        "nemo.core.classes.module",
        "nemo.core.classes.mixins.adapter_mixins",
        "nemo.core.classes.mixins.hf_io_mixin",
        "nemo.core.optim.lr_scheduler",
        "nemo.core.optim.distributed_adam",
        "nemo.core.optim.optimizers",
        "nemo.core.optim.optimizer_with_main_params",
        "nemo.core.utils.process_launcher.launcher",
        "nemo.deploy.service.fastapi_interface_to_pytriton",
        "nemo.deploy.service.rest_model_api",
        "nemo.utils.model_utils",
        "nemo.utils.export_utils",
        "nemo.utils.cloud",
        "nemo.utils.sequence_packing_utils",
        "nemo.utils.s3_utils",
        "nemo.utils.distributed",
        "nemo.utils.data_utils",
        "nemo.utils.mcore_logger",
        "nemo.utils.config_utils",
        "nemo.utils.exp_manager",
        "nemo.utils.loggers.clearml_logger",
        "nemo.utils.loggers.dllogger",
        "nemo.utils.decorators.experimental",
        "nemo.utils.decorators.deprecated",
        "nemo.utils.callbacks.s3_checkpoint_io",
        "nemo.utils.callbacks.nemo_model_checkpoint",
        "nemo.utils.callbacks.dist_ckpt_io",
        "nemo.utils.callbacks.preemption",
        "nemo.export.onnx_llm_exporter",
        "nemo.export.quantize.quantizer",
        "nemo.collections.llm.api",
        "nemo.collections.llm.tools.auto_configurator.runner",
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.hyena",
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.llm.gpt.data.fine_tuning",
        "nemo.collections.llm.gpt.data.squad",
        "nemo.collections.llm.gpt.data.dolly",
        "nemo.collections.llm.gpt.data.hf_dataset_packed_sequence",
        "nemo.collections.llm.gpt.data.retrieval",
        "nemo.collections.llm.gpt.data.pre_training",
        "nemo.collections.llm.gpt.data.hf_dataset",
        "nemo.collections.llm.gpt.data.mlperf_govreport",
        "nemo.collections.llm.gpt.data.packed_sequence",
        "nemo.collections.llm.gpt.data.alpaca",
        "nemo.collections.llm.deploy.base",
        "nemo.collections.llm.modelopt.model_utils",
        "nemo.collections.llm.modelopt.distill.utils",
        "nemo.collections.llm.modelopt.quantization.quantizer",
        "nemo.collections.llm.modelopt.prune.pruner",
        "nemo.collections.llm.t5.data.squad",
        "nemo.collections.llm.peft.dora",
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.peft.canonical_lora",
        "nemo.collections.llm.peft.lora",
        "nemo.collections.llm.bert.model.bert",
        "nemo.collections.llm.bert.data.fine_tuning",
        "nemo.collections.llm.bert.data.core",
        "nemo.collections.llm.bert.data.specter",
        "nemo.collections.llm.inference.base",
        "nemo.collections.llm.evaluation.base",
        "nemo.collections.llm.fn.mixin",
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.vision.data.megatron.image_folder",
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux.pipeline",
        "nemo.collections.diffusion.models.flux_controlnet.model",
        "nemo.collections.diffusion.models.dit.dit_attention",
        "nemo.collections.diffusion.models.dit.dit_layer_spec",
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.qwen2vl.data.task_encoder",
        "nemo.collections.vlm.mllama.model.vision",
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.vlm.mllama.data.sample_encoder",
        "nemo.collections.vlm.clip.model.base",
        "nemo.collections.vlm.clip.data.clip_data_module",
        "nemo.collections.vlm.clip.data.mock",
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.vlm.neva.data.mock",
        "nemo.collections.vlm.vision.intern_vit",
        "nemo.collections.vlm.vision.base",
        "nemo.collections.vlm.hf.model.hf_auto_model_for_image_text_to_text",
        "nemo.collections.vlm.hf.data.hf_dataset",
        "nemo.collections.vlm.llava_next.model.llava_next",
        "nemo.collections.vlm.llava_next.data.task_encoder",
        "nemo.collections.vlm.llava_next.data.vqa_sample_encoder",
        "nemo.collections.vlm.llava_next.data.interleaved_sample_encoder",
        "nemo.collections.vlm.llava_next.data.mock",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.speech_llm.parts.mixins.adapter_mixin",
        "nemo.collections.multimodal.speech_llm.parts.utils.data_utils",
        "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_utils",
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_llm.data.build_dataset",
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.multimodal.models.text_to_image.instruct_pix2pix.ldm.ddpm_edit",
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_model",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.autoencoder",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.multimodal.parts.stable_diffusion.utils",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.multimodal.speech_cv.data.video_to_text_dataset",
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.multimodal.modules.stable_diffusion.attention",
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel",
        "nemo.collections.multimodal.data.energon.task_encoder",
        "nemo.collections.multimodal.data.energon.sample_encoder",
        "nemo.collections.multimodal.data.energon.base",
        "nemo.collections.multimodal.data.clip.augmentations.augmentations",
        "nemo.collections.multimodal.data.imagen.imagen_dataset",
        "nemo.collections.multimodal.data.imagen.augmentations.augmentations",
        "nemo.collections.multimodal.data.common.webdataset",
        "nemo.collections.multimodal.data.common.data_samplers",
        "nemo.collections.multimodal.data.common.webdataset_s3",
        "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset",
        "nemo.collections.common.metrics.perf_metrics",
        "nemo.collections.common.metrics.punct_er",
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.multi_similarity_loss",
        "nemo.collections.common.tokenizers.sentencepiece_tokenizer",
        "nemo.collections.common.tokenizers.column_coder",
        "nemo.collections.common.tokenizers.regex_tokenizer",
        "nemo.collections.common.tokenizers.canary_tokenizer",
        "nemo.collections.common.tokenizers.aggregate_tokenizer",
        "nemo.collections.common.tokenizers.huggingface.auto_tokenizer",
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers",
        "nemo.collections.common.parts.perf_metrics_utils",
        "nemo.collections.common.parts.nemo_run_utils",
        "nemo.collections.common.parts.optional_cuda_graphs",
        "nemo.collections.common.parts.rnn",
        "nemo.collections.common.parts.preprocessing.manifest",
        "nemo.collections.common.parts.preprocessing.collections",
        "nemo.collections.common.parts.preprocessing.cleaners",
        "nemo.collections.common.data.lhotse.dataloader",
        "nemo.collections.common.data.lhotse.nemo_adapters",
        "nemo.collections.audio.metrics.audio",
        "nemo.collections.audio.metrics.squim",
        "nemo.collections.audio.losses.audio",
        "nemo.collections.audio.models.enhancement",
        "nemo.collections.audio.models.audio_to_audio",
        "nemo.collections.audio.parts.utils.callbacks",
        "nemo.collections.audio.parts.submodules.diffusion",
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.audio.parts.submodules.flow",
        "nemo.collections.audio.parts.submodules.schroedinger_bridge",
        "nemo.collections.audio.parts.submodules.transformerunet",
        "nemo.collections.audio.parts.submodules.conformer",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.audio.modules.transforms",
        "nemo.collections.audio.modules.features",
        "nemo.collections.audio.modules.masking",
        "nemo.collections.audio.data.data_simulation",
        "nemo.collections.audio.data.audio_to_audio",
        "nemo.collections.asr.metrics.bleu",
        "nemo.collections.asr.metrics.wer",
        "nemo.collections.asr.metrics.der",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.models.k2_aligner_model",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.k2_sequence_models",
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.models.label_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.online_diarizer",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.models.hybrid_asr_tts_models",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.parts.mixins.asr_adapter_mixins",
        "nemo.collections.asr.parts.mixins.transcription",
        "nemo.collections.asr.parts.mixins.mixins",
        "nemo.collections.asr.parts.mixins.diarization",
        "nemo.collections.asr.parts.mixins.interctc_mixin",
        "nemo.collections.asr.parts.context_biasing.context_biasing_utils",
        "nemo.collections.asr.parts.k2.map_loss",
        "nemo.collections.asr.parts.k2.graph_transducer",
        "nemo.collections.asr.parts.k2.utils",
        "nemo.collections.asr.parts.k2.graph_decoders",
        "nemo.collections.asr.parts.k2.classes",
        "nemo.collections.asr.parts.utils.adapter_utils",
        "nemo.collections.asr.parts.utils.asr_confidence_utils",
        "nemo.collections.asr.parts.utils.transcribe_utils",
        "nemo.collections.asr.parts.utils.wfst_utils",
        "nemo.collections.asr.parts.utils.diarization_utils",
        "nemo.collections.asr.parts.utils.vad_utils",
        "nemo.collections.asr.parts.utils.asr_module_utils",
        "nemo.collections.asr.parts.utils.asr_batching",
        "nemo.collections.asr.parts.utils.manifest_utils",
        "nemo.collections.asr.parts.utils.speaker_utils",
        "nemo.collections.asr.parts.utils.eval_utils",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils",
        "nemo.collections.asr.parts.utils.data_simulation_utils",
        "nemo.collections.asr.parts.submodules.multitask_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.subsampling",
        "nemo.collections.asr.parts.submodules.rnnt_maes_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_decoding",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.jasper",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding",
        "nemo.collections.asr.parts.submodules.adapters.attention_adapter_mixin",
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched",
        "nemo.collections.asr.parts.submodules.ngram_lm.kenlm_utils",
        "nemo.collections.asr.parts.numba.spec_augment.spec_aug_numba",
        "nemo.collections.asr.parts.preprocessing.features",
        "nemo.collections.asr.parts.preprocessing.segment",
        "nemo.collections.asr.parts.preprocessing.perturb",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.hybrid_autoregressive_transducer",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.transformer.transformer_modules",
        "nemo.collections.asr.modules.ssl_modules.multi_layer_feat",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.feature_to_label",
        "nemo.collections.asr.data.audio_to_text_dali",
        "nemo.collections.asr.data.feature_to_text_dataset",
        "nemo.collections.asr.data.audio_to_text_dataset",
        "nemo.collections.asr.data.audio_to_ctm_dataset",
        "nemo.collections.asr.data.text_to_text",
        "nemo.collections.asr.data.data_simulation",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.asr.data.ssl_dataset",
        "nemo.collections.asr.data.audio_to_diar_label",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.tts.g2p.models.ctc",
        "nemo.collections.tts.g2p.models.ja_jp_ipa",
        "nemo.collections.tts.g2p.models.heteronym_classification",
        "nemo.collections.tts.g2p.models.zh_cn_pinyin",
        "nemo.collections.tts.g2p.models.i18n_ipa",
        "nemo.collections.tts.g2p.models.base",
        "nemo.collections.tts.g2p.models.en_us_arpabet",
        "nemo.collections.tts.g2p.data.t5",
        "nemo.collections.tts.g2p.data.ctc",
        "nemo.collections.tts.g2p.data.heteronym_classification",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.aligner",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.ssl_tts",
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.fastpitch_ssl",
        "nemo.collections.tts.models.magpietts",
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.models.spectrogram_enhancer",
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.models.base",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model",
        "nemo.collections.tts.parts.mixins.fastpitch_adapter_mixins",
        "nemo.collections.tts.parts.utils.callbacks",
        "nemo.collections.tts.parts.utils.helpers",
        "nemo.collections.tts.parts.preprocessing.audio_trimming",
        "nemo.collections.tts.modules.transformer_2501",
        "nemo.collections.tts.modules.submodules",
        "nemo.collections.tts.modules.tacotron2",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.audio_codec_modules",
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.text_to_speech_dataset",
        "nemo.collections.tts.data.dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset",
        "nemo.collections.nlp.metrics.qa_metrics",
        "nemo.collections.nlp.losses.sgd_loss",
        "nemo.collections.nlp.models.nlp_model",
        "nemo.collections.nlp.models.zero_shot_intent_recognition.zero_shot_intent_model",
        "nemo.collections.nlp.models.entity_linking.entity_linking_model",
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.models.question_answering.qa_gpt_model",
        "nemo.collections.nlp.models.question_answering.qa_s2s_model",
        "nemo.collections.nlp.models.question_answering.qa_base_model",
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model",
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_reranker_model",
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_embedding_model",
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.sgdqa_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.models.text2sparql.text2sparql_model",
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.models.text_classification.text_classification_model",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tn",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_lexical_audio_model",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.token_classification.token_classification_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_mamba_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t0_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron_glue_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model",
        "nemo.collections.nlp.parts.utils_funcs",
        "nemo.collections.nlp.parts.megatron_trainer_builder",
        "nemo.collections.nlp.parts.nlp_overrides",
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins",
        "nemo.collections.nlp.modules.common.text_generation_utils",
        "nemo.collections.nlp.modules.common.text_generation_strategy",
        "nemo.collections.nlp.modules.common.bert_module",
        "nemo.collections.nlp.modules.common.tokenizer_utils",
        "nemo.collections.nlp.modules.common.text_generation_server",
        "nemo.collections.nlp.modules.common.lm_utils",
        "nemo.collections.nlp.modules.common.gpt_module",
        "nemo.collections.nlp.modules.common.transformer.transformer_modules",
        "nemo.collections.nlp.modules.common.huggingface.huggingface_encoder",
        "nemo.collections.nlp.modules.common.huggingface.huggingface_decoder",
        "nemo.collections.nlp.modules.common.huggingface.huggingface_utils",
        "nemo.collections.nlp.modules.common.megatron.megatron_utils",
        "nemo.collections.nlp.modules.common.megatron.fused_softmax",
        "nemo.collections.nlp.modules.common.megatron.clip_grads",
        "nemo.collections.nlp.modules.common.megatron.megatron_init",
        "nemo.collections.nlp.modules.common.megatron.utils",
        "nemo.collections.nlp.modules.common.megatron.transformer",
        "nemo.collections.nlp.modules.common.megatron.build_model",
        "nemo.collections.nlp.modules.common.megatron.module",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.mup.layer",
        "nemo.collections.nlp.modules.common.megatron.adapters.qlora",
        "nemo.collections.nlp.modules.common.megatron.hiddens.megatron_hiddens",
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.entity_linking.entity_linking_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_bert_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_s2s_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_gpt_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_dataset",
        "nemo.collections.nlp.data.question_answering.data_processor.qa_processing",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_descriptor",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_descriptor",
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset",
        "nemo.collections.nlp.data.data_utils.data_preprocessing",
        "nemo.collections.nlp.data.machine_translation.machine_translation_dataset",
        "nemo.collections.nlp.data.machine_translation.preproc_mt_data",
        "nemo.collections.nlp.data.information_retrieval.bert_embedding_dataset",
        "nemo.collections.nlp.data.information_retrieval.gpt_embedding_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_gpt_classification_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset",
        "nemo.collections.nlp.data.dialogue.input_example.sgd_input_example",
        "nemo.collections.nlp.data.dialogue.data_processor.sgd_data_processor",
        "nemo.collections.nlp.data.dialogue.sgd.prediction_utils",
        "nemo.collections.nlp.data.dialogue.sgd.evaluate",
        "nemo.collections.nlp.data.dialogue.sgd.schema",
        "nemo.collections.nlp.data.common.sequence_to_sequence_dataset",
        "nemo.collections.nlp.data.text_normalization.tagger_dataset",
        "nemo.collections.nlp.data.text_normalization.decoder_dataset",
        "nemo.collections.nlp.data.text_normalization.test_dataset",
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset",
        "nemo.collections.nlp.data.glue_benchmark.data_processors",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing",
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_utils",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset",
        "nemo.collections.nlp.data.language_modeling.l2r_lm_dataset",
        "nemo.collections.nlp.data.language_modeling.text_memmap_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.indexed_retrieval_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_fine_tune_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.base_prompt_learning_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.blendable_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_prompt_learning_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_chat_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.data_samplers",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_fim_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_sft_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_prompt_learning_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy",
        "nemo.collections.speechlm.api",
        "nemo.collections.speechlm.strategies.megatron_strategy",
        "nemo.collections.speechlm.utils.resume",
        "nemo.collections.speechlm.utils.model_transform",
        "nemo.collections.speechlm.utils.io",
        "nemo.collections.speechlm.utils.text_generation.audio_text_generation_utils",
        "nemo.collections.speechlm.models.hf_auto_model_for_speech_seq2seq",
        "nemo.collections.speechlm.models.base",
        "nemo.collections.speechlm.models.speech_to_text_llm_model",
        "nemo.collections.speechlm.recipes.pipeline",
        "nemo.collections.speechlm.modules.asr_module",
        "nemo.collections.speechlm.data.text_processing",
        "nemo.collections.speechlm.data.audio_to_text_module",
        "nemo.collections.speechlm.data.data_sampler",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.lightning.io": [
        "nemo.lightning.resume",
        "nemo.lightning.megatron_parallel",
        "nemo.lightning.pytorch.callbacks.memory_profiler",
        "nemo.lightning.pytorch.callbacks.ddp_parity_checker",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.fsdp2_strategy",
        "nemo.lightning.pytorch.strategies.fsdp_strategy",
        "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file",
        "nemo.collections.llm.api",
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.hyena",
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.llm.gpt.model.phi3mini",
        "nemo.collections.llm.gpt.model.mixtral",
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.llm.modelopt.quantization.quantizer",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.bert.model.embedding",
        "nemo.collections.llm.bert.model.bert",
        "nemo.collections.llm.bert.model.base",
        "nemo.collections.llm.inference.base",
        "nemo.collections.llm.evaluation.base",
        "nemo.collections.diffusion.models.model",
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux_controlnet.model",
        "nemo.collections.vlm.qwen2vl.model.qwen2vl",
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.mllama.model.mllama",
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.vlm.clip.model.clip",
        "nemo.collections.vlm.clip.model.base",
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.vlm.vision.siglip_vit",
        "nemo.collections.vlm.vision.intern_vit",
        "nemo.collections.vlm.vision.clip_vit",
        "nemo.collections.vlm.vision.base",
        "nemo.collections.vlm.hf.model.hf_auto_model_for_image_text_to_text",
        "nemo.collections.vlm.llava_next.model.llava_next",
        "nemo.collections.speechlm.utils.resume",
        "nemo.collections.speechlm.models.hf_auto_model_for_speech_seq2seq",
        "nemo.collections.speechlm.models.base",
        "nemo.collections.speechlm.models.speech_to_text_llm_model",
        "nemo.collections.speechlm.modules.asr_module",
        "nemo.collections.speechlm.modules.modality_adapter"
    ],
    "nemo.lightning.pytorch.strategies.utils.RestoreConfig": [
        "nemo.lightning.resume",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.inference.base"
    ],
    "nemo.lightning.ckpt_utils.ADAPTER_META_FILENAME": [
        "nemo.lightning.resume",
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.inference.base",
        "nemo.collections.speechlm.utils.model_transform"
    ],
    "nemo.collections.common.tokenizers.TokenizerSpec": [
        "nemo.lightning.resume",
        "nemo.collections.llm.gpt.data.fine_tuning",
        "nemo.collections.llm.gpt.data.core",
        "nemo.collections.llm.gpt.data.squad",
        "nemo.collections.llm.gpt.data.dolly",
        "nemo.collections.llm.gpt.data.retrieval",
        "nemo.collections.llm.gpt.data.mlperf_govreport",
        "nemo.collections.llm.gpt.data.packed_sequence",
        "nemo.collections.llm.gpt.data.alpaca",
        "nemo.collections.llm.t5.data.fine_tuning",
        "nemo.collections.llm.t5.data.core",
        "nemo.collections.llm.t5.data.squad",
        "nemo.collections.llm.bert.model.embedding",
        "nemo.collections.llm.bert.model.bert",
        "nemo.collections.llm.bert.data.fine_tuning",
        "nemo.collections.llm.bert.data.core",
        "nemo.collections.llm.bert.data.specter",
        "nemo.collections.common.tokenizers.youtokentome_tokenizer",
        "nemo.collections.common.tokenizers.text_to_speech.tokenizer_wrapper",
        "nemo.collections.common.prompts.formatter",
        "nemo.collections.asr.data.audio_to_text_dataset",
        "nemo.collections.asr.data.text_to_text",
        "nemo.collections.asr.data.audio_to_text_lhotse_prompted",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset",
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.lightning.resume.AdapterPath": [
        "nemo.lightning.ckpt_utils",
        "nemo.collections.speechlm.utils.resume"
    ],
    "nemo.utils.AppState": [
        "nemo.lightning.megatron_init",
        "nemo.lightning._strategy_lib",
        "nemo.lightning.data",
        "nemo.lightning.fabric.strategies",
        "nemo.lightning.pytorch.callbacks.megatron_comm_overlap",
        "nemo.lightning.pytorch.callbacks.progress_bar",
        "nemo.lightning.pytorch.plugins.data_sampler",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.utils",
        "nemo.utils.model_utils",
        "nemo.collections.llm.gpt.data.utils",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_utils",
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model",
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.nlp_model",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t0_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model",
        "nemo.collections.nlp.parts.nlp_overrides",
        "nemo.collections.nlp.modules.common.text_generation_utils",
        "nemo.collections.nlp.modules.common.lm_utils",
        "nemo.collections.nlp.modules.common.megatron.megatron_init",
        "nemo.collections.nlp.data.language_modeling.text_memmap_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_prompt_learning_dataset",
        "nemo.collections.speechlm.utils.text_generation.audio_text_generation_utils",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.core.optim.McoreDistributedOptimizer": [
        "nemo.lightning._strategy_lib",
        "nemo.core.classes.modelPT"
    ],
    "nemo.core.optim.optimizers.init_optimizer_states": [
        "nemo.lightning._strategy_lib",
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.core.optim.MainParamsOptimizerWrapper": [
        "nemo.lightning._strategy_lib",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.lightning.megatron_init.initialize_model_parallel_for_nemo": [
        "nemo.lightning._strategy_lib"
    ],
    "nemo.lightning.pytorch.callbacks.ModelCheckpoint": [
        "nemo.lightning.nemo_logger",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.nemotronh_56b"
    ],
    "nemo.utils.get_rank.is_global_rank_zero": [
        "nemo.lightning.nemo_logger",
        "nemo.lightning.io.connector",
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.lightning.pytorch.callbacks.model_checkpoint",
        "nemo.core.connectors.save_restore_connector",
        "nemo.core.classes.modelPT",
        "nemo.utils.nemo_logging",
        "nemo.utils.distributed",
        "nemo.utils.exp_manager",
        "nemo.utils.callbacks.nemo_model_checkpoint",
        "nemo.collections.llm.api",
        "nemo.collections.llm.modelopt.quantization.quantizer",
        "nemo.collections.llm.modelopt.prune.pruner",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.tts.g2p.models.en_us_arpabet",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.parts.nlp_overrides",
        "nemo.collections.nlp.data.dialogue.data_processor.sgd_data_processor",
        "nemo.collections.nlp.data.token_classification.token_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils"
    ],
    "nemo.lightning.MegatronStrategy": [
        "nemo.lightning.nemo_logger",
        "nemo.lightning.io.connector",
        "nemo.collections.llm.peft.api"
    ],
    "nemo.utils.env_var_parsing.get_envbool": [
        "nemo.lightning.nemo_logger",
        "nemo.utils.nemo_logging",
        "nemo.utils.exp_manager",
        "nemo.utils.formatters.utils"
    ],
    "nemo.utils.mcore_logger.add_handlers_to_mcore_logger": [
        "nemo.lightning.nemo_logger",
        "nemo.utils.exp_manager"
    ],
    "nemo.lightning.io.mixin.IOMixin": [
        "nemo.lightning.nemo_logger",
        "nemo.lightning.io.pl",
        "nemo.lightning.io.hf",
        "nemo.lightning.fabric.fabric",
        "nemo.lightning.pytorch.trainer",
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.lightning.pytorch.callbacks.preemption",
        "nemo.lightning.pytorch.callbacks.jit_transform",
        "nemo.lightning.pytorch.optim.base",
        "nemo.collections.llm.gpt.data.squad",
        "nemo.collections.llm.gpt.data.dolly",
        "nemo.collections.llm.gpt.data.pre_training",
        "nemo.collections.llm.gpt.data.mlperf_govreport",
        "nemo.collections.llm.gpt.data.alpaca",
        "nemo.collections.llm.t5.data.squad",
        "nemo.collections.llm.t5.data.pre_training",
        "nemo.collections.llm.bert.data.specter",
        "nemo.collections.llm.bert.data.pre_training",
        "nemo.collections.diffusion.data.diffusion_taskencoder",
        "nemo.collections.diffusion.vae.train_vae",
        "nemo.collections.vlm.clip.data.clip_data_module",
        "nemo.collections.multimodal.data.energon.base",
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.megatron_batch_samplers.MegatronPretrainingBatchSampler": [
        "nemo.lightning.megatron_parallel",
        "nemo.lightning.data",
        "nemo.collections.multimodal.speech_llm.data.build_dataset",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t0_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.get_iterator_k_split": [
        "nemo.lightning.megatron_parallel",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model"
    ],
    "nemo.utils.model_utils.unwrap_model": [
        "nemo.lightning.megatron_parallel",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.export.quantize.quantizer",
        "nemo.collections.llm.modelopt.distill.model",
        "nemo.collections.llm.modelopt.quantization.quantizer"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.average_losses_across_data_parallel_group": [
        "nemo.lightning.megatron_parallel",
        "nemo.collections.llm.modelopt.distill.model",
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.vlm.clip.loss.clip_loss",
        "nemo.collections.vlm.clip.model.base",
        "nemo.collections.multimodal.losses.clip_loss",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model",
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.lightning._strategy_lib.NEMO_MEGATRON_MODEL_PARALLEL_APPSTATE_OVERRIDE": [
        "nemo.lightning.data"
    ],
    "nemo.lightning.io.connector.ModelConnector": [
        "nemo.lightning.io.mixin"
    ],
    "nemo.lightning.io.capture.IOProtocol": [
        "nemo.lightning.io.mixin",
        "nemo.lightning.io.pl"
    ],
    "nemo.lightning.io.fdl_torch.enable": [
        "nemo.lightning.io.mixin"
    ],
    "nemo.lightning.io.to_config.to_config": [
        "nemo.lightning.io.mixin",
        "nemo.lightning.io.fdl_torch",
        "nemo.lightning.io.artifact.hf_auto"
    ],
    "nemo.lightning.io.artifact.base.Artifact": [
        "nemo.lightning.io.mixin",
        "nemo.lightning.io.artifact.file",
        "nemo.lightning.io.artifact.pickle"
    ],
    "nemo.collections.common.tokenizers.TiktokenTokenizer": [
        "nemo.lightning.io.registry"
    ],
    "nemo.collections.common.tokenizers.ByteLevelTokenizer": [
        "nemo.lightning.io.registry"
    ],
    "nemo.collections.common.tokenizers.AutoTokenizer": [
        "nemo.lightning.io.registry",
        "nemo.collections.llm.gpt.data.fine_tuning",
        "nemo.collections.llm.bert.model.bert",
        "nemo.collections.llm.bert.data.fine_tuning",
        "nemo.collections.nlp.data.text2sparql.text2sparql_dataset",
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.lightning.io.artifact.FileArtifact": [
        "nemo.lightning.io.registry"
    ],
    "nemo.lightning.io.artifact.DirOrStringArtifact": [
        "nemo.lightning.io.registry"
    ],
    "nemo.collections.common.tokenizers.SentencePieceTokenizer": [
        "nemo.lightning.io.registry",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_dataset"
    ],
    "nemo.lightning.io.mixin.track_io": [
        "nemo.lightning.io.registry",
        "nemo.lightning.fabric.fabric",
        "nemo.lightning.pytorch.trainer",
        "nemo.collections.llm.recipes.tp_overlap_configs.userbuffers",
        "nemo.collections.multimodal.data.energon.base"
    ],
    "nemo.lightning.ckpt_utils.ckpt_to_dir": [
        "nemo.lightning.io.pl",
        "nemo.lightning.pytorch.callbacks.model_checkpoint"
    ],
    "nemo.utils.callbacks.dist_ckpt_io.AsyncCompatibleCheckpointIO": [
        "nemo.lightning.io.pl",
        "nemo.lightning.pytorch.local_ckpt",
        "nemo.lightning.pytorch.callbacks.peft"
    ],
    "nemo.lightning.ckpt_utils.WEIGHTS_PATH": [
        "nemo.lightning.io.pl",
        "nemo.lightning.io.hf"
    ],
    "nemo.lightning.io.mixin.ConnectorMixin": [
        "nemo.lightning.io.api",
        "nemo.collections.speechlm.utils.io"
    ],
    "nemo.lightning.io.mixin.ModelConnector": [
        "nemo.lightning.io.api",
        "nemo.collections.speechlm.utils.io"
    ],
    "nemo.lightning.io.mixin.load": [
        "nemo.lightning.io.api"
    ],
    "nemo.lightning.io.pl.TrainerContext": [
        "nemo.lightning.io.api",
        "nemo.lightning.io.connector",
        "nemo.lightning.pytorch.callbacks.model_checkpoint",
        "nemo.collections.llm.modelopt.quantization.quantizer",
        "nemo.collections.llm.modelopt.prune.pruner",
        "nemo.collections.llm.peft.api"
    ],
    "nemo.lightning.io.mixin.ConnT": [
        "nemo.lightning.io.api"
    ],
    "nemo.lightning.io.pl.ckpt_to_weights_subdir": [
        "nemo.lightning.io.connector",
        "nemo.lightning.io.hf",
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.modelopt.model_utils",
        "nemo.collections.llm.modelopt.quantization.quantizer",
        "nemo.collections.llm.modelopt.prune.pruner",
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.inference.base",
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.speechlm.utils.io",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.lightning.base.NEMO_CACHE_HOME": [
        "nemo.lightning.io.connector"
    ],
    "nemo.lightning.ckpt_utils.ckpt_to_context_subdir": [
        "nemo.lightning.io.connector",
        "nemo.lightning.fabric.fabric",
        "nemo.collections.llm.api",
        "nemo.collections.llm.modelopt.model_utils",
        "nemo.collections.llm.modelopt.quantization.quantizer",
        "nemo.collections.llm.modelopt.prune.pruner",
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.inference.base"
    ],
    "nemo.lightning._strategy_lib": [
        "nemo.lightning.io.connector",
        "nemo.lightning.fabric.strategies",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.utils",
        "nemo.collections.llm.peft.api"
    ],
    "nemo.lightning.io.api.load_context": [
        "nemo.lightning.io.connector"
    ],
    "nemo.lightning.Trainer": [
        "nemo.lightning.io.connector",
        "nemo.collections.llm.api",
        "nemo.collections.llm.modelopt.quantization.quantizer",
        "nemo.collections.llm.peft.api",
        "nemo.collections.speechlm.api"
    ],
    "nemo.lightning.ckpt_utils.HF_WEIGHTS_PATH": [
        "nemo.lightning.io.hf"
    ],
    "nemo.lightning.ckpt_utils.HF_ADAPTER_PATH": [
        "nemo.lightning.io.hf",
        "nemo.lightning.pytorch.callbacks.peft"
    ],
    "nemo.lightning.ckpt_utils.HF_ADAPTER_CONFIG_FILENAME": [
        "nemo.lightning.io.hf",
        "nemo.lightning.pytorch.callbacks.peft"
    ],
    "nemo.lightning.pytorch.utils.extract_dtypes": [
        "nemo.lightning.io.state"
    ],
    "nemo.lightning.io.artifact.Artifact": [
        "nemo.lightning.io.artifact.hf_auto"
    ],
    "nemo.lightning.fabric.conversion.to_fabric": [
        "nemo.lightning.fabric.plugins",
        "nemo.lightning.fabric.strategies",
        "nemo.lightning.pytorch.trainer"
    ],
    "nemo.lightning.pytorch.plugins.mixed_precision.MegatronMixedPrecision": [
        "nemo.lightning.fabric.plugins",
        "nemo.collections.llm.recipes.precision.mixed_precision"
    ],
    "nemo.lightning.pytorch.plugins.mixed_precision.DtypeConfig": [
        "nemo.lightning.fabric.plugins"
    ],
    "nemo.lightning.pytorch.plugins.mixed_precision.get_optim_config": [
        "nemo.lightning.fabric.plugins"
    ],
    "nemo.lightning.pytorch.plugins.mixed_precision.update_config_with_dtype_overrides": [
        "nemo.lightning.fabric.plugins",
        "nemo.lightning.pytorch.strategies.megatron_strategy"
    ],
    "nemo.lightning.pytorch.strategies.MegatronStrategy": [
        "nemo.lightning.fabric.strategies",
        "nemo.lightning.pytorch.plugins.data_sampler",
        "nemo.collections.speechlm.strategies.megatron_strategy"
    ],
    "nemo.lightning.pytorch.plugins.data_sampler.DataSampler": [
        "nemo.lightning.fabric.strategies",
        "nemo.lightning.pytorch.strategies.megatron_strategy"
    ],
    "nemo.lightning.megatron_parallel.MegatronParallel": [
        "nemo.lightning.fabric.strategies",
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.optim.pytorch",
        "nemo.lightning.pytorch.optim.megatron",
        "nemo.collections.llm.modelopt.quantization.quantizer",
        "nemo.collections.speechlm.utils.model_transform"
    ],
    "nemo.lightning.pytorch.strategies.megatron_strategy.ParallelismConfig": [
        "nemo.lightning.fabric.strategies",
        "nemo.lightning.pytorch.callbacks.megatron_comm_overlap"
    ],
    "nemo.lightning.io.pl.MegatronCheckpointIO": [
        "nemo.lightning.fabric.strategies",
        "nemo.lightning.pytorch.strategies.utils"
    ],
    "nemo.lightning.megatron_parallel.CallbackConnector": [
        "nemo.lightning.fabric.strategies",
        "nemo.lightning.pytorch.strategies.megatron_strategy"
    ],
    "nemo.lightning.io.ConnectorMixin": [
        "nemo.lightning.fabric.fabric"
    ],
    "nemo.lightning.io.mixin.serialization": [
        "nemo.lightning.fabric.fabric",
        "nemo.lightning.pytorch.trainer",
        "nemo.collections.multimodal.data.energon.base"
    ],
    "nemo.lightning.fabric.strategies.FabricMegatronStrategy": [
        "nemo.lightning.fabric.fabric"
    ],
    "nemo.core.utils.optional_libs.TRITON_AVAILABLE": [
        "nemo.lightning.run.plugins",
        "nemo.collections.asr.parts.k2.graph_transducer",
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched"
    ],
    "nemo.lightning.pytorch.callbacks.MemoryProfileCallback": [
        "nemo.lightning.run.plugins"
    ],
    "nemo.lightning.pytorch.callbacks.PreemptionCallback": [
        "nemo.lightning.run.plugins",
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.lightning.pytorch.callbacks.NsysCallback": [
        "nemo.lightning.run.plugins"
    ],
    "nemo.utils.import_utils.safe_import": [
        "nemo.lightning.run.plugins",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.export.tensorrt_lazy_compiler",
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.llm.gpt.data.pre_training",
        "nemo.collections.llm.gpt.data.mock",
        "nemo.collections.llm.modelopt.model_utils",
        "nemo.collections.llm.modelopt.distill.model",
        "nemo.collections.llm.modelopt.distill.utils",
        "nemo.collections.llm.modelopt.quantization.quant_cfg_choices",
        "nemo.collections.llm.modelopt.quantization.quantizer",
        "nemo.collections.llm.modelopt.prune.pruner",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.t5.data.mock",
        "nemo.collections.llm.peft.lora",
        "nemo.collections.llm.recipes.callbacks.common",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.lightning.pytorch.strategies.megatron_strategy.MegatronStrategy": [
        "nemo.lightning.run.plugins",
        "nemo.lightning.pytorch.callbacks.megatron_comm_overlap",
        "nemo.lightning.pytorch.callbacks.model_checkpoint",
        "nemo.lightning.pytorch.callbacks.moe_token_drop",
        "nemo.collections.llm.inference.base"
    ],
    "nemo.utils.callbacks.dist_ckpt_io.AsyncFinalizableCheckpointIO": [
        "nemo.lightning.pytorch.local_ckpt",
        "nemo.lightning.pytorch.callbacks.model_checkpoint",
        "nemo.lightning.pytorch.callbacks.preemption",
        "nemo.lightning.pytorch.strategies.utils",
        "nemo.utils.callbacks.nemo_model_checkpoint",
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.lightning.pytorch.trainer.Trainer": [
        "nemo.lightning.pytorch.local_ckpt"
    ],
    "nemo.lightning.fabric.fabric.Fabric": [
        "nemo.lightning.pytorch.trainer"
    ],
    "nemo.utils.import_utils.safe_import_from": [
        "nemo.lightning.pytorch.accelerate.transformer_engine",
        "nemo.lightning.pytorch.strategies.fsdp2_strategy",
        "nemo.lightning.pytorch.strategies.utils",
        "nemo.utils.te_utils",
        "nemo.utils.exp_manager",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.modelopt.distill.utils",
        "nemo.collections.llm.peft.utils",
        "nemo.collections.llm.peft.lora",
        "nemo.collections.llm.peft.module_matcher",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.multimodal.modules.stable_diffusion.attention",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_full_te_layer_autocast_spec",
        "nemo.collections.nlp.modules.common.megatron.transformer",
        "nemo.collections.nlp.modules.common.megatron.adapters.qlora",
        "nemo.collections.speechlm.models.hf_auto_model_for_speech_seq2seq",
        "nemo.automodel.loss.linear_ce"
    ],
    "nemo.utils.get_rank.get_rank": [
        "nemo.lightning.pytorch.callbacks.memory_profiler",
        "nemo.lightning.pytorch.callbacks.pytorch_profiler",
        "nemo.lightning.pytorch.callbacks.nsys",
        "nemo.core.classes.modelPT"
    ],
    "nemo.collections.llm.recipes.tp_overlap_configs.userbuffers.TransformerLayerTPOverlapCfg": [
        "nemo.lightning.pytorch.callbacks.megatron_comm_overlap"
    ],
    "nemo.lightning.pytorch.callbacks.model_transform.ModelTransform": [
        "nemo.lightning.pytorch.callbacks.peft"
    ],
    "nemo.lightning.io.pl.ckpt_to_dir": [
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.collections.speechlm.utils.model_transform"
    ],
    "nemo.collections.llm.peft.DoRA": [
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.recipes.finetune_default"
    ],
    "nemo.lightning.pytorch.optim.megatron.MegatronOptimizerModule": [
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.lightning.pytorch.callbacks.debugging",
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.t5_220m"
    ],
    "nemo.lightning.pytorch.strategies.utils.to_cpu": [
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.lightning.pytorch.strategies.fsdp2_strategy"
    ],
    "nemo.lightning.pytorch.strategies.utils.create_checkpoint_io": [
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.fsdp2_strategy",
        "nemo.lightning.pytorch.strategies.fsdp_strategy"
    ],
    "nemo.lightning.pytorch.utils.get_automodel_from_trainer": [
        "nemo.lightning.pytorch.callbacks.peft"
    ],
    "nemo.lightning.pytorch.utils.is_trainer_attached": [
        "nemo.lightning.pytorch.callbacks.peft"
    ],
    "nemo.lightning.io.hf.HFCheckpointIO": [
        "nemo.lightning.pytorch.callbacks.peft",
        "nemo.lightning.pytorch.strategies.utils",
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm",
        "nemo.collections.vlm.hf.model.hf_auto_model_for_image_text_to_text"
    ],
    "nemo.utils.exp_manager.get_git_hash": [
        "nemo.lightning.pytorch.callbacks.model_checkpoint"
    ],
    "nemo.utils.exp_manager.get_git_diff": [
        "nemo.lightning.pytorch.callbacks.model_checkpoint"
    ],
    "nemo.utils.lightning_logger_patch.add_filehandlers_to_pl_logger": [
        "nemo.lightning.pytorch.callbacks.model_checkpoint",
        "nemo.utils.exp_manager"
    ],
    "nemo.collections.common.callbacks.EMA": [
        "nemo.lightning.pytorch.callbacks.model_checkpoint",
        "nemo.utils.exp_manager",
        "nemo.utils.callbacks.nemo_model_checkpoint"
    ],
    "nemo.lightning._strategy_lib._sync_from_last_pipeline_stage": [
        "nemo.lightning.pytorch.callbacks.model_checkpoint"
    ],
    "nemo.lightning.pytorch.callbacks.PEFT": [
        "nemo.lightning.pytorch.callbacks.flops_callback",
        "nemo.collections.llm.api",
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.recipes.finetune_default",
        "nemo.collections.llm.inference.base",
        "nemo.collections.speechlm.api"
    ],
    "nemo.utils.flops_formulas": [
        "nemo.lightning.pytorch.callbacks.flops_callback",
        "nemo.collections.common.metrics.perf_metrics"
    ],
    "nemo.utils.hyena_flops_formulas.hyena": [
        "nemo.lightning.pytorch.callbacks.flops_callback"
    ],
    "nemo.collections.llm.gpt.model.base.GPTConfig": [
        "nemo.lightning.pytorch.callbacks.flops_callback",
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.phi3mini",
        "nemo.collections.llm.gpt.model.mixtral",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.lightning.megatron_parallel.MegatronStep": [
        "nemo.lightning.pytorch.plugins.data_sampler"
    ],
    "nemo.lightning.data.setup_microbatch_calculator": [
        "nemo.lightning.pytorch.plugins.data_sampler"
    ],
    "nemo.lightning.data.add_megatron_sampler": [
        "nemo.lightning.pytorch.plugins.data_sampler"
    ],
    "nemo.lightning.pytorch.callbacks.ModelTransform": [
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.collections.llm.api",
        "nemo.collections.speechlm.api"
    ],
    "nemo.lightning.pytorch.strategies.utils.setup_data_sampler": [
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.fsdp_strategy"
    ],
    "nemo.lightning.pytorch.strategies.utils.fix_progress_bar": [
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.fsdp_strategy"
    ],
    "nemo.lightning.pytorch.strategies.utils.ckpt_to_dir": [
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.fsdp2_strategy",
        "nemo.lightning.pytorch.strategies.fsdp_strategy"
    ],
    "nemo.core.optim.mcore_optim.McoreDistributedOptimizer": [
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.utils.callbacks.dist_ckpt_io.AsyncFinalizerCallback": [
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.lightning.pytorch.strategies.utils._destroy_dist_connection": [
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.fsdp2_strategy",
        "nemo.lightning.pytorch.strategies.fsdp_strategy"
    ],
    "nemo.lightning.pytorch.strategies.utils.init_model_parallel": [
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.fsdp_strategy"
    ],
    "nemo.lightning.pytorch.strategies.utils.setup_parallel_ranks": [
        "nemo.lightning.pytorch.strategies.megatron_strategy",
        "nemo.lightning.pytorch.strategies.fsdp_strategy"
    ],
    "nemo.lightning.pytorch.strategies.utils.fsdp2_strategy_parallelize": [
        "nemo.lightning.pytorch.strategies.fsdp2_strategy",
        "nemo.collections.speechlm.models.hf_auto_model_for_speech_seq2seq"
    ],
    "nemo.lightning.pytorch.callbacks.ProgressPrinter": [
        "nemo.lightning.pytorch.strategies.utils"
    ],
    "nemo.lightning.pytorch.callbacks.MegatronProgressBar": [
        "nemo.lightning.pytorch.strategies.utils"
    ],
    "nemo.lightning.pytorch.strategies.utils.mcore_to_pyt_sharded_state_dict": [
        "nemo.lightning.pytorch.strategies.fsdp_strategy"
    ],
    "nemo.lightning.pytorch.strategies.utils.pyt_to_mcore_state_dict": [
        "nemo.lightning.pytorch.strategies.fsdp_strategy"
    ],
    "nemo.core.optim.lr_scheduler.InverseSquareRootAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.core.optim.lr_scheduler.PolynomialDecayAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.core.optim.lr_scheduler.T5InverseSquareRootAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.core.optim.lr_scheduler.WarmupPolicy": [
        "nemo.lightning.pytorch.optim.lr_scheduler",
        "nemo.collections.tts.models.ssl_tts"
    ],
    "nemo.core.optim.lr_scheduler.PolynomialHoldDecayAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.core.optim.lr_scheduler.WarmupAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.lightning.pytorch.optim.base.LRSchedulerModule": [
        "nemo.lightning.pytorch.optim.lr_scheduler",
        "nemo.lightning.pytorch.optim.pytorch",
        "nemo.lightning.pytorch.optim.megatron"
    ],
    "nemo.core.optim.lr_scheduler.SquareAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.core.optim.lr_scheduler.NoamAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.core.optim.lr_scheduler.WarmupHoldPolicy": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.core.optim.lr_scheduler.CosineAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler",
        "nemo.collections.tts.models.vits",
        "nemo.collections.nlp.parts.megatron_lr_schedulers"
    ],
    "nemo.core.optim.lr_scheduler.NoamHoldAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.core.optim.lr_scheduler.SquareRootAnnealing": [
        "nemo.lightning.pytorch.optim.lr_scheduler"
    ],
    "nemo.lightning.pytorch.optim.base.OptimizerModule": [
        "nemo.lightning.pytorch.optim.pytorch",
        "nemo.lightning.pytorch.optim.megatron"
    ],
    "nemo.lightning._strategy_lib.setup_megatron_optimizer": [
        "nemo.lightning.pytorch.optim.megatron"
    ],
    "nemo.lightning.megatron_parallel.CallbackMethods": [
        "nemo.lightning.pytorch.optim.base"
    ],
    "nemo.utils.model_utils.inject_model_parallel_rank": [
        "nemo.core.connectors.save_restore_connector",
        "nemo.utils.callbacks.nemo_model_checkpoint",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.nlp.parts.nlp_overrides",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.utils.model_utils": [
        "nemo.core.connectors.save_restore_connector",
        "nemo.core.classes.modelPT",
        "nemo.core.classes.mixins.adapter_mixins",
        "nemo.core.utils.numba_utils",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.audio.models.audio_to_audio",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.models.confidence_ensemble",
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.online_diarizer",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.parts.utils.transcribe_utils",
        "nemo.collections.asr.data.audio_to_text_dali",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.aligner",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.fastpitch_ssl",
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.models.base",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins",
        "nemo.collections.speechlm.utils.io",
        "nemo.collections.speechlm.models.speech_to_text_llm_model",
        "nemo.collections.speechlm.modules.asr_module"
    ],
    "nemo.core.classes": [
        "nemo.core.connectors.save_restore_connector"
    ],
    "nemo.core.neural_types.comparison.NeuralTypeComparisonResult": [
        "nemo.core.neural_types.elements",
        "nemo.core.neural_types.neural_type"
    ],
    "nemo.core.neural_types.axes.AxisKind": [
        "nemo.core.neural_types.neural_type"
    ],
    "nemo.core.neural_types.elements.ElementType": [
        "nemo.core.neural_types.neural_type"
    ],
    "nemo.core.neural_types.elements.VoidType": [
        "nemo.core.neural_types.neural_type",
        "nemo.collections.tts.losses.hifigan_losses",
        "nemo.collections.tts.losses.waveglowloss",
        "nemo.collections.tts.losses.vits_losses",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.univnet_modules",
        "nemo.collections.tts.modules.waveglow",
        "nemo.collections.tts.modules.hifigan_modules",
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.core.neural_types.axes.AxisType": [
        "nemo.core.neural_types.neural_type"
    ],
    "nemo.core.config": [
        "nemo.core.config.modelPT"
    ],
    "nemo.utils.exp_manager": [
        "nemo.core.config.modelPT"
    ],
    "nemo.core.classes.dataset.DatasetConfig": [
        "nemo.core.config.modelPT"
    ],
    "nemo.utils.export_utils.get_export_format": [
        "nemo.core.classes.exportable"
    ],
    "nemo.utils.export_utils.parse_input_example": [
        "nemo.core.classes.exportable"
    ],
    "nemo.utils.export_utils.rename_onnx_io": [
        "nemo.core.classes.exportable"
    ],
    "nemo.utils.export_utils.verify_torchscript": [
        "nemo.core.classes.exportable"
    ],
    "nemo.utils.export_utils.verify_runtime": [
        "nemo.core.classes.exportable"
    ],
    "nemo.core.neural_types.NeuralType": [
        "nemo.core.classes.exportable",
        "nemo.core.classes.common",
        "nemo.core.utils.neural_type_utils",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.multimodal.speech_llm.modules.modality_adapters",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.multimodal.speech_cv.modules.video_augment",
        "nemo.collections.multimodal.speech_cv.modules.resnet_video_front_end",
        "nemo.collections.multimodal.speech_cv.modules.linear_projection_video_front_end",
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.mse_loss",
        "nemo.collections.common.losses.aggregator",
        "nemo.collections.common.losses.multi_similarity_loss",
        "nemo.collections.common.losses.spanning_loss",
        "nemo.collections.common.losses.smoothed_cross_entropy",
        "nemo.collections.common.losses.bce_logits_loss",
        "nemo.collections.audio.losses.audio",
        "nemo.collections.audio.models.enhancement",
        "nemo.collections.audio.parts.submodules.diffusion",
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.audio.parts.submodules.schroedinger_bridge",
        "nemo.collections.audio.parts.submodules.transformerunet",
        "nemo.collections.audio.parts.submodules.conformer",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.audio.modules.transforms",
        "nemo.collections.audio.modules.features",
        "nemo.collections.audio.modules.masking",
        "nemo.collections.audio.modules.ssl_pretrain_masking",
        "nemo.collections.audio.modules.projections",
        "nemo.collections.audio.data.audio_to_audio",
        "nemo.collections.asr.losses.ctc",
        "nemo.collections.asr.losses.bce_loss",
        "nemo.collections.asr.losses.angularloss",
        "nemo.collections.asr.losses.lattice_losses",
        "nemo.collections.asr.losses.rnnt_pytorch",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.losses.ssl_losses.contrastive",
        "nemo.collections.asr.losses.ssl_losses.ctc",
        "nemo.collections.asr.losses.ssl_losses.mlm",
        "nemo.collections.asr.losses.ssl_losses.rnnt",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.parts.utils.streaming_utils",
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.classifier",
        "nemo.collections.asr.parts.submodules.ssl_quantizers",
        "nemo.collections.asr.parts.submodules.spectr_augment",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding",
        "nemo.collections.asr.parts.submodules.token_classifier",
        "nemo.collections.asr.parts.numba.spec_augment.spec_aug_numba",
        "nemo.collections.asr.modules.msdd_diarizer",
        "nemo.collections.asr.modules.wav2vec_modules",
        "nemo.collections.asr.modules.graph_decoder",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.asr.modules.lstm_decoder",
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.beam_search_decoder",
        "nemo.collections.asr.modules.rnn_encoder",
        "nemo.collections.asr.modules.flashlight_decoder",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.transformer.transformer_bottleneck",
        "nemo.collections.asr.modules.transformer.decoder_module",
        "nemo.collections.asr.modules.transformer.encoder_module",
        "nemo.collections.asr.modules.transformer.transformer",
        "nemo.collections.asr.modules.ssl_modules.multi_softmax_decoder",
        "nemo.collections.asr.modules.ssl_modules.masking",
        "nemo.collections.asr.modules.ssl_modules.quantizers",
        "nemo.collections.asr.data.audio_to_text_lhotse",
        "nemo.collections.asr.data.feature_to_label",
        "nemo.collections.asr.data.audio_to_diar_label_lhotse",
        "nemo.collections.asr.data.feature_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.asr.data.audio_to_diar_label",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.tts.g2p.models.ctc",
        "nemo.collections.tts.models.spectrogram_enhancer",
        "nemo.collections.nlp.losses.sgd_loss",
        "nemo.collections.nlp.models.entity_linking.entity_linking_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.information_retrieval.bert_dpr_model",
        "nemo.collections.nlp.models.information_retrieval.bert_joint_ir_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.models.text2sparql.text2sparql_model",
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.sequence_classifier",
        "nemo.collections.nlp.modules.common.sequence_regression",
        "nemo.collections.nlp.modules.common.classifier",
        "nemo.collections.nlp.modules.common.bert_module",
        "nemo.collections.nlp.modules.common.decoder_module",
        "nemo.collections.nlp.modules.common.encoder_module",
        "nemo.collections.nlp.modules.common.sequence_token_classifier",
        "nemo.collections.nlp.modules.common.gpt_module",
        "nemo.collections.nlp.modules.common.token_classifier",
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck",
        "nemo.collections.nlp.modules.common.transformer.transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoder_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_export",
        "nemo.collections.nlp.modules.common.megatron.megatron_decoder_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_tokens_head_module",
        "nemo.collections.nlp.modules.dialogue_state_tracking.sgd_encoder",
        "nemo.collections.nlp.modules.dialogue_state_tracking.sgd_decoder",
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_dataset",
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset",
        "nemo.collections.nlp.data.text_normalization_as_tagging.thutmose_tagger_dataset",
        "nemo.collections.nlp.data.text2sparql.text2sparql_dataset",
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.text_classification.ptune_text_classification_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.utils.export_utils.augment_filename": [
        "nemo.core.classes.exportable"
    ],
    "nemo.utils.export_utils.wrap_forward_method": [
        "nemo.core.classes.exportable"
    ],
    "nemo.utils.monkeypatched": [
        "nemo.core.classes.exportable"
    ],
    "nemo.core.classes.typecheck": [
        "nemo.core.classes.exportable",
        "nemo.core.classes.dataset",
        "nemo.collections.multimodal.speech_cv.modules.video_preprocessing",
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.mse_loss",
        "nemo.collections.common.losses.aggregator",
        "nemo.collections.common.losses.spanning_loss",
        "nemo.collections.common.losses.smoothed_cross_entropy",
        "nemo.collections.common.losses.bce_logits_loss",
        "nemo.collections.audio.losses.audio",
        "nemo.collections.audio.parts.submodules.diffusion",
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.audio.parts.submodules.schroedinger_bridge",
        "nemo.collections.audio.parts.submodules.transformerunet",
        "nemo.collections.audio.parts.submodules.conformer",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.audio.modules.transforms",
        "nemo.collections.audio.modules.features",
        "nemo.collections.audio.modules.masking",
        "nemo.collections.audio.modules.ssl_pretrain_masking",
        "nemo.collections.audio.modules.projections",
        "nemo.collections.asr.losses.ctc",
        "nemo.collections.asr.losses.bce_loss",
        "nemo.collections.asr.losses.angularloss",
        "nemo.collections.asr.losses.lattice_losses",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.models.hybrid_asr_tts_models",
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.spectr_augment",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding",
        "nemo.collections.asr.parts.submodules.token_classifier",
        "nemo.collections.asr.parts.numba.spec_augment.spec_aug_numba",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.asr.modules.beam_search_decoder",
        "nemo.collections.asr.modules.flashlight_decoder",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.ssl_modules.multi_softmax_decoder",
        "nemo.collections.asr.modules.ssl_modules.quantizers",
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.tts.losses.hifigan_losses",
        "nemo.collections.tts.losses.stftlosses",
        "nemo.collections.tts.losses.waveglowloss",
        "nemo.collections.tts.losses.vits_losses",
        "nemo.collections.tts.losses.aligner_loss",
        "nemo.collections.tts.losses.tacotron2loss",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.tacotron2",
        "nemo.collections.tts.modules.transformer",
        "nemo.collections.tts.modules.waveglow",
        "nemo.collections.nlp.losses.sgd_loss",
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.modules.common.sequence_classifier",
        "nemo.collections.nlp.modules.common.sequence_regression",
        "nemo.collections.nlp.modules.common.sequence_token_classifier",
        "nemo.collections.nlp.modules.common.token_classifier",
        "nemo.collections.nlp.modules.common.huggingface.camembert",
        "nemo.collections.nlp.modules.common.huggingface.roberta",
        "nemo.collections.nlp.modules.common.huggingface.gpt2",
        "nemo.collections.nlp.modules.common.huggingface.distilbert",
        "nemo.collections.nlp.modules.common.huggingface.albert",
        "nemo.collections.nlp.modules.common.huggingface.bert",
        "nemo.collections.nlp.modules.dialogue_state_tracking.sgd_encoder",
        "nemo.collections.nlp.modules.dialogue_state_tracking.sgd_decoder"
    ],
    "nemo.core.utils.neural_type_utils.get_dynamic_axes": [
        "nemo.core.classes.exportable"
    ],
    "nemo.utils.export_utils.replace_for_export": [
        "nemo.core.classes.exportable",
        "nemo.export.tensorrt_lazy_compiler"
    ],
    "nemo.utils.export_utils.ExportFormat": [
        "nemo.core.classes.exportable"
    ],
    "nemo.core.utils.neural_type_utils.get_io_names": [
        "nemo.core.classes.exportable",
        "nemo.collections.asr.models.asr_model"
    ],
    "nemo.core.classes.Typing": [
        "nemo.core.classes.dataset",
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.mse_loss",
        "nemo.collections.common.losses.bce_logits_loss",
        "nemo.collections.audio.losses.audio",
        "nemo.collections.asr.losses.ctc",
        "nemo.collections.asr.losses.bce_loss",
        "nemo.collections.asr.losses.angularloss",
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.spectr_augment",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding",
        "nemo.collections.asr.parts.numba.spec_augment.spec_aug_numba",
        "nemo.collections.nlp.losses.sgd_loss"
    ],
    "nemo.core.classes.Serialization": [
        "nemo.core.classes.dataset",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.denoiser",
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.mse_loss",
        "nemo.collections.common.losses.bce_logits_loss",
        "nemo.collections.asr.losses.ctc",
        "nemo.collections.asr.data.ssl_dataset"
    ],
    "nemo.core.classes.common.Serialization": [
        "nemo.core.classes.loss",
        "nemo.core.classes.module",
        "nemo.collections.multimodal.models.nerf.base",
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.util",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.speechlm.utils.hydra_utils",
        "nemo.collections.speechlm.recipes.pipeline",
        "nemo.collections.speechlm.modules.asr_module",
        "nemo.collections.speechlm.modules.modality_adapter"
    ],
    "nemo.core.classes.common.Typing": [
        "nemo.core.classes.loss",
        "nemo.core.classes.module"
    ],
    "nemo.utils.cloud.maybe_download_from_cloud": [
        "nemo.core.classes.common"
    ],
    "nemo.core.config.templates.model_card.NEMO_DEFAULT_MODEL_CARD_TEMPLATE": [
        "nemo.core.classes.common"
    ],
    "nemo.utils.data_utils.resolve_cache_dir": [
        "nemo.core.classes.common",
        "nemo.utils.model_utils"
    ],
    "nemo.core.classes.mixins.hf_io_mixin.HuggingFaceFileIO": [
        "nemo.core.classes.common"
    ],
    "nemo.core.connectors.save_restore_connector.SaveRestoreConnector": [
        "nemo.core.classes.common",
        "nemo.core.classes.modelPT",
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.nlp.models.nlp_model",
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.core.neural_types.NeuralTypeComparisonResult": [
        "nemo.core.classes.common"
    ],
    "nemo.utils.model_utils.maybe_update_config_version": [
        "nemo.core.classes.common",
        "nemo.core.optim.lr_scheduler",
        "nemo.core.optim.optimizers"
    ],
    "nemo.utils.model_utils.import_class_by_path": [
        "nemo.core.classes.common",
        "nemo.collections.nlp.modules.common.megatron.hiddens.megatron_hiddens"
    ],
    "nemo.core.classes.module.NeuralModule": [
        "nemo.core.classes.modelPT",
        "nemo.collections.multimodal.speech_llm.modules.modality_adapters",
        "nemo.collections.multimodal.speech_cv.modules.video_augment",
        "nemo.collections.multimodal.speech_cv.modules.resnet_video_front_end",
        "nemo.collections.multimodal.speech_cv.modules.linear_projection_video_front_end",
        "nemo.collections.asr.parts.utils.slu_utils",
        "nemo.collections.asr.modules.msdd_diarizer",
        "nemo.collections.asr.modules.wav2vec_modules",
        "nemo.collections.asr.modules.lstm_decoder",
        "nemo.collections.asr.modules.sortformer_modules",
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.rnn_encoder",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.univnet_modules",
        "nemo.collections.tts.modules.hifigan_modules",
        "nemo.collections.tts.modules.audio_codec_modules",
        "nemo.collections.speechlm.modules.asr_module",
        "nemo.collections.speechlm.modules.modality_adapter"
    ],
    "nemo.core.optim.prepare_lr_scheduler": [
        "nemo.core.classes.modelPT",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model"
    ],
    "nemo.utils.debug_hook.register_debug_hooks": [
        "nemo.core.classes.modelPT"
    ],
    "nemo.utils.exceptions.NeMoBaseException": [
        "nemo.core.classes.modelPT",
        "nemo.utils.exp_manager",
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.core.optim": [
        "nemo.core.classes.modelPT",
        "nemo.collections.multimodal.models.nerf.dreamfusion"
    ],
    "nemo.utils.env_var_parsing.get_envint": [
        "nemo.core.classes.modelPT",
        "nemo.utils.get_rank",
        "nemo.collections.nlp.data.data_utils.data_preprocessing",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset"
    ],
    "nemo.core.classes.common.Model": [
        "nemo.core.classes.modelPT"
    ],
    "nemo.core.classes.common.FileIO": [
        "nemo.core.classes.module"
    ],
    "nemo.core.classes.mixins.AccessMixin": [
        "nemo.core.classes.mixins.adapter_mixin_strategies",
        "nemo.collections.multimodal.speech_llm.modules.modality_adapters",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.parts.mixins.interctc_mixin",
        "nemo.collections.asr.parts.submodules.squeezeformer_modules",
        "nemo.collections.asr.parts.submodules.conformer_modules",
        "nemo.collections.asr.parts.submodules.jasper",
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.ssl_modules.multi_layer_feat"
    ],
    "nemo.core.config.SchedulerParams": [
        "nemo.core.optim.lr_scheduler"
    ],
    "nemo.core.config.register_scheduler_params": [
        "nemo.core.optim.lr_scheduler"
    ],
    "nemo.core.config.get_scheduler_config": [
        "nemo.core.optim.lr_scheduler"
    ],
    "nemo.utils.te_utils.te_version": [
        "nemo.core.optim.distributed_adam",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.utils.str_to_dtype": [
        "nemo.core.optim.distributed_adam",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model"
    ],
    "nemo.utils.te_utils.is_mxfp8tensor": [
        "nemo.core.optim.distributed_adam"
    ],
    "nemo.utils.te_utils.is_float8tensor": [
        "nemo.core.optim.distributed_adam",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.core.optim.distributed_adam.MegatronDistributedFusedAdam": [
        "nemo.core.optim.optimizers",
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.core.optim.adafactor.Adafactor": [
        "nemo.core.optim.optimizers"
    ],
    "nemo.core.config.register_optimizer_params": [
        "nemo.core.optim.optimizers"
    ],
    "nemo.core.optim.adan.Adan": [
        "nemo.core.optim.optimizers"
    ],
    "nemo.core.optim.megatron_fused_adam.MegatronFusedAdam": [
        "nemo.core.optim.optimizers"
    ],
    "nemo.core.config.OptimizerParams": [
        "nemo.core.optim.optimizers"
    ],
    "nemo.core.optim.novograd.Novograd": [
        "nemo.core.optim.optimizers"
    ],
    "nemo.core.config.get_optimizer_config": [
        "nemo.core.optim.optimizers"
    ],
    "nemo.utils.nvtx.nvtx_range_pop": [
        "nemo.core.optim.mcore_optim"
    ],
    "nemo.utils.nvtx.nvtx_range_push": [
        "nemo.core.optim.mcore_optim"
    ],
    "nemo.utils.model_utils.param_is_not_shared": [
        "nemo.core.optim.megatron_fused_adam",
        "nemo.collections.nlp.modules.common.megatron.clip_grads"
    ],
    "nemo.core.utils.k2_utils.K2_INSTALLATION_MESSAGE": [
        "nemo.core.utils.optional_libs",
        "nemo.core.utils.k2_guard",
        "nemo.collections.asr.losses.rnnt"
    ],
    "nemo.core.utils.k2_guard.k2": [
        "nemo.core.utils.optional_libs",
        "nemo.collections.asr.parts.k2.w_transducer",
        "nemo.collections.asr.parts.k2.topologies",
        "nemo.collections.asr.parts.k2.map_loss",
        "nemo.collections.asr.parts.k2.graph_transducer",
        "nemo.collections.asr.parts.k2.loss_mixins",
        "nemo.collections.asr.parts.k2.utils",
        "nemo.collections.asr.parts.k2.ml_loss",
        "nemo.collections.asr.parts.k2.graph_decoders",
        "nemo.collections.asr.parts.k2.graph_compilers",
        "nemo.collections.asr.parts.utils.wfst_utils"
    ],
    "nemo.core.neural_types.AxisKind": [
        "nemo.core.utils.neural_type_utils"
    ],
    "nemo.deploy.triton_deployable.ITritonDeployable": [
        "nemo.deploy.deploy_base"
    ],
    "nemo.core.classes.modelPT.ModelPT": [
        "nemo.deploy.deploy_base",
        "nemo.collections.multimodal.models.nerf.base",
        "nemo.collections.common.video_tokenizers.cosmos_tokenizer",
        "nemo.collections.nlp.models.text2sparql.text2sparql_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model"
    ],
    "nemo.export.tarutils.TarPath": [
        "nemo.deploy.utils",
        "nemo.export.tensorrt_llm",
        "nemo.export.vllm.model_config",
        "nemo.export.vllm.engine",
        "nemo.export.utils.model_loader",
        "nemo.export.utils.lora_converter",
        "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file",
        "nemo.export.trt_llm.qnemo.utils"
    ],
    "nemo.deploy.deploy_base.DeployBase": [
        "nemo.deploy.deploy_pytriton"
    ],
    "nemo.deploy.utils.str_list2numpy": [
        "nemo.deploy.multimodal.query_multimodal",
        "nemo.deploy.nlp.query_llm"
    ],
    "nemo.deploy.utils.str_ndarray2list": [
        "nemo.deploy.nlp.hf_deployable",
        "nemo.deploy.nlp.megatronllm_deployable",
        "nemo.export.tensorrt_mm_exporter",
        "nemo.export.vllm_hf_exporter",
        "nemo.export.tensorrt_llm"
    ],
    "nemo.deploy.ITritonDeployable": [
        "nemo.deploy.nlp.hf_deployable",
        "nemo.deploy.nlp.megatronllm_deployable",
        "nemo.export.tensorrt_mm_exporter",
        "nemo.export.onnx_llm_exporter",
        "nemo.export.vllm_hf_exporter",
        "nemo.export.vllm_exporter",
        "nemo.export.tensorrt_llm"
    ],
    "nemo.deploy.utils.cast_output": [
        "nemo.deploy.nlp.hf_deployable",
        "nemo.deploy.nlp.megatronllm_deployable",
        "nemo.export.tensorrt_mm_exporter",
        "nemo.export.vllm_hf_exporter",
        "nemo.export.vllm_exporter",
        "nemo.export.tensorrt_llm"
    ],
    "nemo.deploy.utils.broadcast_list": [
        "nemo.deploy.nlp.hf_deployable",
        "nemo.deploy.nlp.megatronllm_deployable"
    ],
    "nemo.deploy.utils.nemo_checkpoint_version": [
        "nemo.deploy.nlp.megatronllm_deployable"
    ],
    "nemo.collections.llm.inference": [
        "nemo.deploy.nlp.megatronllm_deployable",
        "nemo.collections.llm.api"
    ],
    "nemo.deploy.utils.NEMO2": [
        "nemo.deploy.nlp.megatronllm_deployable"
    ],
    "nemo.deploy.nlp.NemoQueryLLMPyTorch": [
        "nemo.deploy.service.fastapi_interface_to_pytriton"
    ],
    "nemo.deploy.nlp.NemoQueryLLM": [
        "nemo.deploy.service.rest_model_api",
        "nemo.collections.llm.evaluation.base"
    ],
    "nemo.core.config.modelPT.NemoConfig": [
        "nemo.utils.model_utils",
        "nemo.collections.asr.models.configs.k2_sequence_models_config",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_config"
    ],
    "nemo.core.classes.ModelPT": [
        "nemo.utils.model_utils",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_model",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.audio.models.audio_to_audio",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.confidence_ensemble",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.label_models",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.tts.models.aligner",
        "nemo.collections.tts.models.ssl_tts",
        "nemo.collections.tts.models.fastpitch_ssl",
        "nemo.collections.tts.models.magpietts",
        "nemo.collections.tts.models.base",
        "nemo.collections.nlp.models.nlp_model"
    ],
    "nemo.utils.data_utils.is_datastore_path": [
        "nemo.utils.model_utils",
        "nemo.collections.common.parts.preprocessing.manifest",
        "nemo.collections.common.data.lhotse.nemo_adapters",
        "nemo.collections.asr.data.audio_to_text"
    ],
    "nemo.core.classes.PretrainedModelInfo": [
        "nemo.utils.model_utils"
    ],
    "nemo.utils.CastToFloatAll": [
        "nemo.utils.export_utils"
    ],
    "nemo.collections.tts.modules.submodules.MaskedInstanceNorm1d": [
        "nemo.utils.export_utils",
        "nemo.collections.tts.modules.common",
        "nemo.collections.tts.modules.attribute_prediction_model"
    ],
    "nemo.utils.CastToFloat": [
        "nemo.utils.export_utils"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_softmax.MatchedScaleMaskSoftmax": [
        "nemo.utils.export_utils",
        "nemo.collections.nlp.modules.common.megatron.attention"
    ],
    "nemo.utils.formatters.base.DebugNeMoFormatter": [
        "nemo.utils.nemo_logging"
    ],
    "nemo.utils.metaclasses.Singleton": [
        "nemo.utils.nemo_logging",
        "nemo.utils.app_state",
        "nemo.collections.nlp.modules.common.hyena.hyena"
    ],
    "nemo.utils.formatters.base.BaseNeMoFormatter": [
        "nemo.utils.nemo_logging"
    ],
    "nemo.utils.s3_dirpath_utils.is_s3_url": [
        "nemo.utils.s3_utils",
        "nemo.utils.exp_manager"
    ],
    "nemo.utils.s3_dirpath_utils.build_s3_url": [
        "nemo.utils.s3_utils"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_config.HyenaConfig": [
        "nemo.utils.hyena_flops_formulas",
        "nemo.collections.llm.gpt.model.hyena",
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_model",
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_utils",
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer",
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_block",
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_mixer"
    ],
    "nemo.utils.flops_formulas.FLOPSConfig": [
        "nemo.utils.hyena_flops_formulas"
    ],
    "nemo.collections.common.parts.perf_metrics_utils.LLM_VOCAB_SIZE_MAP": [
        "nemo.utils.flops_formulas"
    ],
    "nemo.utils.loggers.DLLogger": [
        "nemo.utils.exp_manager"
    ],
    "nemo.utils.s3_utils.S3Utils": [
        "nemo.utils.exp_manager",
        "nemo.utils.callbacks.s3_checkpoint_io"
    ],
    "nemo.utils.loggers.DLLoggerParams": [
        "nemo.utils.exp_manager"
    ],
    "nemo.utils.callbacks.PreemptionCallback": [
        "nemo.utils.exp_manager"
    ],
    "nemo.utils.loggers.ClearMLParams": [
        "nemo.utils.exp_manager"
    ],
    "nemo.utils.loggers.MLFlowParams": [
        "nemo.utils.exp_manager"
    ],
    "nemo.utils.loggers.ClearMLLogger": [
        "nemo.utils.exp_manager"
    ],
    "nemo.utils.timers": [
        "nemo.utils.exp_manager",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_bottleneck_model"
    ],
    "nemo.utils.callbacks.NeMoModelCheckpoint": [
        "nemo.utils.exp_manager"
    ],
    "nemo.utils.s3_utils.DEFAULT_MAX_WRITE_CONCURRENCY": [
        "nemo.utils.callbacks.s3_checkpoint_io"
    ],
    "nemo.utils.s3_utils.DEFAULT_MAX_READ_CONCURRENCY": [
        "nemo.utils.callbacks.s3_checkpoint_io"
    ],
    "nemo.utils.s3_utils.SHARED_MEM_DIR": [
        "nemo.utils.callbacks.s3_checkpoint_io"
    ],
    "nemo.utils.s3_utils.DEFAULT_CHUNK_SIZE_MB": [
        "nemo.utils.callbacks.s3_checkpoint_io"
    ],
    "nemo.utils.model_utils.ckpt_to_dir": [
        "nemo.utils.callbacks.nemo_model_checkpoint",
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.utils.formatters.utils.check_color_support": [
        "nemo.utils.formatters.base"
    ],
    "nemo.utils.formatters.colors.Fore": [
        "nemo.utils.formatters.base"
    ],
    "nemo.utils.formatters.utils.to_unicode": [
        "nemo.utils.formatters.base"
    ],
    "nemo.deploy.utils.ndarray2img": [
        "nemo.export.tensorrt_mm_exporter"
    ],
    "nemo.export.multimodal.build.build_mllama_engine": [
        "nemo.export.tensorrt_mm_exporter"
    ],
    "nemo.export.multimodal.run.SpeechllmModelRunner": [
        "nemo.export.tensorrt_mm_exporter"
    ],
    "nemo.export.tarutils.unpack_tarball": [
        "nemo.export.tensorrt_mm_exporter",
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.multimodal.build.build_visual_engine": [
        "nemo.export.tensorrt_mm_exporter"
    ],
    "nemo.export.multimodal.build.extract_lora_ckpt": [
        "nemo.export.tensorrt_mm_exporter"
    ],
    "nemo.export.multimodal.build.build_perception_engine": [
        "nemo.export.tensorrt_mm_exporter"
    ],
    "nemo.export.multimodal.build.build_trtllm_engine": [
        "nemo.export.tensorrt_mm_exporter"
    ],
    "nemo.export.multimodal.run.MultimodalModelRunner": [
        "nemo.export.tensorrt_mm_exporter"
    ],
    "nemo.export.utils.get_model_device_type": [
        "nemo.export.onnx_llm_exporter"
    ],
    "nemo.export.utils.get_example_inputs": [
        "nemo.export.onnx_llm_exporter"
    ],
    "nemo.export.utils.is_nemo2_checkpoint": [
        "nemo.export.onnx_llm_exporter",
        "nemo.export.vllm.model_config"
    ],
    "nemo.export.utils.validate_fp8_network": [
        "nemo.export.onnx_llm_exporter"
    ],
    "nemo.export.vllm.model_loader.NemoModelLoader": [
        "nemo.export.vllm_exporter"
    ],
    "nemo.export.vllm.model_config.NemoModelConfig": [
        "nemo.export.vllm_exporter",
        "nemo.export.vllm.model_loader"
    ],
    "nemo.export.utils.convert_lora_nemo_to_canonical": [
        "nemo.export.vllm_exporter"
    ],
    "nemo.export.vllm.engine.NemoLLMEngine": [
        "nemo.export.vllm_exporter"
    ],
    "nemo.export.utils.prepare_directory_for_export": [
        "nemo.export.vllm_exporter",
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.converter.model_converter.model_to_trtllm_ckpt": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file.build_tokenizer": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.tensorrt_llm_run.refit": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.tensorrt_llm_run.generate_streaming": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.tensorrt_llm_run.load_distributed": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.tensorrt_llm_build.build_and_save_engine": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.utils.is_nemo_tarfile": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.converter.model_converter.determine_quantization_settings": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.tensorrt_llm_run.generate": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.tensorrt_llm_run.unload_engine": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.qnemo.utils.is_qnemo_checkpoint": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file.load_nemo_model": [
        "nemo.export.tensorrt_llm",
        "nemo.export.multimodal.build"
    ],
    "nemo.export.utils.torch_dtype_from_precision": [
        "nemo.export.tensorrt_llm",
        "nemo.export.trt_llm.converter.model_to_trt_llm_ckpt",
        "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file"
    ],
    "nemo.export.utils.constants.TRTLLM_ENGINE_DIR": [
        "nemo.export.tensorrt_llm",
        "nemo.export.multimodal.run"
    ],
    "nemo.export.trt_llm.converter.model_to_trt_llm_ckpt.get_layer_prefix": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file.get_tokenizer": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file.get_weights_dtype": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.converter.utils.init_model_parallel_from_nemo": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.qnemo.tokenizer_utils.get_nmt_tokenizer": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file.get_model_type": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.qnemo.tokenizer_utils.TOKENIZER_CONFIG_FILE": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.converter.model_to_trt_llm_ckpt.dist_model_to_trt_llm_ckpt": [
        "nemo.export.tensorrt_llm",
        "nemo.export.trt_llm.converter.model_converter"
    ],
    "nemo.export.trt_llm.qnemo.qnemo_to_tensorrt_llm": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.utils.is_rank": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.export.trt_llm.tensorrt_llm_run.load": [
        "nemo.export.tensorrt_llm"
    ],
    "nemo.utils.export_utils.add_casts_around_norms": [
        "nemo.export.tensorrt_lazy_compiler"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_gpt_model.MegatronGPTModel": [
        "nemo.export.quantize.quantizer",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.parts.mixins.adapter_mixin",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.question_answering.qa_gpt_model",
        "nemo.collections.nlp.models.rag.custom_gpt_llm",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_mamba_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_griffin_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.utils.model_utils.save_artifacts": [
        "nemo.export.quantize.quantizer"
    ],
    "nemo.utils.distributed.temporary_directory": [
        "nemo.export.quantize.quantizer"
    ],
    "nemo.collections.nlp.parts.utils_funcs.torch_dtype_from_precision": [
        "nemo.export.quantize.quantizer",
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models",
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.nlp.modules.common.hyena.hyena"
    ],
    "nemo.export.vllm.model_converters.get_model_converter": [
        "nemo.export.vllm.model_config"
    ],
    "nemo.export.sentencepiece_tokenizer.SentencePieceTokenizer": [
        "nemo.export.vllm.tokenizer_group",
        "nemo.export.vllm.engine",
        "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file",
        "nemo.export.trt_llm.qnemo.tokenizer_utils"
    ],
    "nemo.export.vllm.tokenizer_group.NemoTokenizerGroup": [
        "nemo.export.vllm.engine"
    ],
    "nemo.export.utils.load_model_weights": [
        "nemo.export.vllm.model_loader",
        "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file"
    ],
    "nemo.export.utils._mock_import._mock_import": [
        "nemo.export.utils.model_loader"
    ],
    "nemo.export.tarutils.ZarrPathStore": [
        "nemo.export.utils.model_loader"
    ],
    "nemo.core.classes.common.typecheck": [
        "nemo.export.multimodal.build",
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.multimodal.speech_llm.modules.modality_adapters",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.common.losses.multi_similarity_loss",
        "nemo.collections.audio.models.enhancement",
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.k2_sequence_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.modules.msdd_diarizer",
        "nemo.collections.asr.modules.lstm_decoder",
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.rnn_encoder",
        "nemo.collections.asr.modules.transformer.transformer_bottleneck",
        "nemo.collections.asr.modules.transformer.transformer",
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.models.base",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.univnet_modules",
        "nemo.collections.tts.modules.hifigan_modules",
        "nemo.collections.tts.modules.audio_codec_modules",
        "nemo.collections.nlp.models.entity_linking.entity_linking_model",
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.models.question_answering.qa_gpt_model",
        "nemo.collections.nlp.models.question_answering.qa_s2s_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_bottleneck_model",
        "nemo.collections.nlp.models.information_retrieval.base_ir_model",
        "nemo.collections.nlp.models.information_retrieval.bert_dpr_model",
        "nemo.collections.nlp.models.information_retrieval.bert_joint_ir_model",
        "nemo.collections.nlp.models.dialogue.sgdqa_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.models.text2sparql.text2sparql_model",
        "nemo.collections.nlp.models.text_classification.text_classification_model",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.token_classification.token_classification_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model",
        "nemo.collections.nlp.modules.common.prompt_encoder",
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck",
        "nemo.collections.nlp.modules.common.transformer.transformer",
        "nemo.collections.nlp.modules.common.huggingface.huggingface_encoder",
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.multimodal.speech_llm.modules.perception_modules.AudioPerceptionModule": [
        "nemo.export.multimodal.build",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models"
    ],
    "nemo.export.tensorrt_llm.TensorRTLLM": [
        "nemo.export.multimodal.build",
        "nemo.collections.llm.deploy.base"
    ],
    "nemo.export.trt_llm.converter.utils.split_and_save_weight": [
        "nemo.export.trt_llm.converter.model_to_trt_llm_ckpt"
    ],
    "nemo.export.trt_llm.converter.utils.save_scaling_factor": [
        "nemo.export.trt_llm.converter.model_to_trt_llm_ckpt"
    ],
    "nemo.export.trt_llm.converter.utils.save_val": [
        "nemo.export.trt_llm.converter.model_to_trt_llm_ckpt"
    ],
    "nemo.export.trt_llm.converter.utils.weights_dict": [
        "nemo.export.trt_llm.converter.model_to_trt_llm_ckpt"
    ],
    "nemo.export.trt_llm.converter.model_to_trt_llm_ckpt.convert_model_to_trt_llm_ckpt": [
        "nemo.export.trt_llm.converter.model_converter"
    ],
    "nemo.export.trt_llm.converter.utils.DECODER_MODEL_TYPE": [
        "nemo.export.trt_llm.converter.model_converter"
    ],
    "nemo.export.trt_llm.converter.utils.split": [
        "nemo.export.trt_llm.converter.model_converter"
    ],
    "nemo.export.tiktoken_tokenizer.TiktokenTokenizer": [
        "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file",
        "nemo.export.trt_llm.qnemo.tokenizer_utils"
    ],
    "nemo.export.utils.nemo_to_path": [
        "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file"
    ],
    "nemo.export.trt_llm.qnemo.utils.WEIGHTS_NAME": [
        "nemo.export.trt_llm.qnemo.qnemo_to_tensorrt_llm"
    ],
    "nemo.export.trt_llm.qnemo.utils.CONFIG_NAME": [
        "nemo.export.trt_llm.qnemo.qnemo_to_tensorrt_llm"
    ],
    "nemo.lightning.pytorch.callbacks.JitTransform": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.deploy.base.unset_environment_variables": [
        "nemo.collections.llm.api"
    ],
    "nemo.deploy.DeployPyTriton": [
        "nemo.collections.llm.api"
    ],
    "nemo.lightning.configure_no_restart_validation_training_loop": [
        "nemo.collections.llm.api",
        "nemo.collections.speechlm.api"
    ],
    "nemo.collections.llm.GPTModel": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.modelopt.PruningConfig": [
        "nemo.collections.llm.api",
        "nemo.collections.llm.modelopt.recipes.prune_recipe"
    ],
    "nemo.lightning.OptimizerModule": [
        "nemo.collections.llm.api",
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.model.phi3mini",
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.llm.bert.model.bert",
        "nemo.collections.vlm.clip.model.base",
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.speechlm.api"
    ],
    "nemo.deploy.nlp.megatronllm_deployable.MegatronLLMDeployableNemo2": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.modelopt.setup_trainer_and_restore_model_with_modelopt_spec": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.evaluation.base._legacy_evaluate": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.evaluation.api.EvaluationConfig": [
        "nemo.collections.llm.api",
        "nemo.collections.llm.evaluation.base"
    ],
    "nemo.collections.llm.modelopt.set_modelopt_spec_if_exists_in_ckpt": [
        "nemo.collections.llm.api",
        "nemo.collections.llm.inference.base"
    ],
    "nemo.collections.common.tokenizers.tokenizer_spec.TokenizerSpec": [
        "nemo.collections.llm.api",
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.llm.gpt.model.phi3mini",
        "nemo.collections.llm.gpt.model.mixtral",
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.llm.gpt.data.utils",
        "nemo.collections.llm.gpt.data.pre_training",
        "nemo.collections.llm.gpt.data.mock",
        "nemo.collections.llm.modelopt.distill.model",
        "nemo.collections.llm.modelopt.distill.utils",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.t5.data.pre_training",
        "nemo.collections.llm.t5.data.mock",
        "nemo.collections.llm.bert.model.base",
        "nemo.collections.llm.bert.data.pre_training",
        "nemo.collections.llm.bert.data.mock",
        "nemo.collections.llm.recipes.hyena_1b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.hyena_40b",
        "nemo.collections.llm.recipes.hyena_7b",
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.vlm.clip.model.base",
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.vlm.llava_next.model.llava_next",
        "nemo.collections.common.tokenizers.sentencepiece_tokenizer",
        "nemo.collections.common.tokenizers.tabular_tokenizer",
        "nemo.collections.common.tokenizers.bytelevel_tokenizers",
        "nemo.collections.common.tokenizers.char_tokenizer",
        "nemo.collections.common.tokenizers.tiktoken_tokenizer",
        "nemo.collections.common.tokenizers.aggregate_tokenizer",
        "nemo.collections.common.tokenizers.huggingface.auto_tokenizer",
        "nemo.collections.asr.parts.utils.slu_utils",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils",
        "nemo.collections.asr.parts.submodules.multitask_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_decoding",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_decoding",
        "nemo.collections.asr.modules.flashlight_decoder",
        "nemo.collections.asr.data.audio_to_text_lhotse",
        "nemo.collections.tts.g2p.data.heteronym_classification",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.static_retrieval_server",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.dynamic_retrieval_server",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.bert_service",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.combo_retrieval_server",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.retrieval_service",
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_dataset",
        "nemo.collections.nlp.data.information_retrieval.information_retrieval_dataset",
        "nemo.collections.nlp.data.information_retrieval.bert_embedding_dataset",
        "nemo.collections.nlp.data.information_retrieval.gpt_embedding_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset",
        "nemo.collections.nlp.data.common.sequence_to_sequence_dataset",
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.language_modeling.l2r_lm_dataset",
        "nemo.collections.nlp.data.language_modeling.t0_dataset",
        "nemo.collections.nlp.data.language_modeling.text_memmap_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_chat_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.xlm_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.ul2_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_sft_dataset",
        "nemo.collections.speechlm.api",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.llm.evaluation.api.MisconfigurationError": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.modelopt.save_pruned_model": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.modelopt.ExportConfig": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.modelopt.prune_gpt_model": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.evaluation.api.EvaluationTarget": [
        "nemo.collections.llm.api",
        "nemo.collections.llm.evaluation.base"
    ],
    "nemo.lightning.NeMoLogger": [
        "nemo.collections.llm.api",
        "nemo.collections.speechlm.api"
    ],
    "nemo.collections.llm.evaluation.base.find_framework": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.deploy.base.get_trtllm_deployable": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.modelopt.Quantizer": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.modelopt.QuantizationConfig": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.HFAutoModelForCausalLM": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.evaluation.base.wait_for_fastapi_server": [
        "nemo.collections.llm.api"
    ],
    "nemo.lightning.AutoResume": [
        "nemo.collections.llm.api",
        "nemo.collections.speechlm.api",
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.llm.modelopt.DistillationGPTModel": [
        "nemo.collections.llm.api"
    ],
    "nemo.collections.llm.tools.auto_configurator.core.training_config.generate_grid_search_configs": [
        "nemo.collections.llm.tools.auto_configurator.runner"
    ],
    "nemo.collections.llm.tools.auto_configurator.core.utils.generic_base_config": [
        "nemo.collections.llm.tools.auto_configurator.runner"
    ],
    "nemo.collections.llm.api.pretrain": [
        "nemo.collections.llm.tools.auto_configurator.runner",
        "nemo.collections.llm.recipes.nemotron4_15b_64k",
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.hyena_1b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.llama3_8b_64k",
        "nemo.collections.llm.recipes.llama3_8b_128k",
        "nemo.collections.llm.recipes.nemotron3_22b_16k",
        "nemo.collections.llm.recipes.hyena_40b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.hyena_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.bert_340m",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.nemotron3_22b_64k",
        "nemo.collections.llm.recipes.llama3_8b_16k",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.llama33_nemotron_super_49b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.nemotron4_15b_16k",
        "nemo.collections.llm.recipes.llama31_nemotron_ultra_253b",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.mixtral_8x7b_64k",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.llama3_70b_64k",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.mixtral_8x22b_64k",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.llama3_70b_16k",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.mixtral_8x7b_16k",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.qwen2_500m",
        "nemo.collections.llm.recipes.mamba2_130m",
        "nemo.collections.llm.recipes.bert_110m",
        "nemo.collections.diffusion.recipes.flux_12b",
        "nemo.collections.vlm.recipes.neva_llama3_8b"
    ],
    "nemo.collections.llm.utils.Partial": [
        "nemo.collections.llm.tools.auto_configurator.runner"
    ],
    "nemo.collections.llm.tools.auto_configurator.core.utils._calculate_model_size": [
        "nemo.collections.llm.tools.auto_configurator.runner"
    ],
    "nemo.collections.llm.utils.Config": [
        "nemo.collections.llm.tools.auto_configurator.runner",
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.llm.bert.model.bert",
        "nemo.collections.vlm.neva.model.llava"
    ],
    "nemo.collections.llm.tools.auto_configurator.core.base_config.calculate_model_size": [
        "nemo.collections.llm.tools.auto_configurator.core.utils"
    ],
    "nemo.collections.llm.tools.auto_configurator.core.utils": [
        "nemo.collections.llm.tools.auto_configurator.core.training_config"
    ],
    "nemo.collections.common.tokenizers.huggingface.auto_tokenizer.AutoTokenizer": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.model.phi3mini",
        "nemo.collections.llm.gpt.model.mixtral",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.bert.model.bert",
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.evaluation.base",
        "nemo.collections.vlm.qwen2vl.model.qwen2vl",
        "nemo.collections.vlm.qwen2vl.data.preloaded",
        "nemo.collections.vlm.mllama.model.mllama",
        "nemo.collections.vlm.clip.model.clip",
        "nemo.collections.vlm.clip.data.clip_data_module",
        "nemo.collections.vlm.clip.data.mock",
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.neva.data.preloaded",
        "nemo.collections.vlm.neva.data.mock",
        "nemo.collections.vlm.recipes.llava_next_7b",
        "nemo.collections.vlm.llava_next.data.mock",
        "nemo.collections.nlp.models.nlp_model",
        "nemo.collections.nlp.modules.common.tokenizer_utils",
        "nemo.collections.speechlm.models.hf_auto_model_for_speech_seq2seq"
    ],
    "nemo.lightning.pytorch.utils.dtype_from_hf": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.phi3mini",
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.vlm.mllama.model.mllama"
    ],
    "nemo.collections.llm.gpt.model.llama.Llama31Config70B": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.recipes.llama31_70b"
    ],
    "nemo.collections.llm.gpt.model.llama.Llama31Config8B": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.recipes.llama31_8b"
    ],
    "nemo.lightning.teardown": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.hyena",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.model.phi3mini",
        "nemo.collections.llm.gpt.model.mixtral",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.bert.model.bert",
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.vlm.qwen2vl.model.qwen2vl",
        "nemo.collections.vlm.mllama.model.mllama",
        "nemo.collections.vlm.clip.model.clip",
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.vision.siglip_vit",
        "nemo.collections.vlm.vision.intern_vit",
        "nemo.collections.vlm.vision.clip_vit",
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.lightning.io.state.TransformFns": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.hyena",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.mixtral",
        "nemo.collections.llm.gpt.model.llama_embedding"
    ],
    "nemo.collections.llm.gpt.model.base.torch_dtype_from_mcore_config": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.ssm"
    ],
    "nemo.collections.llm.gpt.model.llama.Llama31Config": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.vlm.mllama.model.base"
    ],
    "nemo.collections.llm.gpt.model.llama.LlamaConfig": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.llama_embedding"
    ],
    "nemo.collections.llm.gpt.model.llama_nemotron_config.LLAMA_33_NEMOTRON_SUPER_49B_HETEROGENEOUS_CONFIG": [
        "nemo.collections.llm.gpt.model.llama_nemotron"
    ],
    "nemo.collections.llm.gpt.model.llama.Llama31Config405B": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.recipes.llama31_405b"
    ],
    "nemo.collections.llm.gpt.model.llama_nemotron_config.LLAMA_31_NEMOTRON_ULTRA_253B_HETEROGENEOUS_CONFIG": [
        "nemo.collections.llm.gpt.model.llama_nemotron"
    ],
    "nemo.collections.llm.gpt.model.base.GPTModel": [
        "nemo.collections.llm.gpt.model.llama_nemotron",
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.chatglm",
        "nemo.collections.llm.gpt.model.starcoder2",
        "nemo.collections.llm.gpt.model.nemotron",
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.gpt.model.hyena",
        "nemo.collections.llm.gpt.model.starcoder",
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.baichuan",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.llm.gpt.model.qwen2",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.model.phi3mini",
        "nemo.collections.llm.gpt.model.mixtral",
        "nemo.collections.llm.inference.base",
        "nemo.collections.diffusion.models.model",
        "nemo.collections.diffusion.vae.train_vae"
    ],
    "nemo.lightning.pytorch.optim.OptimizerModule": [
        "nemo.collections.llm.gpt.model.mistral",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.llm.gpt.model.mixtral",
        "nemo.collections.llm.modelopt.distill.model",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.bert.model.embedding",
        "nemo.collections.llm.bert.model.base",
        "nemo.collections.diffusion.models.model",
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.vae.train_vae",
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.vlm.llava_next.model.llava_next",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.llm.fn.activation.squared_relu": [
        "nemo.collections.llm.gpt.model.nemotron"
    ],
    "nemo.collections.llm.peft.CanonicalLoRA": [
        "nemo.collections.llm.gpt.model.llama"
    ],
    "nemo.collections.llm.peft.LoRA": [
        "nemo.collections.llm.gpt.model.llama",
        "nemo.collections.llm.recipes.finetune_default"
    ],
    "nemo.collections.nlp.modules.common.tokenizer_utils.get_nmt_tokenizer": [
        "nemo.collections.llm.gpt.model.hyena",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.data.pre_training",
        "nemo.collections.llm.gpt.data.mock",
        "nemo.collections.llm.t5.data.fine_tuning",
        "nemo.collections.llm.t5.data.pre_training",
        "nemo.collections.llm.t5.data.mock",
        "nemo.collections.llm.bert.data.pre_training",
        "nemo.collections.llm.bert.data.mock",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.mamba2_130m",
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.data.machine_translation.preproc_mt_data"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_utils.hyena_no_weight_decay_cond": [
        "nemo.collections.llm.gpt.model.hyena"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_model.HyenaModel": [
        "nemo.collections.llm.gpt.model.hyena"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer_specs.hyena_stack_spec": [
        "nemo.collections.llm.gpt.model.hyena"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer_specs.hyena_stack_spec_no_te": [
        "nemo.collections.llm.gpt.model.hyena"
    ],
    "nemo.collections.llm.gpt.model.base.gpt_data_step": [
        "nemo.collections.llm.gpt.model.hyena",
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.ssm"
    ],
    "nemo.lightning.get_vocab_size": [
        "nemo.collections.llm.gpt.model.hyena",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.bert.model.base",
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.vlm.clip.model.base"
    ],
    "nemo.automodel.loss.linear_ce.fused_linear_cross_entropy": [
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm"
    ],
    "nemo.automodel.loss.linear_ce.HAVE_LINEAR_LOSS_CE": [
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm"
    ],
    "nemo.lightning.pytorch.strategies.utils.create_context_parallel_ctx": [
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm"
    ],
    "nemo.lightning.pytorch.strategies.utils.get_train_context": [
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm"
    ],
    "nemo.collections.llm.fn": [
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.bert.model.base",
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.vlm.clip.model.base",
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.vlm.hf.model.hf_auto_model_for_image_text_to_text",
        "nemo.collections.speechlm.models.hf_auto_model_for_speech_seq2seq",
        "nemo.collections.speechlm.models.base",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.lightning.pytorch.accelerate.transformer_engine.te_accelerate": [
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm"
    ],
    "nemo.automodel.loss.masked_cross_entropy": [
        "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm"
    ],
    "nemo.collections.llm.fn.activation.openai_gelu": [
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.vlm.vision.siglip_vit"
    ],
    "nemo.collections.common.parts.utils.extend_instance": [
        "nemo.collections.llm.gpt.model.gemma2",
        "nemo.collections.llm.gpt.model.gemma",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.export.trt_llm.nemo_ckpt_loader.nemo_file.load_distributed_model_weights": [
        "nemo.collections.llm.gpt.model.deepseek"
    ],
    "nemo.collections.llm.gpt.model.base.torch_dtype_from_dict_config": [
        "nemo.collections.llm.gpt.model.deepseek"
    ],
    "nemo.lightning.io.state._ModelState": [
        "nemo.collections.llm.gpt.model.deepseek",
        "nemo.collections.llm.gpt.model.ssm",
        "nemo.collections.vlm.mllama.model.mllama"
    ],
    "nemo.collections.llm.gpt.model.base.HAVE_TE": [
        "nemo.collections.llm.gpt.model.deepseek"
    ],
    "nemo.collections.llm.gpt.model.gemma2.EmbeddingScalingMixin": [
        "nemo.collections.llm.gpt.model.gemma"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.gpt_full_te_layer_autocast_spec.get_gpt_full_te_layer_autocast_spec": [
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.lightning.pytorch.optim.MegatronOptimizerModule": [
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.bert.model.base",
        "nemo.collections.llm.recipes.optim.adam",
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.vlm.llava_next.model.llava_next",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.lightning.megatron_parallel.MaskedTokenLossReduction": [
        "nemo.collections.llm.gpt.model.base",
        "nemo.collections.llm.modelopt.distill.model",
        "nemo.collections.llm.t5.model.t5",
        "nemo.collections.llm.bert.loss",
        "nemo.collections.diffusion.models.model",
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.vlm.mllama.model.base"
    ],
    "nemo.collections.llm.gpt.model.llama.LlamaModel": [
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.llama2_7b"
    ],
    "nemo.collections.llm.gpt.model.hf_llama_embedding.LlamaBidirectionalModel": [
        "nemo.collections.llm.gpt.model.llama_embedding"
    ],
    "nemo.collections.llm.bert.loss.BERTInBatchExclusiveHardNegativesRankingLoss": [
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.llm.bert.model.embedding"
    ],
    "nemo.collections.llm.gpt.model.hf_llama_embedding.LlamaBidirectionalConfig": [
        "nemo.collections.llm.gpt.model.llama_embedding"
    ],
    "nemo.collections.llm.gpt.model.GPTConfig": [
        "nemo.collections.llm.gpt.model.llama_embedding"
    ],
    "nemo.collections.llm.gpt.model.llama.Llama32Config1B": [
        "nemo.collections.llm.gpt.model.llama_embedding",
        "nemo.collections.llm.recipes.llama32_1b"
    ],
    "nemo.collections.llm.bert.loss.HardNegativeRankingLoss": [
        "nemo.collections.llm.gpt.model.llama_embedding"
    ],
    "nemo.collections.llm.gpt.model.llama.HFLlamaImporter": [
        "nemo.collections.llm.gpt.model.llama_embedding"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_utils.get_init_method": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_model"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_utils.make_upper_case": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_model",
        "nemo.collections.llm.gpt.data.megatron.hyena.evo2_dataset"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_utils.reweighted_cross_entropy": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_model"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer.HyenaLayerSubmodules": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer_specs"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_mixer.HyenaMixer": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer_specs"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_block.HyenaStack": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer_specs"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_block.HyenaStackSubmodules": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer_specs"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_mixer.HyenaMixerSubmodules": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer_specs"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer.HyenaLayer": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_layer_specs"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_hybrid_layer_allocation.Symbols": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_block"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_hybrid_layer_allocation.allocate_layers": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_block"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_utils.ParallelHyenaOperator": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_mixer"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_utils.ParallelShortHyenaOperator": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_mixer"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_utils.ParallelCausalDepthwiseConv1d": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_mixer"
    ],
    "nemo.collections.llm.gpt.model.megatron.hyena.hyena_utils.divide": [
        "nemo.collections.llm.gpt.model.megatron.hyena.hyena_mixer"
    ],
    "nemo.collections.llm.gpt.data.packed_sequence.PackedSequenceSpecs": [
        "nemo.collections.llm.gpt.data.fine_tuning",
        "nemo.collections.llm.gpt.data.squad",
        "nemo.collections.llm.gpt.data.dolly",
        "nemo.collections.llm.gpt.data.retrieval",
        "nemo.collections.llm.gpt.data.mlperf_govreport",
        "nemo.collections.llm.gpt.data.alpaca",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.finetune_default",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.llama33_nemotron_super_49b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.llama31_nemotron_ultra_253b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.llama31_nemotron_70b"
    ],
    "nemo.lightning.data.WrappedDataLoader": [
        "nemo.collections.llm.gpt.data.fine_tuning",
        "nemo.collections.llm.gpt.data.pre_training",
        "nemo.collections.llm.t5.data.pre_training",
        "nemo.collections.llm.bert.data.fine_tuning",
        "nemo.collections.llm.bert.data.pre_training",
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.llm.gpt.data.packed_sequence.prepare_packed_sequence_data": [
        "nemo.collections.llm.gpt.data.fine_tuning"
    ],
    "nemo.lightning.pytorch.plugins.MegatronDataSampler": [
        "nemo.collections.llm.gpt.data.fine_tuning",
        "nemo.collections.llm.gpt.data.pre_training",
        "nemo.collections.llm.gpt.data.mock",
        "nemo.collections.llm.t5.data.fine_tuning",
        "nemo.collections.llm.t5.data.pre_training",
        "nemo.collections.llm.t5.data.mock",
        "nemo.collections.llm.bert.data.fine_tuning",
        "nemo.collections.llm.bert.data.pre_training",
        "nemo.collections.llm.bert.data.mock",
        "nemo.collections.diffusion.data.diffusion_mock_datamodule",
        "nemo.collections.diffusion.data.diffusion_fake_datamodule",
        "nemo.collections.vlm.qwen2vl.data.preloaded",
        "nemo.collections.vlm.qwen2vl.data.mock",
        "nemo.collections.vlm.mllama.data.preloaded",
        "nemo.collections.vlm.mllama.data.mock",
        "nemo.collections.vlm.clip.data.mock",
        "nemo.collections.vlm.neva.data.preloaded",
        "nemo.collections.vlm.neva.data.mock",
        "nemo.collections.vlm.llava_next.data.mock",
        "nemo.collections.multimodal.data.energon.base",
        "nemo.collections.speechlm.data.data_sampler"
    ],
    "nemo.collections.llm.gpt.data.core.create_sft_dataset": [
        "nemo.collections.llm.gpt.data.fine_tuning",
        "nemo.collections.llm.gpt.data.chat",
        "nemo.collections.llm.gpt.data.packed_sequence"
    ],
    "nemo.lightning.base.NEMO_DATASETS_CACHE": [
        "nemo.collections.llm.gpt.data.core",
        "nemo.collections.llm.t5.data.core",
        "nemo.collections.llm.bert.data.core"
    ],
    "nemo.collections.llm.gpt.data.utils._OnlineSampleMapping": [
        "nemo.collections.llm.gpt.data.core"
    ],
    "nemo.collections.llm.gpt.data.utils._JSONLMemMapDataset": [
        "nemo.collections.llm.gpt.data.core",
        "nemo.collections.llm.bert.data.core"
    ],
    "nemo.core.classes.Dataset": [
        "nemo.collections.llm.gpt.data.core",
        "nemo.collections.llm.gpt.data.utils",
        "nemo.collections.llm.t5.data.core",
        "nemo.collections.llm.bert.data.core",
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.multimodal.data.controlnet.controlnet_dataset",
        "nemo.collections.multimodal.data.imagen.imagen_dataset",
        "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset",
        "nemo.collections.audio.data.audio_to_audio",
        "nemo.collections.asr.models.hybrid_asr_tts_models",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.feature_to_label",
        "nemo.collections.asr.data.text_to_text",
        "nemo.collections.asr.data.feature_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.asr.data.audio_to_diar_label",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.g2p.data.t5",
        "nemo.collections.tts.g2p.data.ctc",
        "nemo.collections.tts.g2p.data.heteronym_classification",
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.text_to_speech_dataset",
        "nemo.collections.tts.data.dataset",
        "nemo.collections.nlp.data.entity_linking.entity_linking_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_dataset",
        "nemo.collections.nlp.data.information_retrieval.bert_embedding_dataset",
        "nemo.collections.nlp.data.information_retrieval.gpt_embedding_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_dataset",
        "nemo.collections.nlp.data.common.sequence_to_sequence_dataset",
        "nemo.collections.nlp.data.text2sparql.text2sparql_dataset",
        "nemo.collections.nlp.data.text_normalization.tagger_dataset",
        "nemo.collections.nlp.data.text_normalization.decoder_dataset",
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.text_classification.ptune_text_classification_dataset",
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.language_modeling.lm_bert_dataset",
        "nemo.collections.nlp.data.language_modeling.t0_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_sft_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.llm.gpt.data.utils._preprocess": [
        "nemo.collections.llm.gpt.data.core"
    ],
    "nemo.collections.llm.gpt.data.utils._get_samples_mapping": [
        "nemo.collections.llm.gpt.data.core",
        "nemo.collections.llm.bert.data.core"
    ],
    "nemo.collections.llm.gpt.data.fine_tuning.FineTuningDataModule": [
        "nemo.collections.llm.gpt.data.squad",
        "nemo.collections.llm.gpt.data.dolly",
        "nemo.collections.llm.gpt.data.chat",
        "nemo.collections.llm.gpt.data.mlperf_govreport",
        "nemo.collections.llm.gpt.data.alpaca"
    ],
    "nemo.collections.llm.gpt.data.core.get_dataset_root": [
        "nemo.collections.llm.gpt.data.squad",
        "nemo.collections.llm.gpt.data.dolly",
        "nemo.collections.llm.gpt.data.retrieval",
        "nemo.collections.llm.gpt.data.mlperf_govreport",
        "nemo.collections.llm.gpt.data.alpaca"
    ],
    "nemo.collections.llm.gpt.data.dolly.DollyDataModule": [
        "nemo.collections.llm.gpt.data.api"
    ],
    "nemo.collections.llm.gpt.data.mock.MockDataModule": [
        "nemo.collections.llm.gpt.data.api",
        "nemo.collections.llm.recipes.nemotron4_15b_64k",
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.llama3_8b_64k",
        "nemo.collections.llm.recipes.llama3_8b_128k",
        "nemo.collections.llm.recipes.nemotron3_22b_16k",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.nemotron3_22b_64k",
        "nemo.collections.llm.recipes.llama3_8b_16k",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.nemotron4_15b_16k",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.mixtral_8x7b_64k",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.llama3_70b_64k",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.mixtral_8x22b_64k",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.llama3_70b_16k",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.mixtral_8x7b_16k",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.qwen2_500m",
        "nemo.collections.llm.recipes.mamba2_130m"
    ],
    "nemo.collections.llm.gpt.data.squad.SquadDataModule": [
        "nemo.collections.llm.gpt.data.api",
        "nemo.collections.llm.recipes.llama3_70b_16k",
        "nemo.collections.llm.recipes.mixtral_8x7b_16k"
    ],
    "nemo.collections.llm.gpt.data.hf_dataset.HFDatasetDataModule": [
        "nemo.collections.llm.gpt.data.api"
    ],
    "nemo.collections.llm.bert.data.fine_tuning.FineTuningDataModule": [
        "nemo.collections.llm.gpt.data.retrieval",
        "nemo.collections.llm.bert.data.specter"
    ],
    "nemo.collections.llm.gpt.data.hf_dataset_packed_sequence.HFDatasetPackedSequenceHelper": [
        "nemo.collections.llm.gpt.data.hf_dataset"
    ],
    "nemo.utils.sequence_packing_utils.create_packing_strategy": [
        "nemo.collections.llm.gpt.data.packed_sequence"
    ],
    "nemo.utils.sequence_packing_utils.create_hist": [
        "nemo.collections.llm.gpt.data.packed_sequence"
    ],
    "nemo.utils.sequence_packing_utils.fill_packing_strategy": [
        "nemo.collections.llm.gpt.data.packed_sequence"
    ],
    "nemo.collections.nlp.modules.common.tokenizer_utils.get_tokenizer": [
        "nemo.collections.llm.modelopt.model_utils",
        "nemo.collections.nlp.models.nlp_model",
        "nemo.collections.nlp.models.information_retrieval.bert_dpr_model",
        "nemo.collections.nlp.models.information_retrieval.bert_joint_ir_model",
        "nemo.collections.nlp.models.text2sparql.text2sparql_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model",
        "nemo.collections.nlp.data.machine_translation.preproc_mt_data",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.llm.inference.base._setup_trainer_and_restore_model": [
        "nemo.collections.llm.modelopt.model_utils"
    ],
    "nemo.collections.llm.gpt.model.base.get_batch_on_this_context_parallel_rank": [
        "nemo.collections.llm.modelopt.distill.model",
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.llm.modelopt.quantization.quant_cfg_choices.get_quant_cfg_choices": [
        "nemo.collections.llm.modelopt.quantization.quantizer"
    ],
    "nemo.collections.llm.inference.MCoreTokenizerWrappper": [
        "nemo.collections.llm.modelopt.quantization.quantizer"
    ],
    "nemo.collections.llm.inference.generate": [
        "nemo.collections.llm.modelopt.quantization.quantizer"
    ],
    "nemo.collections.llm.utils.torch_dtype_from_precision": [
        "nemo.collections.llm.modelopt.quantization.quantizer"
    ],
    "nemo.collections.llm.utils.barrier": [
        "nemo.collections.llm.modelopt.quantization.quantizer"
    ],
    "nemo.collections.llm.recipes.optim.adam.distributed_fused_adam_with_cosine_annealing": [
        "nemo.collections.llm.modelopt.recipes.distillation_recipe",
        "nemo.collections.llm.recipes.nemotron4_15b_64k",
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.nemotron3_22b_16k",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.finetune_default",
        "nemo.collections.llm.recipes.bert_340m",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.nemotron3_22b_64k",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.nemotron4_15b_16k",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.mixtral_8x22b_64k",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.qwen2_500m",
        "nemo.collections.llm.recipes.mamba2_130m",
        "nemo.collections.llm.recipes.bert_110m",
        "nemo.collections.vlm.recipes.llava15_7b",
        "nemo.collections.vlm.recipes.neva_llama3_8b",
        "nemo.collections.vlm.recipes.clip_b32",
        "nemo.collections.vlm.recipes.llava_next_7b",
        "nemo.collections.vlm.recipes.mllama_90b",
        "nemo.collections.vlm.recipes.llava15_13b",
        "nemo.collections.vlm.recipes.mllama_11b"
    ],
    "nemo.collections.llm.recipes.log.default.default_resume": [
        "nemo.collections.llm.modelopt.recipes.distillation_recipe",
        "nemo.collections.llm.recipes.nemotron4_15b_64k",
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.nemotron3_22b_16k",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.bert_340m",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.nemotron3_22b_64k",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.nemotron4_15b_16k",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.mixtral_8x22b_64k",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.qwen2_500m",
        "nemo.collections.llm.recipes.mamba2_130m",
        "nemo.collections.llm.recipes.bert_110m",
        "nemo.collections.diffusion.recipes.flux_535m",
        "nemo.collections.vlm.recipes.neva_llama3_8b"
    ],
    "nemo.collections.llm.recipes.log.default.default_log": [
        "nemo.collections.llm.modelopt.recipes.distillation_recipe",
        "nemo.collections.llm.recipes.nemotron4_15b_64k",
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.nemotron3_22b_16k",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.bert_340m",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.nemotron3_22b_64k",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.nemotron4_15b_16k",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.mixtral_8x22b_64k",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.qwen2_500m",
        "nemo.collections.llm.recipes.mamba2_130m",
        "nemo.collections.llm.recipes.bert_110m",
        "nemo.collections.diffusion.recipes.flux_12b",
        "nemo.collections.vlm.recipes.neva_llama3_8b"
    ],
    "nemo.collections.llm.recipes.precision.mixed_precision.bf16_mixed": [
        "nemo.collections.llm.modelopt.recipes.distillation_recipe",
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.llm.recipes.finetune_default",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.starcoder2",
        "nemo.collections.llm.recipes.nemotron",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.gemma2",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.deepseek",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.bert_embedding",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.bert",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.qwen2",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.llama_embedding_1b",
        "nemo.collections.llm.recipes.mamba2_130m",
        "nemo.collections.diffusion.recipes.flux_12b",
        "nemo.collections.vlm.recipes.llava15_7b",
        "nemo.collections.vlm.recipes.neva_llama3_8b",
        "nemo.collections.vlm.recipes.clip_b32",
        "nemo.collections.vlm.recipes.llava_next_7b",
        "nemo.collections.vlm.recipes.mllama_90b",
        "nemo.collections.vlm.recipes.llava15_13b",
        "nemo.collections.vlm.recipes.mllama_11b"
    ],
    "nemo.collections.llm.recipes.log.default.tensorboard_logger": [
        "nemo.collections.llm.modelopt.recipes.distillation_recipe",
        "nemo.collections.llm.recipes.nemotron4_15b_64k",
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.nemotron3_22b_16k",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.finetune_default",
        "nemo.collections.llm.recipes.bert_340m",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.nemotron3_22b_64k",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.nemotron4_15b_16k",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.mixtral_8x22b_64k",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.qwen2_500m",
        "nemo.collections.llm.recipes.mamba2_130m",
        "nemo.collections.llm.recipes.bert_110m",
        "nemo.collections.diffusion.recipes.flux_535m",
        "nemo.collections.diffusion.recipes.flux_12b",
        "nemo.collections.vlm.recipes.llava15_7b",
        "nemo.collections.vlm.recipes.neva_llama3_8b",
        "nemo.collections.vlm.recipes.clip_b32",
        "nemo.collections.vlm.recipes.llava_next_7b",
        "nemo.collections.vlm.recipes.mllama_90b",
        "nemo.collections.vlm.recipes.llava15_13b",
        "nemo.collections.vlm.recipes.mllama_11b"
    ],
    "nemo.collections.llm.t5.data.core.create_sft_dataset": [
        "nemo.collections.llm.t5.data.fine_tuning"
    ],
    "nemo.collections.llm.gpt.data.core._JSONLMemMapDataset": [
        "nemo.collections.llm.t5.data.core"
    ],
    "nemo.collections.llm.t5.data.fine_tuning.FineTuningDataModule": [
        "nemo.collections.llm.t5.data.squad"
    ],
    "nemo.collections.llm.t5.data.core.get_dataset_root": [
        "nemo.collections.llm.t5.data.squad"
    ],
    "nemo.collections.llm.peft.utils.ParallelLinearAdapter": [
        "nemo.collections.llm.peft.dora",
        "nemo.collections.llm.peft.canonical_lora",
        "nemo.collections.llm.peft.lora"
    ],
    "nemo.lightning.pytorch.callbacks.peft.AdapterWrapper": [
        "nemo.collections.llm.peft.dora",
        "nemo.collections.llm.peft.canonical_lora",
        "nemo.collections.llm.peft.lora"
    ],
    "nemo.lightning.pytorch.callbacks.peft.PEFT": [
        "nemo.collections.llm.peft.dora",
        "nemo.collections.llm.peft.canonical_lora",
        "nemo.collections.llm.peft.lora",
        "nemo.collections.speechlm.utils.model_transform"
    ],
    "nemo.collections.llm.peft.module_matcher.ModuleMatcher": [
        "nemo.collections.llm.peft.dora",
        "nemo.collections.llm.peft.canonical_lora",
        "nemo.collections.llm.peft.lora"
    ],
    "nemo.collections.llm.peft.utils.get_adapter_attributes_from_linear": [
        "nemo.collections.llm.peft.dora",
        "nemo.collections.llm.peft.canonical_lora",
        "nemo.collections.llm.peft.lora"
    ],
    "nemo.collections.llm.peft.lora.LoRA": [
        "nemo.collections.llm.peft.api",
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm",
        "nemo.collections.vlm.peft.lora"
    ],
    "nemo.collections.llm.peft.lora.LoRAMerge": [
        "nemo.collections.llm.peft.api"
    ],
    "nemo.lightning.io.api": [
        "nemo.collections.llm.peft.api"
    ],
    "nemo.collections.llm.utils.factory": [
        "nemo.collections.llm.peft.api"
    ],
    "nemo.collections.common.parts.adapter_modules.AdapterModuleUtil": [
        "nemo.collections.llm.peft.utils",
        "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters"
    ],
    "nemo.collections.common.parts.utils.activation_registry": [
        "nemo.collections.llm.peft.utils",
        "nemo.collections.common.parts.adapter_modules",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.asr.parts.submodules.conformer_modules",
        "nemo.collections.asr.parts.submodules.jasper",
        "nemo.collections.nlp.modules.common.hyena.hyena",
        "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters"
    ],
    "nemo.core.classes.mixins.adapter_mixin_strategies": [
        "nemo.collections.llm.peft.utils",
        "nemo.collections.common.parts.adapter_modules",
        "nemo.collections.asr.parts.submodules.adapters.multi_head_attention_adapter_module",
        "nemo.collections.asr.parts.submodules.adapters.transformer_multi_head_attention_adapter_module",
        "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters"
    ],
    "nemo.collections.llm.peft.utils.is_expert_linear": [
        "nemo.collections.llm.peft.canonical_lora",
        "nemo.collections.llm.peft.lora"
    ],
    "nemo.collections.llm.peft.lora.LinearAdapter": [
        "nemo.collections.llm.peft.canonical_lora"
    ],
    "nemo.collections.llm.peft.lora.LoRALinear": [
        "nemo.collections.llm.peft.canonical_lora"
    ],
    "nemo.collections.llm.peft.utils.wildcard_match": [
        "nemo.collections.llm.peft.module_matcher"
    ],
    "nemo.lightning.megatron_parallel.MegatronLossReduction": [
        "nemo.collections.llm.bert.loss",
        "nemo.collections.diffusion.models.model",
        "nemo.collections.diffusion.vae.train_vae",
        "nemo.collections.vlm.clip.loss.clip_loss"
    ],
    "nemo.collections.llm.bert.model.base.get_packed_seq_params": [
        "nemo.collections.llm.bert.model.embedding"
    ],
    "nemo.collections.llm.bert.model.BertModel": [
        "nemo.collections.llm.bert.model.embedding"
    ],
    "nemo.collections.llm.bert.model.BertConfig": [
        "nemo.collections.llm.bert.model.embedding"
    ],
    "nemo.collections.llm.bert.model.base.get_batch_on_this_context_parallel_rank": [
        "nemo.collections.llm.bert.model.embedding"
    ],
    "nemo.collections.llm.bert.model.bert.HuggingFaceBertImporter": [
        "nemo.collections.llm.bert.model.embedding"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.ApexGuardDefaults": [
        "nemo.collections.llm.bert.model.bert_spec",
        "nemo.collections.vision.modules.common.megatron.vision_transformer",
        "nemo.collections.vision.modules.vit.vit_backbone",
        "nemo.collections.multimodal.data.common.webdataset",
        "nemo.collections.multimodal.data.common.webdataset_s3",
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model",
        "nemo.collections.nlp.models.information_retrieval.bert_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_layer_modelopt_spec",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_full_te_layer_autocast_spec",
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.recurrent_layer",
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_model",
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_block",
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.recurrent_module",
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron.falcon.falcon_spec",
        "nemo.collections.nlp.models.language_modeling.megatron.falcon.falcon_decoder_layer",
        "nemo.collections.nlp.modules.common.prompt_encoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_decoders",
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.attention",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_decoder",
        "nemo.collections.nlp.modules.common.megatron.fused_softmax",
        "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.retrieval_transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoders",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_perceiver_encoders",
        "nemo.collections.nlp.modules.common.megatron.build_model",
        "nemo.collections.nlp.modules.common.megatron.module",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters",
        "nemo.collections.nlp.modules.common.megatron.hiddens.megatron_hidden_transform",
        "nemo.collections.nlp.modules.common.megatron.hiddens.megatron_hiddens",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_fim_dataset"
    ],
    "nemo.collections.llm.bert.model.base.BertConfig": [
        "nemo.collections.llm.bert.model.bert"
    ],
    "nemo.collections.llm.bert.model.base.BertModel": [
        "nemo.collections.llm.bert.model.bert"
    ],
    "nemo.collections.llm.bert.loss.BERTLossReduction": [
        "nemo.collections.llm.bert.model.base"
    ],
    "nemo.collections.llm.bert.model.bert_spec.get_bert_layer_with_transformer_engine_spec_postln": [
        "nemo.collections.llm.bert.model.base"
    ],
    "nemo.collections.llm.bert.model.bert_spec.get_bert_layer_local_spec_postln": [
        "nemo.collections.llm.bert.model.base"
    ],
    "nemo.collections.llm.bert.data.core.create_sft_dataset": [
        "nemo.collections.llm.bert.data.fine_tuning"
    ],
    "nemo.collections.llm.bert.data.core.get_dataset_root": [
        "nemo.collections.llm.bert.data.specter"
    ],
    "nemo.utils.exp_manager.TimingCallback": [
        "nemo.collections.llm.recipes.nemotron4_15b_64k",
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.nemotron3_22b_16k",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.finetune_default",
        "nemo.collections.llm.recipes.bert_340m",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.nemotron3_22b_64k",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.nemotron4_15b_16k",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.mixtral_8x7b_64k",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.llama3_70b_64k",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.mixtral_8x22b_64k",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.mixtral_8x7b_16k",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.llama_embedding_1b",
        "nemo.collections.llm.recipes.qwen2_500m",
        "nemo.collections.llm.recipes.mamba2_130m",
        "nemo.collections.llm.recipes.bert_110m",
        "nemo.collections.diffusion.recipes.flux_12b",
        "nemo.collections.vlm.recipes.llava15_7b",
        "nemo.collections.vlm.recipes.neva_llama3_8b",
        "nemo.collections.vlm.recipes.clip_b32",
        "nemo.collections.vlm.recipes.llava_next_7b",
        "nemo.collections.vlm.recipes.mllama_90b",
        "nemo.collections.vlm.recipes.llava15_13b",
        "nemo.collections.vlm.recipes.mllama_11b",
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.llm.recipes.nemotron.nemotron_model": [
        "nemo.collections.llm.recipes.nemotron4_15b_64k",
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.nemotron3_22b_16k",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.nemotron3_22b_64k",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.nemotron4_15b_16k",
        "nemo.collections.llm.recipes.nemotron3_8b"
    ],
    "nemo.collections.llm.recipes.nemotron.nemotron_trainer": [
        "nemo.collections.llm.recipes.nemotron4_15b_64k",
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.nemotron3_22b_16k",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.nemotron3_22b_64k",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.nemotron4_15b_16k",
        "nemo.collections.llm.recipes.nemotron3_8b"
    ],
    "nemo.collections.llm.api.finetune": [
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.hyena_1b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.hyena_40b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.hyena_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.mamba2_8b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.llama33_nemotron_super_49b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.llama31_nemotron_ultra_253b",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.mamba2_370m",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.mixtral_8x7b_64k",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.mamba2_1_3b",
        "nemo.collections.llm.recipes.mamba2_780m",
        "nemo.collections.llm.recipes.llama3_70b_64k",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.e5_340m",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.llama3_70b_16k",
        "nemo.collections.llm.recipes.mamba2_2_7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.mamba2_hybrid_8b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.mixtral_8x7b_16k",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.llama_embedding_1b",
        "nemo.collections.llm.recipes.qwen2_500m",
        "nemo.collections.llm.recipes.mamba2_130m"
    ],
    "nemo.lightning.pytorch.callbacks.megatron_comm_overlap.MegatronCommOverlapCallback": [
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_8b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.mixtral_8x22b_64k",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.nemotronh_56b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.llama_embedding_1b",
        "nemo.collections.vlm.recipes.llava15_7b",
        "nemo.collections.vlm.recipes.neva_llama3_8b",
        "nemo.collections.vlm.recipes.llava15_13b"
    ],
    "nemo.collections.llm.recipes.finetune_default.default_finetune_recipe": [
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.llama33_nemotron_super_49b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.llama31_nemotron_ultra_253b",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.e5_340m",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.llama_embedding_1b",
        "nemo.collections.llm.recipes.qwen2_500m"
    ],
    "nemo.lightning.pytorch.callbacks.garbage_collection.GarbageCollectionCallback": [
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gpt3_175b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.llama_embedding_1b",
        "nemo.collections.vlm.recipes.neva_llama3_8b"
    ],
    "nemo.collections.llm.peft.PEFT_STR2CLS": [
        "nemo.collections.llm.recipes.nemotron3_22b",
        "nemo.collections.llm.recipes.baichuan2_7b",
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.nemotron4_15b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.llm.recipes.nemotron3_4b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.nemotron4_340b",
        "nemo.collections.llm.recipes.starcoder2_15b",
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.llama33_nemotron_super_49b",
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct",
        "nemo.collections.llm.recipes.llama31_nemotron_ultra_253b",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.llama3_70b",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.chatglm3_6b",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.llama32_3b",
        "nemo.collections.llm.recipes.nemotron3_8b",
        "nemo.collections.llm.recipes.gemma_7b",
        "nemo.collections.llm.recipes.llama32_1b",
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.mistral_nemo_12b",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.llama2_7b",
        "nemo.collections.llm.recipes.mixtral_8x22b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.gemma2_2b",
        "nemo.collections.llm.recipes.deepseek_v2",
        "nemo.collections.llm.recipes.llama31_nemotron_70b",
        "nemo.collections.llm.recipes.llama_embedding_1b",
        "nemo.collections.llm.recipes.qwen2_500m"
    ],
    "nemo.collections.llm.Baichuan2Config7B": [
        "nemo.collections.llm.recipes.baichuan2_7b"
    ],
    "nemo.collections.llm.Baichuan2Model": [
        "nemo.collections.llm.recipes.baichuan2_7b"
    ],
    "nemo.collections.llm.recipes.hyena_base.model_recipe": [
        "nemo.collections.llm.recipes.hyena_1b",
        "nemo.collections.llm.recipes.hyena_40b",
        "nemo.collections.llm.recipes.hyena_7b"
    ],
    "nemo.collections.llm.recipes.hyena_base.tokenizer_recipe": [
        "nemo.collections.llm.recipes.hyena_1b",
        "nemo.collections.llm.recipes.hyena_40b",
        "nemo.collections.llm.recipes.hyena_7b"
    ],
    "nemo.collections.llm.recipes.hyena_base.pretrain_recipe_creater": [
        "nemo.collections.llm.recipes.hyena_1b",
        "nemo.collections.llm.recipes.hyena_40b",
        "nemo.collections.llm.recipes.hyena_7b"
    ],
    "nemo.collections.llm.recipes.qwen2.qwen2_trainer": [
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.qwen2_500m"
    ],
    "nemo.collections.llm.recipes.qwen2.qwen2_model": [
        "nemo.collections.llm.recipes.qwen25_14b",
        "nemo.collections.llm.recipes.qwen2_1p5b",
        "nemo.collections.llm.recipes.qwen2_7b",
        "nemo.collections.llm.recipes.qwen25_500m",
        "nemo.collections.llm.recipes.qwen25_72b",
        "nemo.collections.llm.recipes.qwen25_7b",
        "nemo.collections.llm.recipes.qwen25_1p5b",
        "nemo.collections.llm.recipes.qwen2_72b",
        "nemo.collections.llm.recipes.qwen25_32b",
        "nemo.collections.llm.recipes.qwen2_500m"
    ],
    "nemo.collections.llm.recipes.finetune_default.default_finetune_trainer": [
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.t5_220m"
    ],
    "nemo.collections.llm.recipes.finetune_default.nemo_resume": [
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.vlm.recipes.llava15_7b",
        "nemo.collections.vlm.recipes.llava_next_7b",
        "nemo.collections.vlm.recipes.mllama_90b",
        "nemo.collections.vlm.recipes.llava15_13b",
        "nemo.collections.vlm.recipes.mllama_11b"
    ],
    "nemo.collections.llm.t5.model.t5.T5Model": [
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.t5_220m",
        "nemo.collections.llm.inference.base"
    ],
    "nemo.collections.llm.t5.data.mock.MockDataModule": [
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.t5_220m"
    ],
    "nemo.collections.llm.t5.data.squad.SquadDataModule": [
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.t5_220m"
    ],
    "nemo.lightning.pytorch.optim.lr_scheduler.WarmupAnnealingScheduler": [
        "nemo.collections.llm.recipes.t5_3b",
        "nemo.collections.llm.recipes.t5_11b",
        "nemo.collections.llm.recipes.t5_220m"
    ],
    "nemo.collections.llm.t5.model.t5.T5Config3B": [
        "nemo.collections.llm.recipes.t5_3b"
    ],
    "nemo.collections.llm.gpt.data.PreTrainingDataModule": [
        "nemo.collections.llm.recipes.hyena_base"
    ],
    "nemo.lightning.pytorch.callbacks.flops_callback.FLOPsMeasurementCallback": [
        "nemo.collections.llm.recipes.hyena_base"
    ],
    "nemo.collections.llm.recipes.log.default.wandb_logger": [
        "nemo.collections.llm.recipes.hyena_base"
    ],
    "nemo.collections.llm.recipes.precision.mixed_precision.bf16_with_fp8_mixed": [
        "nemo.collections.llm.recipes.hyena_base"
    ],
    "nemo.collections.llm.gpt.data.megatron.hyena.Evo2Dataset": [
        "nemo.collections.llm.recipes.hyena_base"
    ],
    "nemo.collections.llm.recipes.tp_overlap_configs.userbuffers.userbuffers_bf16_h100_h8192_tp4_mbs1_seqlen8192": [
        "nemo.collections.llm.recipes.hyena_base",
        "nemo.collections.llm.recipes.llama3_70b"
    ],
    "nemo.lightning.pytorch.callbacks": [
        "nemo.collections.llm.recipes.hyena_base"
    ],
    "nemo.collections.llm.gpt.data.megatron.hyena.parse_dataset_config": [
        "nemo.collections.llm.recipes.hyena_base"
    ],
    "nemo.collections.llm.recipes.tp_overlap_configs.userbuffers.userbuffers_bf16_h100_h16384_tp8_cp2_mbs1_seqlen8192": [
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.llama31_nemotron_70b"
    ],
    "nemo.collections.llm.Llama31NemotronNano8BConfig": [
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b"
    ],
    "nemo.lightning.pytorch.callbacks.GarbageCollectionCallback": [
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.llama31_8b",
        "nemo.collections.llm.recipes.llama31_70b",
        "nemo.collections.llm.recipes.llama31_405b",
        "nemo.collections.llm.recipes.llama31_nemotron_70b"
    ],
    "nemo.collections.llm.LlamaNemotronModel": [
        "nemo.collections.llm.recipes.llama31_nemotron_nano_8b",
        "nemo.collections.llm.recipes.llama33_nemotron_super_49b",
        "nemo.collections.llm.recipes.llama31_nemotron_ultra_253b",
        "nemo.collections.llm.recipes.llama31_nemotron_70b"
    ],
    "nemo.collections.llm.recipes.starcoder2.starcoder2_model": [
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.starcoder2_15b"
    ],
    "nemo.collections.llm.recipes.starcoder2.starcoder2_trainer": [
        "nemo.collections.llm.recipes.starcoder2_3b",
        "nemo.collections.llm.recipes.starcoder2_7b",
        "nemo.collections.llm.recipes.starcoder2_15b"
    ],
    "nemo.collections.llm.recipes.llama3_8b": [
        "nemo.collections.llm.recipes.llama3_8b_64k",
        "nemo.collections.llm.recipes.llama3_8b_128k",
        "nemo.collections.llm.recipes.llama3_8b_16k"
    ],
    "nemo.collections.llm.t5.model.t5.T5Config11B": [
        "nemo.collections.llm.recipes.t5_11b"
    ],
    "nemo.collections.llm.recipes.gemma2.gemma2_model": [
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.gemma2_2b"
    ],
    "nemo.collections.llm.recipes.gemma2.gemma2_trainer": [
        "nemo.collections.llm.recipes.gemma2_9b",
        "nemo.collections.llm.recipes.gemma2_27b",
        "nemo.collections.llm.recipes.gemma2_2b"
    ],
    "nemo.collections.llm.t5.model.t5.T5Config220M": [
        "nemo.collections.llm.recipes.t5_220m"
    ],
    "nemo.collections.llm.bert.data.mock.BERTMockDataModule": [
        "nemo.collections.llm.recipes.bert_340m",
        "nemo.collections.llm.recipes.bert_110m"
    ],
    "nemo.collections.llm.recipes.bert.bert_model": [
        "nemo.collections.llm.recipes.bert_340m",
        "nemo.collections.llm.recipes.bert_110m"
    ],
    "nemo.collections.llm.recipes.bert.bert_trainer": [
        "nemo.collections.llm.recipes.bert_340m",
        "nemo.collections.llm.recipes.bert_110m"
    ],
    "nemo.collections.llm.gpt.model.deepseek.DeepSeekModel": [
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.deepseek_v2"
    ],
    "nemo.collections.llm.gpt.model.deepseek.DeepSeekV2LiteConfig": [
        "nemo.collections.llm.recipes.deepseek_v2_lite"
    ],
    "nemo.collections.llm.recipes.deepseek.trainer": [
        "nemo.collections.llm.recipes.deepseek_v2_lite",
        "nemo.collections.llm.recipes.deepseek_v3",
        "nemo.collections.llm.recipes.deepseek_v2"
    ],
    "nemo.collections.llm.gpt.model.starcoder.StarcoderModel": [
        "nemo.collections.llm.recipes.starcoder_15b"
    ],
    "nemo.collections.llm.recipes.precision.mixed_precision.fp16_mixed": [
        "nemo.collections.llm.recipes.starcoder_15b",
        "nemo.collections.llm.recipes.starcoder2",
        "nemo.collections.llm.recipes.nemotron",
        "nemo.collections.llm.recipes.gemma2",
        "nemo.collections.llm.recipes.bert_embedding",
        "nemo.collections.llm.recipes.bert",
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.starcoder.StarcoderConfig15B": [
        "nemo.collections.llm.recipes.starcoder_15b"
    ],
    "nemo.collections.llm.gpt.model.llama.Llama3Config8B": [
        "nemo.collections.llm.recipes.llama3_8b",
        "nemo.collections.vlm.recipes.neva_llama3_8b"
    ],
    "nemo.collections.llm.Llama33NemotronSuper49BConfig": [
        "nemo.collections.llm.recipes.llama33_nemotron_super_49b"
    ],
    "nemo.collections.llm.gpt.model.phi3mini.Phi3ConfigMini": [
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct"
    ],
    "nemo.collections.llm.gpt.model.phi3mini.Phi3Model": [
        "nemo.collections.llm.recipes.phi3_mini_4k_instruct"
    ],
    "nemo.collections.llm.gpt.model.starcoder2.Starcoder2Config7B": [
        "nemo.collections.llm.recipes.starcoder2"
    ],
    "nemo.collections.llm.gpt.model.starcoder2.Starcoder2Model": [
        "nemo.collections.llm.recipes.starcoder2"
    ],
    "nemo.collections.llm.gpt.model.starcoder2.Starcoder2Config3B": [
        "nemo.collections.llm.recipes.starcoder2"
    ],
    "nemo.collections.llm.gpt.model.starcoder2.Starcoder2Config15B": [
        "nemo.collections.llm.recipes.starcoder2"
    ],
    "nemo.collections.llm.Llama31NemotronUltra253BConfig": [
        "nemo.collections.llm.recipes.llama31_nemotron_ultra_253b"
    ],
    "nemo.collections.llm.gpt.model.nemotron.Nemotron3Config22B": [
        "nemo.collections.llm.recipes.nemotron"
    ],
    "nemo.collections.llm.gpt.model.nemotron.Nemotron3Config8B": [
        "nemo.collections.llm.recipes.nemotron"
    ],
    "nemo.collections.llm.gpt.model.nemotron.Nemotron4Config15B": [
        "nemo.collections.llm.recipes.nemotron"
    ],
    "nemo.collections.llm.gpt.model.nemotron.NemotronModel": [
        "nemo.collections.llm.recipes.nemotron"
    ],
    "nemo.collections.llm.gpt.model.nemotron.Nemotron4Config340B": [
        "nemo.collections.llm.recipes.nemotron"
    ],
    "nemo.collections.llm.gpt.model.nemotron.Nemotron3Config4B": [
        "nemo.collections.llm.recipes.nemotron"
    ],
    "nemo.collections.llm.GemmaModel": [
        "nemo.collections.llm.recipes.gemma_2b",
        "nemo.collections.llm.recipes.gemma_7b"
    ],
    "nemo.collections.llm.GemmaConfig2B": [
        "nemo.collections.llm.recipes.gemma_2b"
    ],
    "nemo.collections.llm.gpt.model.llama.Llama3Config70B": [
        "nemo.collections.llm.recipes.llama3_70b"
    ],
    "nemo.collections.llm.recipes.precision.mixed_precision.nemotron_h_bf16_with_fp8_current_scaling_mixed": [
        "nemo.collections.llm.recipes.nemotronh_47b",
        "nemo.collections.llm.recipes.nemotronh_56b"
    ],
    "nemo.collections.llm.recipes.optim.adam.pytorch_adam_with_cosine_annealing": [
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm"
    ],
    "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm.HFAutoModelForCausalLM": [
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm"
    ],
    "nemo.collections.llm.gpt.data.hf_dataset.SquadHFDataModule": [
        "nemo.collections.llm.recipes.hf_auto_model_for_causal_lm"
    ],
    "nemo.collections.llm.ChatGLMModel": [
        "nemo.collections.llm.recipes.chatglm3_6b"
    ],
    "nemo.collections.llm.ChatGLM3Config6B": [
        "nemo.collections.llm.recipes.chatglm3_6b"
    ],
    "nemo.collections.llm.recipes.mixtral_8x7b": [
        "nemo.collections.llm.recipes.mixtral_8x7b_64k",
        "nemo.collections.llm.recipes.mixtral_8x7b_16k"
    ],
    "nemo.collections.llm.gpt.model.gemma2.Gemma2Config2B": [
        "nemo.collections.llm.recipes.gemma2"
    ],
    "nemo.collections.llm.gpt.model.gemma2.Gemma2Model": [
        "nemo.collections.llm.recipes.gemma2"
    ],
    "nemo.collections.llm.gpt.model.gemma2.Gemma2Config9B": [
        "nemo.collections.llm.recipes.gemma2"
    ],
    "nemo.collections.llm.gpt.model.gemma2.Gemma2Config27B": [
        "nemo.collections.llm.recipes.gemma2"
    ],
    "nemo.collections.llm.recipes.llama3_70b": [
        "nemo.collections.llm.recipes.llama3_70b_64k",
        "nemo.collections.llm.recipes.llama3_70b_16k"
    ],
    "nemo.collections.llm.gpt.model.llama.Llama32Config3B": [
        "nemo.collections.llm.recipes.llama32_3b"
    ],
    "nemo.lightning.pytorch.callbacks.moe_token_drop.MegatronTokenDropCallback": [
        "nemo.collections.llm.recipes.mixtral_8x22b_64k",
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.mixtral_8x22b"
    ],
    "nemo.collections.llm.recipes.mixtral_8x22b": [
        "nemo.collections.llm.recipes.mixtral_8x22b_64k"
    ],
    "nemo.collections.llm.GemmaConfig7B": [
        "nemo.collections.llm.recipes.gemma_7b"
    ],
    "nemo.collections.llm.gpt.model.mistral.MistralModel": [
        "nemo.collections.llm.recipes.mistral_7b",
        "nemo.collections.llm.recipes.mistral_nemo_12b"
    ],
    "nemo.collections.llm.gpt.model.mistral.MistralConfig7B": [
        "nemo.collections.llm.recipes.mistral_7b"
    ],
    "nemo.collections.llm.recipes.bert_embedding.bert_embedding_model": [
        "nemo.collections.llm.recipes.e5_340m"
    ],
    "nemo.collections.llm.BertEmbeddingMiniConfig": [
        "nemo.collections.llm.recipes.bert_embedding"
    ],
    "nemo.collections.llm.BertEmbeddingModel": [
        "nemo.collections.llm.recipes.bert_embedding"
    ],
    "nemo.collections.llm.BertEmbeddingLargeConfig": [
        "nemo.collections.llm.recipes.bert_embedding"
    ],
    "nemo.collections.llm.recipes.tp_overlap_configs.userbuffers.userbuffers_bf16_h100_h12288_tp4_mbs1_seqlen2048": [
        "nemo.collections.llm.recipes.gpt3_175b"
    ],
    "nemo.collections.llm.gpt.model.GPTConfig175B": [
        "nemo.collections.llm.recipes.gpt3_175b"
    ],
    "nemo.collections.llm.gpt.model.GPTModel": [
        "nemo.collections.llm.recipes.gpt3_175b"
    ],
    "nemo.collections.llm.gpt.model.mistral.MistralNeMoConfig12B": [
        "nemo.collections.llm.recipes.mistral_nemo_12b"
    ],
    "nemo.collections.llm.HuggingFaceBertBaseConfig": [
        "nemo.collections.llm.recipes.bert"
    ],
    "nemo.collections.llm.HuggingFaceBertLargeConfig": [
        "nemo.collections.llm.recipes.bert"
    ],
    "nemo.collections.llm.MegatronBertLargeConfig": [
        "nemo.collections.llm.recipes.bert"
    ],
    "nemo.collections.llm.MegatronBertBaseConfig": [
        "nemo.collections.llm.recipes.bert"
    ],
    "nemo.collections.llm.BertModel": [
        "nemo.collections.llm.recipes.bert"
    ],
    "nemo.collections.llm.gpt.model.mixtral.MixtralModel": [
        "nemo.collections.llm.recipes.mixtral_8x7b",
        "nemo.collections.llm.recipes.mixtral_8x22b"
    ],
    "nemo.collections.llm.gpt.model.mixtral.MixtralConfig8x7B": [
        "nemo.collections.llm.recipes.mixtral_8x7b"
    ],
    "nemo.collections.llm.gpt.model.deepseek.DeepSeekV3Config": [
        "nemo.collections.llm.recipes.deepseek_v3"
    ],
    "nemo.collections.llm.gpt.model.llama.Llama2Config7B": [
        "nemo.collections.llm.recipes.llama2_7b"
    ],
    "nemo.collections.llm.gpt.model.mixtral.MixtralConfig8x22B": [
        "nemo.collections.llm.recipes.mixtral_8x22b"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen2Config1P5B": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen2Model": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen2Config7B": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen25Config72B": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen25Config32B": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen2Config72B": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen25Config14B": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen25Config500M": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen2Config500M": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen25Config1P5B": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen25Config7B": [
        "nemo.collections.llm.recipes.qwen2"
    ],
    "nemo.collections.llm.gpt.model.deepseek.DeepSeekV2Config": [
        "nemo.collections.llm.recipes.deepseek_v2"
    ],
    "nemo.collections.llm.Llama31Nemotron70BConfig": [
        "nemo.collections.llm.recipes.llama31_nemotron_70b"
    ],
    "nemo.collections.llm.LlamaEmbeddingModel": [
        "nemo.collections.llm.recipes.llama_embedding_1b"
    ],
    "nemo.collections.llm.Llama32EmbeddingConfig1B": [
        "nemo.collections.llm.recipes.llama_embedding_1b"
    ],
    "nemo.lightning.pytorch.optim.CosineAnnealingScheduler": [
        "nemo.collections.llm.recipes.optim.sgd",
        "nemo.collections.llm.recipes.optim.adam"
    ],
    "nemo.lightning.pytorch.optim.PytorchOptimizerModule": [
        "nemo.collections.llm.recipes.optim.sgd",
        "nemo.collections.llm.recipes.optim.adam",
        "nemo.collections.speechlm.recipes.optim.adam"
    ],
    "nemo.collections.common.tokenizers.sentencepiece_tokenizer.SentencePieceTokenizer": [
        "nemo.collections.llm.evaluation.base",
        "nemo.collections.common.tokenizers.canary_tokenizer",
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model",
        "nemo.collections.nlp.modules.common.tokenizer_utils",
        "nemo.collections.nlp.data.machine_translation.preproc_mt_data"
    ],
    "nemo.collections.llm.fn.base": [
        "nemo.collections.llm.fn.mixin",
        "nemo.collections.speechlm.utils.model_transform"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.get_linear_layer": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.modules.common.megatron.language_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.data_samplers.MegatronPretrainingSampler": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.models.text_to_image.instruct_pix2pix.ldm.ddpm_edit",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.multimodal.data.clip.clip_dataset",
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.get_all_params_for_weight_decay_optimization": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.collections.vision.data.megatron.data_samplers.MegatronVisionPretrainingRandomSampler": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.vision.modules.vit.vit_backbone.VitBackbone": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models"
    ],
    "nemo.collections.nlp.modules.common.megatron.module.Float16Module": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model",
        "nemo.collections.nlp.parts.nlp_overrides",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.nlp.modules.common.megatron.build_model.build_model": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.module.MegatronModule": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.vision.modules.common.megatron.vision_transformer",
        "nemo.collections.vision.modules.vit.vit_backbone",
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.attention",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_decoder",
        "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.retrieval_transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_perceiver_encoders",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.mup.layer"
    ],
    "nemo.collections.nlp.parts.utils_funcs.get_last_rank": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.collections.vision.data.megatron.vit_dataset.build_train_valid_datasets": [
        "nemo.collections.vision.models.megatron_vit_classification_models"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.scaled_init_method_normal": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.vision.modules.vit.vit_backbone",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.modules.common.megatron.megatron_decoders",
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoders",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.core.classes.common.PretrainedModelInfo": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.common.video_tokenizers.cosmos_tokenizer",
        "nemo.collections.audio.models.enhancement",
        "nemo.collections.audio.models.audio_to_audio",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.k2_sequence_models",
        "nemo.collections.asr.models.label_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.models.hybrid_asr_tts_models",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.tts.g2p.models.ctc",
        "nemo.collections.tts.g2p.models.heteronym_classification",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.aligner",
        "nemo.collections.tts.models.two_stages",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.ssl_tts",
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.fastpitch_ssl",
        "nemo.collections.tts.models.magpietts",
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.models.base",
        "nemo.collections.nlp.models.zero_shot_intent_recognition.zero_shot_intent_model",
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.models.question_answering.qa_gpt_model",
        "nemo.collections.nlp.models.question_answering.qa_s2s_model",
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.sgdqa_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_lexical_audio_model",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.token_classification.token_classification_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_base_model.MegatronBaseModel": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_griffin_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_mamba_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.init_method_normal": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.vision.modules.vit.vit_backbone",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.modules.common.prompt_encoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_decoders",
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoders",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters",
        "nemo.collections.nlp.modules.common.megatron.hiddens.megatron_hidden_transform"
    ],
    "nemo.collections.vision.modules.vit.vit_backbone.VitMlpHead": [
        "nemo.collections.vision.models.megatron_vit_classification_models"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.get_params_for_weight_decay_optimization": [
        "nemo.collections.vision.models.megatron_vit_classification_models",
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.layer_type.LayerType": [
        "nemo.collections.vision.modules.common.megatron.vision_transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_decoders",
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_decoder",
        "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder",
        "nemo.collections.nlp.modules.common.megatron.transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_perceiver_encoders",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.transformer.ParallelTransformerLayer_": [
        "nemo.collections.vision.modules.common.megatron.vision_transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.transformer.ParallelTransformer": [
        "nemo.collections.vision.modules.common.megatron.vision_transformer",
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_decoder",
        "nemo.collections.nlp.modules.common.megatron.retrieval_transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_perceiver_encoders"
    ],
    "nemo.collections.vision.modules.common.megatron.vision_transformer.ParallelVisionTransformer": [
        "nemo.collections.vision.modules.vit.vit_backbone"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_layer_norm.get_layer_norm": [
        "nemo.collections.vision.modules.vit.vit_backbone",
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_perceiver_encoders"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.data_samplers.MegatronPretrainingRandomSampler": [
        "nemo.collections.vision.data.megatron.data_samplers",
        "nemo.collections.multimodal.models.text_to_image.instruct_pix2pix.ldm.ddpm_edit",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.collections.vision.data.megatron.vit_dataset.RandomSeedDataset": [
        "nemo.collections.vision.data.megatron.data_samplers"
    ],
    "nemo.collections.vision.data.megatron.autoaugment.ImageNetPolicy": [
        "nemo.collections.vision.data.megatron.vit_dataset"
    ],
    "nemo.collections.multimodal.data.common.data_samplers.SharedEpoch": [
        "nemo.collections.vision.data.megatron.vit_dataset",
        "nemo.collections.multimodal.data.common.webdataset"
    ],
    "nemo.collections.vision.data.megatron.image_folder.ImageFolder": [
        "nemo.collections.vision.data.megatron.vit_dataset",
        "nemo.collections.multimodal.data.clip.clip_dataset"
    ],
    "nemo.collections.diffusion.vae.autoencoder.AutoEncoderConfig": [
        "nemo.collections.diffusion.utils.flux_pipeline_utils",
        "nemo.collections.diffusion.models.flux.model"
    ],
    "nemo.collections.diffusion.models.flux.model.FluxModelParams": [
        "nemo.collections.diffusion.utils.flux_pipeline_utils",
        "nemo.collections.diffusion.models.flux_controlnet.model",
        "nemo.collections.diffusion.recipes.flux_535m",
        "nemo.collections.diffusion.recipes.flux_12b"
    ],
    "nemo.collections.diffusion.models.flux.model.T5Config": [
        "nemo.collections.diffusion.utils.flux_pipeline_utils"
    ],
    "nemo.collections.diffusion.models.flux.model.FluxConfig": [
        "nemo.collections.diffusion.utils.flux_pipeline_utils",
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.models.flux.model.ClipConfig": [
        "nemo.collections.diffusion.utils.flux_pipeline_utils"
    ],
    "nemo.collections.diffusion.sampler.edm.edm_pipeline.EDMPipeline": [
        "nemo.collections.diffusion.models.model"
    ],
    "nemo.collections.diffusion.models.dit_llama.dit_llama_model.DiTLlamaModel": [
        "nemo.collections.diffusion.models.model"
    ],
    "nemo.collections.diffusion.models.flux.layers.TimeStepEmbedder": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.models.dit.dit_layer_spec.get_flux_double_transformer_engine_spec": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.utils.flux_ckpt_converter.flux_transformer_converter": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux.pipeline"
    ],
    "nemo.collections.diffusion.models.flux.layers.EmbedND": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.models.dit.dit_layer_spec.get_flux_single_transformer_engine_spec": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.utils.flux_ckpt_converter._import_qkv": [
        "nemo.collections.diffusion.models.flux.model"
    ],
    "nemo.collections.diffusion.vae.autoencoder.AutoEncoder": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux.pipeline"
    ],
    "nemo.collections.diffusion.models.dit.dit_layer_spec.AdaLNContinuous": [
        "nemo.collections.diffusion.models.flux.model"
    ],
    "nemo.collections.diffusion.utils.flux_ckpt_converter._import_qkv_bias": [
        "nemo.collections.diffusion.models.flux.model"
    ],
    "nemo.collections.diffusion.encoders.conditioner.FrozenT5Embedder": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux.pipeline"
    ],
    "nemo.collections.diffusion.models.dit.dit_layer_spec.MMDiTLayer": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.models.flux.layers.MLPEmbedder": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.sampler.flow_matching.flow_match_euler_discrete.FlowMatchEulerDiscreteScheduler": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux.pipeline"
    ],
    "nemo.collections.diffusion.models.dit.dit_layer_spec.FluxSingleTransformerBlock": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.encoders.conditioner.FrozenCLIPEmbedder": [
        "nemo.collections.diffusion.models.flux.model",
        "nemo.collections.diffusion.models.flux.pipeline"
    ],
    "nemo.collections.diffusion.utils.flux_pipeline_utils.FluxModelParams": [
        "nemo.collections.diffusion.models.flux.pipeline"
    ],
    "nemo.collections.diffusion.models.flux_controlnet.model.FluxControlNetConfig": [
        "nemo.collections.diffusion.models.flux.pipeline"
    ],
    "nemo.collections.diffusion.models.flux.model.Flux": [
        "nemo.collections.diffusion.models.flux.pipeline"
    ],
    "nemo.collections.diffusion.models.flux_controlnet.model.FluxControlNet": [
        "nemo.collections.diffusion.models.flux.pipeline"
    ],
    "nemo.collections.diffusion.models.flux.model.MegatronFluxModel": [
        "nemo.collections.diffusion.models.flux_controlnet.model",
        "nemo.collections.diffusion.recipes.flux_535m",
        "nemo.collections.diffusion.recipes.flux_12b"
    ],
    "nemo.collections.diffusion.models.flux_controlnet.layers.ControlNetConditioningEmbedding": [
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.models.flux.pipeline.FluxControlNetInferencePipeline": [
        "nemo.collections.diffusion.models.flux_controlnet.model"
    ],
    "nemo.collections.diffusion.models.dit.dit_model.DiTCrossAttentionModel": [
        "nemo.collections.diffusion.models.dit_llama.dit_llama_model"
    ],
    "nemo.collections.diffusion.models.dit_llama.dit_llama_layer_spec.get_dit_llama_spec": [
        "nemo.collections.diffusion.models.dit_llama.dit_llama_model"
    ],
    "nemo.collections.diffusion.models.dit.dit_embeddings": [
        "nemo.collections.diffusion.models.dit_llama.dit_llama_model",
        "nemo.collections.diffusion.models.dit.dit_model"
    ],
    "nemo.collections.diffusion.models.dit.dit_layer_spec.AdaLN": [
        "nemo.collections.diffusion.models.dit_llama.dit_llama_layer_spec"
    ],
    "nemo.collections.diffusion.models.dit.dit_layer_spec.get_dit_adaln_block_with_transformer_engine_spec": [
        "nemo.collections.diffusion.models.dit.dit_model"
    ],
    "nemo.collections.diffusion.models.dit.dit_embeddings.ParallelTimestepEmbedding": [
        "nemo.collections.diffusion.models.dit.dit_model"
    ],
    "nemo.collections.diffusion.models.dit.dit_attention.JointSelfAttention": [
        "nemo.collections.diffusion.models.dit.dit_layer_spec"
    ],
    "nemo.collections.diffusion.models.dit.dit_attention.FluxSingleAttention": [
        "nemo.collections.diffusion.models.dit.dit_layer_spec"
    ],
    "nemo.collections.diffusion.models.dit.dit_attention.JointSelfAttentionSubmodules": [
        "nemo.collections.diffusion.models.dit.dit_layer_spec"
    ],
    "nemo.collections.diffusion.sampler.edm.edm.EDMSampler": [
        "nemo.collections.diffusion.sampler.edm.edm_pipeline"
    ],
    "nemo.collections.diffusion.sampler.edm.edm.EDMSDE": [
        "nemo.collections.diffusion.sampler.edm.edm_pipeline"
    ],
    "nemo.collections.diffusion.sampler.context_parallel.cat_outputs_cp": [
        "nemo.collections.diffusion.sampler.edm.edm_pipeline"
    ],
    "nemo.collections.diffusion.sampler.edm.edm.EDMScaling": [
        "nemo.collections.diffusion.sampler.edm.edm_pipeline"
    ],
    "nemo.collections.diffusion.sampler.batch_ops.batch_mul": [
        "nemo.collections.diffusion.sampler.edm.edm_pipeline"
    ],
    "nemo.collections.diffusion.data.diffusion_mock_datamodule.MockDataModule": [
        "nemo.collections.diffusion.recipes.flux_12b"
    ],
    "nemo.collections.diffusion.models.model.DiTConfig": [
        "nemo.collections.diffusion.data.diffusion_fake_datamodule"
    ],
    "nemo.collections.multimodal.data.energon.base.EnergonMultiModalDataModule": [
        "nemo.collections.diffusion.data.diffusion_energon_datamodule"
    ],
    "nemo.collections.common.video_tokenizers.utils.read_image": [
        "nemo.collections.diffusion.data.prepare_energon_dataset"
    ],
    "nemo.collections.common.video_tokenizers.utils.resize_video": [
        "nemo.collections.diffusion.data.prepare_energon_dataset"
    ],
    "nemo.collections.common.video_tokenizers.cosmos_tokenizer.CausalVideoTokenizer": [
        "nemo.collections.diffusion.data.prepare_energon_dataset",
        "nemo.collections.common.video_tokenizers.cosmos_trt_run",
        "nemo.collections.multimodal_autoregressive.data.preprocess_pokemon_blip_cosmos_tokenizer"
    ],
    "nemo.utils.sequence_packing_utils.first_fit_decreasing": [
        "nemo.collections.diffusion.data.diffusion_taskencoder"
    ],
    "nemo.collections.diffusion.vae.train_vae.train_vae": [
        "nemo.collections.diffusion.vae.validate_vae"
    ],
    "nemo.collections.diffusion.train.pretrain": [
        "nemo.collections.diffusion.vae.train_vae"
    ],
    "nemo.lightning.megatron_parallel.ReductionT": [
        "nemo.collections.diffusion.vae.train_vae"
    ],
    "nemo.lightning.megatron_parallel.DataT": [
        "nemo.collections.diffusion.vae.train_vae"
    ],
    "nemo.collections.diffusion.data.diffusion_energon_datamodule.DiffusionDataModule": [
        "nemo.collections.diffusion.vae.train_vae"
    ],
    "nemo.collections.diffusion.vae.blocks.Upsample": [
        "nemo.collections.diffusion.vae.autoencoder"
    ],
    "nemo.collections.diffusion.vae.blocks.Downsample": [
        "nemo.collections.diffusion.vae.autoencoder"
    ],
    "nemo.collections.diffusion.vae.blocks.make_attn": [
        "nemo.collections.diffusion.vae.autoencoder"
    ],
    "nemo.collections.diffusion.vae.blocks.ResnetBlock": [
        "nemo.collections.diffusion.vae.autoencoder"
    ],
    "nemo.collections.diffusion.vae.blocks.Normalize": [
        "nemo.collections.diffusion.vae.autoencoder"
    ],
    "nemo.collections.vlm.qwen2vl.model.base.Qwen2VLVisionConfig": [
        "nemo.collections.vlm.qwen2vl.model.qwen2vl"
    ],
    "nemo.collections.llm.Qwen2Config": [
        "nemo.collections.vlm.qwen2vl.model.qwen2vl"
    ],
    "nemo.collections.vlm.vision.MultimodalProjectorConfig": [
        "nemo.collections.vlm.qwen2vl.model.qwen2vl",
        "nemo.collections.vlm.qwen2vl.model.base"
    ],
    "nemo.collections.vlm.qwen2vl.model.base.Qwen2VLConfig": [
        "nemo.collections.vlm.qwen2vl.model.qwen2vl"
    ],
    "nemo.collections.vlm.qwen2vl.model.base.Qwen2VLModel": [
        "nemo.collections.vlm.qwen2vl.model.qwen2vl"
    ],
    "nemo.collections.llm.Qwen2Config1P5B": [
        "nemo.collections.vlm.qwen2vl.model.qwen2vl"
    ],
    "nemo.collections.llm.Qwen2Config7B": [
        "nemo.collections.vlm.qwen2vl.model.qwen2vl"
    ],
    "nemo.collections.llm.Qwen2Config72B": [
        "nemo.collections.vlm.qwen2vl.model.qwen2vl"
    ],
    "nemo.collections.vlm.qwen2vl.model.Qwen2VLConfig7B": [
        "nemo.collections.vlm.qwen2vl.model.api"
    ],
    "nemo.collections.vlm.qwen2vl.model.Qwen2VLConfig2B": [
        "nemo.collections.vlm.qwen2vl.model.api"
    ],
    "nemo.collections.vlm.qwen2vl.model.Qwen2VLConfig72B": [
        "nemo.collections.vlm.qwen2vl.model.api"
    ],
    "nemo.collections.vlm.qwen2vl.model.Qwen2VLModel": [
        "nemo.collections.vlm.qwen2vl.model.api"
    ],
    "nemo.collections.vlm.neva.model.base.restore_model_weights": [
        "nemo.collections.vlm.qwen2vl.model.base"
    ],
    "nemo.collections.vlm.qwen2vl.data.multimodal_tokens.IMAGE_TOKEN_INDEX": [
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.qwen2vl.data.task_encoder",
        "nemo.collections.vlm.qwen2vl.data.preloaded",
        "nemo.collections.vlm.qwen2vl.data.mock"
    ],
    "nemo.lightning.megatron_parallel.MaskedTokenLossReductionWithLossMask": [
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.speechlm.models.base"
    ],
    "nemo.collections.llm.gpt.model.base.get_packed_seq_params": [
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.llm.gpt.model.qwen2.Qwen2Config": [
        "nemo.collections.vlm.qwen2vl.model.base"
    ],
    "nemo.collections.llm.fn.activation.quick_gelu": [
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.vision.clip_vit"
    ],
    "nemo.collections.vlm.qwen2vl.model.vision.Qwen2VisionModel": [
        "nemo.collections.vlm.qwen2vl.model.base"
    ],
    "nemo.collections.vlm.vision.base.get_image_sequence_length": [
        "nemo.collections.vlm.qwen2vl.model.base"
    ],
    "nemo.collections.vlm.neva.model.base.MODEL_CONFIG_ATTR": [
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.mllama.model.base"
    ],
    "nemo.collections.vlm.layer_specs.get_layer_spec_te": [
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.clip.model.base",
        "nemo.collections.vlm.vision.base"
    ],
    "nemo.collections.vlm.qwen2vl.data.multimodal_tokens.VIDEO_TOKEN_INDEX": [
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.qwen2vl.data.task_encoder",
        "nemo.collections.vlm.qwen2vl.data.preloaded"
    ],
    "nemo.collections.vlm.qwen2vl.data.multimodal_tokens.IGNORE_INDEX": [
        "nemo.collections.vlm.qwen2vl.model.base",
        "nemo.collections.vlm.qwen2vl.data.task_encoder",
        "nemo.collections.vlm.qwen2vl.data.preloaded"
    ],
    "nemo.collections.vlm.qwen2vl.data.multimodal_tokens.HF_IMAGE_TOKEN_INDEX": [
        "nemo.collections.vlm.qwen2vl.data.task_encoder"
    ],
    "nemo.collections.vlm.qwen2vl.data.preloaded.find_pattern_indices": [
        "nemo.collections.vlm.qwen2vl.data.task_encoder"
    ],
    "nemo.collections.vlm.qwen2vl.data.preloaded.process_vision": [
        "nemo.collections.vlm.qwen2vl.data.task_encoder"
    ],
    "nemo.collections.vlm.qwen2vl.data.multimodal_tokens.HF_VIDEO_TOKEN_INDEX": [
        "nemo.collections.vlm.qwen2vl.data.task_encoder"
    ],
    "nemo.collections.vlm.qwen2vl.data.multimodal_tokens.PAD_TOKEN_INDEX": [
        "nemo.collections.vlm.qwen2vl.data.task_encoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.get_ltor_masks_and_position_ids": [
        "nemo.collections.vlm.qwen2vl.data.task_encoder",
        "nemo.collections.vlm.qwen2vl.data.preloaded",
        "nemo.collections.vlm.mllama.data.preloaded",
        "nemo.collections.vlm.neva.data.preloaded",
        "nemo.collections.multimodal.data.neva.neva_energon_dataset",
        "nemo.collections.multimodal.data.neva.neva_dataset",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.text_generation_utils",
        "nemo.collections.nlp.modules.common.text_generation_strategy",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset"
    ],
    "nemo.collections.vlm.qwen2vl.data.multimodal_tokens.VISION_END_TOKEN_INDEX": [
        "nemo.collections.vlm.qwen2vl.data.preloaded"
    ],
    "nemo.lightning.apex_utils._GLOBAL_NUM_MICROBATCHES_CALCULATOR": [
        "nemo.collections.vlm.qwen2vl.data.preloaded",
        "nemo.collections.vlm.mllama.data.preloaded",
        "nemo.collections.vlm.neva.data.preloaded"
    ],
    "nemo.collections.vlm.qwen2vl.data.conversation.conv_templates": [
        "nemo.collections.vlm.qwen2vl.data.preloaded"
    ],
    "nemo.collections.vlm.qwen2vl.data.config.Qwen2VLDataConfig": [
        "nemo.collections.vlm.qwen2vl.data.preloaded"
    ],
    "nemo.collections.vlm.qwen2vl.data.multimodal_tokens.SPECIAL_TOKEN_MAP": [
        "nemo.collections.vlm.qwen2vl.data.preloaded"
    ],
    "nemo.collections.vlm.qwen2vl.data.preloaded.Qwen2VLPreloadedDataModule": [
        "nemo.collections.vlm.qwen2vl.data.api"
    ],
    "nemo.collections.vlm.qwen2vl.data.mock.Qwen2VLMockDataModule": [
        "nemo.collections.vlm.qwen2vl.data.api"
    ],
    "nemo.collections.vlm.CrossAttentionVisionConfig": [
        "nemo.collections.vlm.mllama.model.vision"
    ],
    "nemo.collections.vlm.mllama.model.base.CrossAttentionVisionConfig": [
        "nemo.collections.vlm.mllama.model.mllama"
    ],
    "nemo.collections.vlm.mllama.model.base.MLlamaModelConfig": [
        "nemo.collections.vlm.mllama.model.mllama"
    ],
    "nemo.collections.vlm.mllama.model.base.MLlamaModel": [
        "nemo.collections.vlm.mllama.model.mllama"
    ],
    "nemo.collections.vlm.mllama.model.base.CrossAttentionTextConfig": [
        "nemo.collections.vlm.mllama.model.mllama"
    ],
    "nemo.collections.vlm.mllama.model.vision.VisionEncoder": [
        "nemo.collections.vlm.mllama.model.base"
    ],
    "nemo.collections.vlm.mllama.model.utils._pad_attention_masks": [
        "nemo.collections.vlm.mllama.model.base"
    ],
    "nemo.collections.llm.gpt.model.llama.apply_rope_scaling": [
        "nemo.collections.vlm.mllama.model.base"
    ],
    "nemo.collections.llm.gpt.model.local_layer_spec": [
        "nemo.collections.vlm.mllama.model.base"
    ],
    "nemo.collections.vlm.mllama.model.language.CrossAttentionTextModel": [
        "nemo.collections.vlm.mllama.model.base"
    ],
    "nemo.collections.vlm.mllama.model.utils._generate_cross_attention_mask": [
        "nemo.collections.vlm.mllama.model.base"
    ],
    "nemo.collections.llm.gpt.model.transformer_engine_layer_spec": [
        "nemo.collections.vlm.mllama.model.base",
        "nemo.collections.vlm.clip.model.base"
    ],
    "nemo.collections.vlm.mllama.data.sample_encoder.Llama3SampleEncoder": [
        "nemo.collections.vlm.mllama.data.task_encoder"
    ],
    "nemo.collections.multimodal.data.energon.task_encoder.MultiModalTaskEncoder": [
        "nemo.collections.vlm.mllama.data.task_encoder",
        "nemo.collections.vlm.llava_next.data.task_encoder",
        "nemo.collections.multimodal.data.energon.base"
    ],
    "nemo.collections.vlm.mllama.data.sample_encoder.LlamaImageTextSample": [
        "nemo.collections.vlm.mllama.data.task_encoder"
    ],
    "nemo.collections.multimodal.data.energon.sample_encoder.SampleEncoder": [
        "nemo.collections.vlm.mllama.data.task_encoder",
        "nemo.collections.vlm.llava_next.data.task_encoder",
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.vlm.neva.data.config.ImageDataConfig": [
        "nemo.collections.vlm.mllama.data.preloaded",
        "nemo.collections.vlm.neva.data.preloaded"
    ],
    "nemo.collections.vlm.neva.data.preloaded.IGNORE_INDEX": [
        "nemo.collections.vlm.mllama.data.preloaded"
    ],
    "nemo.collections.vlm.neva.data.preloaded.LazySupervisedDataset": [
        "nemo.collections.vlm.mllama.data.preloaded"
    ],
    "nemo.collections.vlm.neva.data.config.DataConfig": [
        "nemo.collections.vlm.mllama.data.preloaded",
        "nemo.collections.vlm.neva.data.preloaded"
    ],
    "nemo.collections.vlm.mllama.model.utils.create_vision_mask_tensor": [
        "nemo.collections.vlm.mllama.data.preloaded",
        "nemo.collections.vlm.mllama.data.sample_encoder",
        "nemo.collections.vlm.inference.mllama_inference_wrapper"
    ],
    "nemo.collections.multimodal.data.energon.config.ImageTextSample": [
        "nemo.collections.vlm.mllama.data.sample_encoder",
        "nemo.collections.vlm.llava_next.data.sample",
        "nemo.collections.multimodal.data.energon.task_encoder",
        "nemo.collections.multimodal.data.energon.sample_encoder"
    ],
    "nemo.collections.multimodal.data.energon.sample_encoder.VQASampleEncoder": [
        "nemo.collections.vlm.mllama.data.sample_encoder",
        "nemo.collections.vlm.llava_next.data.vqa_sample_encoder",
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.multimodal.data.energon.config.MultiModalSampleConfig": [
        "nemo.collections.vlm.mllama.data.sample_encoder",
        "nemo.collections.vlm.llava_next.data.task_encoder",
        "nemo.collections.vlm.llava_next.data.vqa_sample_encoder",
        "nemo.collections.vlm.llava_next.data.interleaved_sample_encoder",
        "nemo.collections.multimodal.data.energon.sample_encoder",
        "nemo.collections.multimodal.data.energon.base"
    ],
    "nemo.collections.vlm.clip.model.CLIPModel": [
        "nemo.collections.vlm.clip.model.clip"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.ApproxGELUActivation": [
        "nemo.collections.vlm.clip.model.clip",
        "nemo.collections.nlp.parts.utils_funcs",
        "nemo.collections.nlp.modules.common.megatron.mlp"
    ],
    "nemo.collections.vlm.clip.model.CLIPViTConfig": [
        "nemo.collections.vlm.clip.model.clip"
    ],
    "nemo.collections.vlm.clip.model.CLIPConfig": [
        "nemo.collections.vlm.clip.model.clip"
    ],
    "nemo.collections.vlm.clip.model.CLIPTextModelConfig": [
        "nemo.collections.vlm.clip.model.clip"
    ],
    "nemo.collections.vlm.clip.loss.clip_loss.ClipMegatronLoss": [
        "nemo.collections.vlm.clip.model.base"
    ],
    "nemo.collections.llm.gpt.model.base.default_layer_spec": [
        "nemo.collections.vlm.clip.model.base"
    ],
    "nemo.collections.multimodal.data.clip.clip_dataset.build_imagenet_validation_dataloader_params": [
        "nemo.collections.vlm.clip.model.base"
    ],
    "nemo.lightning.MegatronOptimizerModule": [
        "nemo.collections.vlm.clip.model.base"
    ],
    "nemo.collections.multimodal.data.clip.clip_dataset.tokenize": [
        "nemo.collections.vlm.clip.data.clip_data_module",
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models"
    ],
    "nemo.collections.multimodal.data.clip.augmentations.augmentations.image_transform": [
        "nemo.collections.vlm.clip.data.clip_data_module",
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.multimodal.data.nsfw.nsfw_dataset",
        "nemo.collections.multimodal.data.clip.clip_dataset",
        "nemo.collections.multimodal.data.neva.neva_dataset"
    ],
    "nemo.collections.llm.Llama2Config13B": [
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.collections.vlm.vision.base.MultimodalProjectorConfig": [
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.collections.llm.LlamaConfig": [
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.collections.vlm.vision.base.HFCLIPVisionConfig": [
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.collections.vlm.neva.model.base.NevaModel": [
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.collections.vlm.neva.model.base.NevaConfig": [
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.llava_next.model.base"
    ],
    "nemo.collections.llm.Llama2Config7B": [
        "nemo.collections.vlm.neva.model.llava",
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.collections.vlm.neva.data.multimodal_tokens.IMAGE_TOKEN_INDEX": [
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.vlm.neva.data.mock",
        "nemo.collections.vlm.llava_next.model.base",
        "nemo.collections.vlm.llava_next.data.mock"
    ],
    "nemo.collections.vlm.neva.data.multimodal_tokens.IGNORE_INDEX": [
        "nemo.collections.vlm.neva.model.base",
        "nemo.collections.vlm.neva.data.preloaded"
    ],
    "nemo.collections.vlm.neva.data.multimodal_tokens.SPECIAL_TOKEN_MAP": [
        "nemo.collections.vlm.neva.data.preloaded"
    ],
    "nemo.collections.vlm.neva.data.conversation.conv_templates": [
        "nemo.collections.vlm.neva.data.preloaded"
    ],
    "nemo.collections.vlm.neva.data.sequence_packing.convert_to_packed": [
        "nemo.collections.vlm.neva.data.preloaded",
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.vlm.vision.base.CLIPViTConfig": [
        "nemo.collections.vlm.vision.siglip_vit",
        "nemo.collections.vlm.vision.intern_vit",
        "nemo.collections.vlm.vision.clip_vit"
    ],
    "nemo.collections.vlm.neva.data.mock.MockDataModule": [
        "nemo.collections.vlm.recipes.llava15_7b",
        "nemo.collections.vlm.recipes.neva_llama3_8b",
        "nemo.collections.vlm.recipes.llava15_13b"
    ],
    "nemo.collections.vlm.LlavaNextMockDataModule": [
        "nemo.collections.vlm.recipes.llava_next_7b"
    ],
    "nemo.collections.vlm.mllama.data.mock.MockDataModule": [
        "nemo.collections.vlm.recipes.mllama_90b",
        "nemo.collections.vlm.recipes.mllama_11b"
    ],
    "nemo.collections.llm.gpt.model.hf_auto_model_for_causal_lm.masked_cross_entropy": [
        "nemo.collections.vlm.hf.model.hf_auto_model_for_image_text_to_text",
        "nemo.collections.speechlm.models.hf_auto_model_for_speech_seq2seq"
    ],
    "nemo.collections.llm.gpt.data.hf_dataset.has_dist_env_init_or_rank_env_var": [
        "nemo.collections.vlm.hf.data.automodel_datasets"
    ],
    "nemo.collections.vlm.llava_next.model.base.MCoreLlavaNextModel": [
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.collections.vlm.llava_next.model.base.LlavaNextConfig": [
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.collections.vlm.neva.model.llava.HFLlavaImporter": [
        "nemo.collections.vlm.llava_next.model.llava_next"
    ],
    "nemo.collections.vlm.neva.model.base.MCoreNevaModel": [
        "nemo.collections.vlm.llava_next.model.base"
    ],
    "nemo.collections.vlm.llava_next.model.utils.pack_image_features": [
        "nemo.collections.vlm.llava_next.model.base"
    ],
    "nemo.collections.vlm.neva.data.sequence_packing.greedy_knapsack": [
        "nemo.collections.vlm.llava_next.data.task_encoder",
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.vlm.llava_next.data.vqa_sample_encoder.LlavaNextSampleEncoder": [
        "nemo.collections.vlm.llava_next.data.task_encoder"
    ],
    "nemo.collections.vlm.llava_next.data.sample.PackedLlavaNextTextRawBatch": [
        "nemo.collections.vlm.llava_next.data.task_encoder"
    ],
    "nemo.collections.vlm.llava_next.data.interleaved_sample_encoder.LlavaNextSimilarityInterleavedSampleEncoder": [
        "nemo.collections.vlm.llava_next.data.task_encoder"
    ],
    "nemo.collections.vlm.llava_next.data.utils.convert_to_packed_llava_next": [
        "nemo.collections.vlm.llava_next.data.task_encoder"
    ],
    "nemo.collections.vlm.neva.data.sequence_packing.predict_seq_len_with_padding": [
        "nemo.collections.vlm.llava_next.data.task_encoder"
    ],
    "nemo.collections.vlm.llava_next.data.sample.PackedLlavaNextTextSample": [
        "nemo.collections.vlm.llava_next.data.task_encoder"
    ],
    "nemo.collections.vlm.llava_next.data.sample.LlavaNextTextSample": [
        "nemo.collections.vlm.llava_next.data.task_encoder",
        "nemo.collections.vlm.llava_next.data.vqa_sample_encoder",
        "nemo.collections.vlm.llava_next.data.interleaved_sample_encoder"
    ],
    "nemo.collections.vlm.llava_next.data.sample.LlavaNextTextRawBatch": [
        "nemo.collections.vlm.llava_next.data.task_encoder"
    ],
    "nemo.collections.vlm.llava_next.model.utils.get_number_of_features": [
        "nemo.collections.vlm.llava_next.data.vqa_sample_encoder",
        "nemo.collections.vlm.llava_next.data.interleaved_sample_encoder",
        "nemo.collections.vlm.llava_next.data.mock"
    ],
    "nemo.collections.multimodal.data.energon.sample_encoder.SimilarityInterleavedEncoder": [
        "nemo.collections.vlm.llava_next.data.interleaved_sample_encoder",
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.multimodal.data.energon.config.ImageTextRawBatch": [
        "nemo.collections.vlm.llava_next.data.sample",
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.nlp.parts.peft_config.PEFT_CONFIG_MAP": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.parts.mixins.adapter_mixin",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.core.neural_types.LabelsType": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.mse_loss",
        "nemo.collections.common.losses.multi_similarity_loss",
        "nemo.collections.common.losses.smoothed_cross_entropy",
        "nemo.collections.common.losses.bce_logits_loss",
        "nemo.collections.asr.losses.ctc",
        "nemo.collections.asr.losses.bce_loss",
        "nemo.collections.asr.losses.angularloss",
        "nemo.collections.asr.losses.lattice_losses",
        "nemo.collections.asr.losses.rnnt_pytorch",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.losses.ssl_losses.ctc",
        "nemo.collections.asr.losses.ssl_losses.mlm",
        "nemo.collections.asr.losses.ssl_losses.rnnt",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.ssl_modules.quantizers",
        "nemo.collections.asr.data.audio_to_text_lhotse",
        "nemo.collections.asr.data.feature_to_label",
        "nemo.collections.asr.data.audio_to_diar_label_lhotse",
        "nemo.collections.asr.data.feature_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.nlp.losses.sgd_loss",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_dataset",
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset",
        "nemo.collections.nlp.data.text_normalization_as_tagging.thutmose_tagger_dataset",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_utils.generate": [
        "nemo.collections.multimodal.speech_llm.models.modular_models"
    ],
    "nemo.core.neural_types.MaskType": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.smoothed_cross_entropy",
        "nemo.collections.common.losses.bce_logits_loss",
        "nemo.collections.audio.losses.audio",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.asr.modules.transformer.transformer_bottleneck",
        "nemo.collections.asr.modules.transformer.decoder_module",
        "nemo.collections.asr.modules.transformer.encoder_module",
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.nlp.models.information_retrieval.bert_dpr_model",
        "nemo.collections.nlp.models.text2sparql.text2sparql_model",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.modules.common.bert_module",
        "nemo.collections.nlp.modules.common.decoder_module",
        "nemo.collections.nlp.modules.common.encoder_module",
        "nemo.collections.nlp.modules.common.gpt_module",
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoder_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_export",
        "nemo.collections.nlp.modules.common.megatron.megatron_decoder_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_tokens_head_module",
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_dataset",
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset",
        "nemo.collections.nlp.data.text_normalization_as_tagging.thutmose_tagger_dataset",
        "nemo.collections.nlp.data.text2sparql.text2sparql_dataset",
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.data.build_dataset.build_speechllm_dataloader": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models"
    ],
    "nemo.core.neural_types.AudioSignal": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.audio.losses.audio",
        "nemo.collections.audio.models.enhancement",
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.audio.modules.transforms",
        "nemo.collections.audio.data.audio_to_audio",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.modules.wav2vec_modules",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.asr.data.audio_to_text_lhotse",
        "nemo.collections.asr.data.audio_to_diar_label_lhotse",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.asr.data.audio_to_diar_label",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.nlp.modules.common.text_generation_utils.get_computeprob_response": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.collections.common.metrics.TextMetricsSet": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.get_nested_dict_value": [
        "nemo.collections.multimodal.speech_llm.models.modular_models"
    ],
    "nemo.core.neural_types.LengthsType": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.multimodal.speech_llm.modules.modality_adapters",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.multimodal.speech_cv.modules.resnet_video_front_end",
        "nemo.collections.multimodal.speech_cv.modules.linear_projection_video_front_end",
        "nemo.collections.audio.losses.audio",
        "nemo.collections.audio.models.enhancement",
        "nemo.collections.audio.parts.submodules.diffusion",
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.audio.parts.submodules.schroedinger_bridge",
        "nemo.collections.audio.parts.submodules.transformerunet",
        "nemo.collections.audio.parts.submodules.conformer",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.audio.modules.transforms",
        "nemo.collections.audio.modules.features",
        "nemo.collections.audio.modules.masking",
        "nemo.collections.audio.modules.ssl_pretrain_masking",
        "nemo.collections.audio.data.audio_to_audio",
        "nemo.collections.asr.losses.ctc",
        "nemo.collections.asr.losses.bce_loss",
        "nemo.collections.asr.losses.lattice_losses",
        "nemo.collections.asr.losses.rnnt_pytorch",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.losses.ssl_losses.contrastive",
        "nemo.collections.asr.losses.ssl_losses.ctc",
        "nemo.collections.asr.losses.ssl_losses.mlm",
        "nemo.collections.asr.losses.ssl_losses.rnnt",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.parts.utils.streaming_utils",
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.spectr_augment",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding",
        "nemo.collections.asr.parts.numba.spec_augment.spec_aug_numba",
        "nemo.collections.asr.modules.msdd_diarizer",
        "nemo.collections.asr.modules.wav2vec_modules",
        "nemo.collections.asr.modules.graph_decoder",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.beam_search_decoder",
        "nemo.collections.asr.modules.rnn_encoder",
        "nemo.collections.asr.modules.flashlight_decoder",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.ssl_modules.masking",
        "nemo.collections.asr.data.audio_to_text_lhotse",
        "nemo.collections.asr.data.feature_to_label",
        "nemo.collections.asr.data.audio_to_diar_label_lhotse",
        "nemo.collections.asr.data.feature_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.asr.data.audio_to_diar_label",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.tts.g2p.models.ctc",
        "nemo.collections.tts.models.spectrogram_enhancer",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.modules.perception_modules.MultiAudioPerceptionModule": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models"
    ],
    "nemo.collections.multimodal.speech_llm.parts.mixins.adapter_mixin.SpeechLLMAdapterMixin": [
        "nemo.collections.multimodal.speech_llm.models.modular_models"
    ],
    "nemo.collections.common.data.utils.move_data_to_device": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.parts.mixins.transcription",
        "nemo.collections.asr.parts.mixins.diarization",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.common.metrics.MetricStringToTorchMetric": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.asr.models.ASRModel": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils",
        "nemo.collections.asr.parts.utils.streaming_utils",
        "nemo.collections.asr.parts.utils.transcribe_utils",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.asr.parts.utils.eval_utils.remove_punctuations": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model.MegatronGPTSFTModel": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_griffin_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_mamba_sft_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.build_position_ids": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_strategy",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.modules.common.megatron.megatron_export",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_prompt_learning_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_prompt_learning_dataset"
    ],
    "nemo.core.classes.mixins.adapter_mixins": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.asr.parts.submodules.adapters.attention_adapter_mixin",
        "nemo.collections.asr.parts.submodules.adapters.transformer_multi_head_attention_adapter_module",
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.transformer.transformer_encoders",
        "nemo.collections.asr.modules.transformer.transformer_decoders",
        "nemo.collections.asr.modules.transformer.transformer",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_lexical_audio_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.asr.models.EncDecSpeakerLabelModel": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.modules.perception_modules"
    ],
    "nemo.collections.multimodal.speech_llm.data.build_dataset.build_speechllm_dataset": [
        "nemo.collections.multimodal.speech_llm.models.modular_models",
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models"
    ],
    "nemo.collections.asr.models.SpeechEncDecSelfSupervisedModel": [
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_t5_model.MegatronT5Model": [
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model",
        "nemo.collections.nlp.models.question_answering.qa_s2s_model",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bart_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model.MegatronT5SFTModel": [
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t0_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_glue_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model.MegatronT5LoraModel": [
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.NLPSaveRestoreConnector": [
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_trt_pipeline",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_nemo_pipeline",
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model",
        "nemo.collections.nlp.models.nlp_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.collections.nlp.models.nlp_model.NLPModel": [
        "nemo.collections.multimodal.speech_llm.models.modular_t5_models",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.tts.g2p.models.heteronym_classification",
        "nemo.collections.nlp.models.enc_dec_nlp_model",
        "nemo.collections.nlp.models.entity_linking.entity_linking_model",
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.models.question_answering.qa_base_model",
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.information_retrieval.base_ir_model",
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.sgdqa_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.models.text_classification.text_classification_model",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.token_classification.token_classification_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins"
    ],
    "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins.NLPAdapterModelMixin": [
        "nemo.collections.multimodal.speech_llm.parts.mixins.adapter_mixin",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins"
    ],
    "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins.replace_prefix": [
        "nemo.collections.multimodal.speech_llm.parts.mixins.adapter_mixin",
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins"
    ],
    "nemo.collections.nlp.parts.peft_config.PEFTConfig": [
        "nemo.collections.multimodal.speech_llm.parts.mixins.adapter_mixin",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.collections.common.data.prompt_fn.get_prompt_format_fn": [
        "nemo.collections.multimodal.speech_llm.parts.utils.data_utils",
        "nemo.collections.speechlm.data.text_processing"
    ],
    "nemo.collections.common.prompts.PromptFormatter": [
        "nemo.collections.multimodal.speech_llm.parts.utils.data_utils",
        "nemo.collections.common.data.lhotse.dataloader",
        "nemo.collections.asr.data.audio_to_text_lhotse_prompted",
        "nemo.collections.speechlm.data.text_processing"
    ],
    "nemo.utils.logging_mode": [
        "nemo.collections.multimodal.speech_llm.parts.utils.data_utils",
        "nemo.collections.common.parts.preprocessing.collections",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.parts.mixins.asr_adapter_mixins",
        "nemo.collections.asr.parts.mixins.transcription",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_decoding",
        "nemo.collections.asr.parts.submodules.ctc_decoding",
        "nemo.collections.asr.parts.submodules.adapters.attention_adapter_mixin",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.tts.parts.mixins.fastpitch_adapter_mixins",
        "nemo.collections.nlp.modules.common.megatron.utils",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.align_feat_seq_list": [
        "nemo.collections.multimodal.speech_llm.modules.perception_modules"
    ],
    "nemo.collections.asr.modules.conformer_encoder.ConformerMultiLayerFeatureExtractor": [
        "nemo.collections.multimodal.speech_llm.modules.perception_modules"
    ],
    "nemo.core.neural_types.SpectrogramType": [
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.audio.parts.submodules.diffusion",
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.audio.parts.submodules.schroedinger_bridge",
        "nemo.collections.audio.parts.submodules.transformerunet",
        "nemo.collections.audio.parts.submodules.conformer",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.audio.modules.transforms",
        "nemo.collections.audio.modules.features",
        "nemo.collections.audio.modules.masking",
        "nemo.collections.audio.modules.ssl_pretrain_masking",
        "nemo.collections.audio.modules.projections",
        "nemo.collections.asr.losses.ssl_losses.contrastive",
        "nemo.collections.asr.losses.ssl_losses.ctc",
        "nemo.collections.asr.losses.ssl_losses.mlm",
        "nemo.collections.asr.losses.ssl_losses.rnnt",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.parts.submodules.spectr_augment",
        "nemo.collections.asr.parts.numba.spec_augment.spec_aug_numba",
        "nemo.collections.asr.modules.msdd_diarizer",
        "nemo.collections.asr.modules.wav2vec_modules",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.rnn_encoder",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.ssl_modules.quantizers"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_decoders.TransformerDecoder": [
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.nlp.modules.common.transformer.perceiver_encoders",
        "nemo.collections.nlp.modules.common.transformer.transformer"
    ],
    "nemo.core.classes.Exportable": [
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.common.losses.smoothed_cross_entropy",
        "nemo.collections.asr.parts.submodules.classifier",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.asr.modules.ssl_modules.multi_layer_feat",
        "nemo.collections.asr.modules.ssl_modules.quantizers",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.modules.radtts",
        "nemo.collections.tts.modules.waveglow",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.classifier",
        "nemo.collections.nlp.modules.common.prompt_encoder"
    ],
    "nemo.core.classes.NeuralModule": [
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.multimodal.speech_cv.modules.video_preprocessing",
        "nemo.collections.common.losses.smoothed_cross_entropy",
        "nemo.collections.audio.parts.submodules.diffusion",
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.audio.parts.submodules.schroedinger_bridge",
        "nemo.collections.audio.parts.submodules.transformerunet",
        "nemo.collections.audio.parts.submodules.conformer",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.audio.modules.transforms",
        "nemo.collections.audio.modules.features",
        "nemo.collections.audio.modules.masking",
        "nemo.collections.audio.modules.ssl_pretrain_masking",
        "nemo.collections.audio.modules.projections",
        "nemo.collections.asr.parts.submodules.classifier",
        "nemo.collections.asr.modules.graph_decoder",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.asr.modules.beam_search_decoder",
        "nemo.collections.asr.modules.flashlight_decoder",
        "nemo.collections.asr.modules.transformer.decoder_module",
        "nemo.collections.asr.modules.transformer.encoder_module",
        "nemo.collections.asr.modules.ssl_modules.multi_layer_feat",
        "nemo.collections.asr.modules.ssl_modules.multi_softmax_decoder",
        "nemo.collections.asr.modules.ssl_modules.masking",
        "nemo.collections.asr.modules.ssl_modules.quantizers",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.submodules",
        "nemo.collections.tts.modules.radtts",
        "nemo.collections.tts.modules.tacotron2",
        "nemo.collections.tts.modules.transformer",
        "nemo.collections.tts.modules.waveglow",
        "nemo.collections.nlp.modules.common.classifier",
        "nemo.collections.nlp.modules.common.bert_module",
        "nemo.collections.nlp.modules.common.decoder_module",
        "nemo.collections.nlp.modules.common.encoder_module",
        "nemo.collections.nlp.modules.common.prompt_encoder",
        "nemo.collections.nlp.modules.common.gpt_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoder_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_decoder_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_tokens_head_module",
        "nemo.collections.nlp.modules.dialogue_state_tracking.sgd_decoder"
    ],
    "nemo.core.neural_types.AcousticEncodedRepresentation": [
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.multimodal.speech_llm.modules.modality_adapters",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.asr.losses.ssl_losses.contrastive",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding",
        "nemo.collections.asr.modules.wav2vec_modules",
        "nemo.collections.asr.modules.lstm_decoder",
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.rnn_encoder",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.ssl_modules.multi_softmax_decoder",
        "nemo.collections.asr.modules.ssl_modules.masking",
        "nemo.collections.asr.data.feature_to_label",
        "nemo.collections.asr.data.feature_to_text"
    ],
    "nemo.collections.asr.modules.conformer_encoder.ConformerEncoder": [
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.audio.parts.submodules.conformer",
        "nemo.collections.audio.modules.masking",
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.utils.decorators.experimental": [
        "nemo.collections.multimodal.speech_llm.modules.perception_modules",
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers",
        "nemo.collections.audio.parts.utils.callbacks",
        "nemo.collections.tts.g2p.models.i18n_ipa",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.ssl_tts",
        "nemo.collections.tts.models.fastpitch_ssl",
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.parts.utils.callbacks",
        "nemo.collections.tts.parts.preprocessing.feature_processors",
        "nemo.collections.tts.parts.preprocessing.features",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.text_to_speech_dataset",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.modules.common.megatron.position_embedding.xpos_position_embedding",
        "nemo.collections.nlp.modules.common.megatron.position_embedding.sandwich_relative_position_embedding",
        "nemo.collections.nlp.data.language_modeling.megatron.megatron_batch_samplers"
    ],
    "nemo.collections.common.parts.multi_layer_perceptron.MultiLayerPerceptron": [
        "nemo.collections.multimodal.speech_llm.modules.modality_adapters"
    ],
    "nemo.core.classes.exportable.Exportable": [
        "nemo.collections.multimodal.speech_llm.modules.modality_adapters",
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.modules.msdd_diarizer",
        "nemo.collections.asr.modules.lstm_decoder",
        "nemo.collections.asr.modules.sortformer_modules",
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.rnn_encoder",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.transformer.transformer",
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.tts.g2p.models.ctc",
        "nemo.collections.nlp.models.nlp_model",
        "nemo.collections.nlp.models.entity_linking.entity_linking_model",
        "nemo.collections.nlp.models.text_classification.text_classification_model",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.modules.common.bert_module",
        "nemo.collections.nlp.modules.common.gpt_module",
        "nemo.collections.nlp.modules.common.transformer.transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_decoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_export",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder"
    ],
    "nemo.collections.nlp.modules.common.transformer.text_generation.OutputType": [
        "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_utils",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.text_generation_utils",
        "nemo.collections.speechlm.utils.text_generation.audio_text_generation_utils"
    ],
    "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_strategy.model_inference_strategy_dispatcher": [
        "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_utils",
        "nemo.collections.speechlm.utils.text_generation.audio_text_generation_utils"
    ],
    "nemo.collections.common.tokenizers.tabular_tokenizer.TabularTokenizer": [
        "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_utils",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.modules.common.text_generation_utils",
        "nemo.collections.nlp.modules.common.tokenizer_utils",
        "nemo.collections.speechlm.utils.text_generation.audio_text_generation_utils"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.shift_tokens_by_multi_audios": [
        "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_strategy",
        "nemo.collections.speechlm.utils.text_generation.audio_text_generation_strategy"
    ],
    "nemo.collections.multimodal.speech_llm.models.modular_models.CrossAttendModularAudioGPTModel": [
        "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_strategy"
    ],
    "nemo.collections.multimodal.speech_llm.models.modular_models.ModularAudioGPTModel": [
        "nemo.collections.multimodal.speech_llm.modules.common.audio_text_generation_strategy"
    ],
    "nemo.collections.asr.data.audio_to_text.shard_manifests_if_needed": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.maybe_cast_to_list": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.base_dataset_utils.get_datasets_weights_and_num_samples": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_reranker_model",
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t0_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.TextProcessing": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.asr.data.audio_to_text_dataset.convert_to_config_list": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_cv.data.video_to_text_dataset",
        "nemo.collections.asr.models.label_models",
        "nemo.collections.asr.data.audio_to_label_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.asr.data.audio_to_text.VALID_FILE_FORMATS": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.asr.data.audio_to_text_dataset.ConcatDataset": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset"
    ],
    "nemo.collections.asr.data.audio_to_text_dataset.get_chain_dataset": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_cv.data.video_to_text_dataset",
        "nemo.collections.asr.data.audio_to_label_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.asr.parts.preprocessing.features.WaveformFeaturizer": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.label_models",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.tts.data.dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.asr.data.audio_to_text.cache_datastore_manifests": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.ceil_to_nearest": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.blendable_dataset.BlendableDataset": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_llm.data.build_dataset",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_reranker_model",
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t0_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy",
        "nemo.collections.speechlm.data.audio_to_text_module",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.build_loss_mask": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_llm.data.lhotse_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.get_num_samples_from_files": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.utils.distributed.webdataset_split_by_workers": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset",
        "nemo.collections.nlp.data.machine_translation.machine_translation_dataset",
        "nemo.collections.nlp.data.text_normalization.decoder_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset",
        "nemo.collections.nlp.data.language_modeling.l2r_lm_dataset",
        "nemo.collections.nlp.data.language_modeling.sentence_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.asr.data.audio_to_text.expand_sharded_filepaths": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.common.data.lhotse.nemo_adapters",
        "nemo.collections.asr.parts.preprocessing.perturb",
        "nemo.collections.asr.data.audio_to_text_dali",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.core.classes.IterableDataset": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.multimodal.data.common.webdataset",
        "nemo.collections.multimodal.data.common.data_samplers",
        "nemo.collections.asr.parts.utils.streaming_utils",
        "nemo.collections.asr.parts.preprocessing.perturb",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.text_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.asr.parts.preprocessing.segment.ChannelSelectorType": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.audio.models.audio_to_audio",
        "nemo.collections.audio.data.audio_to_audio",
        "nemo.collections.asr.models.confidence_ensemble",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.parts.mixins.transcription",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.feature_to_text",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.common.parts.preprocessing.collections": [
        "nemo.collections.multimodal.speech_llm.data.audio_text_dataset",
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.audio.data.audio_to_audio",
        "nemo.collections.asr.parts.preprocessing.perturb",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.feature_to_label",
        "nemo.collections.asr.data.feature_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.NeMoSFTExample": [
        "nemo.collections.multimodal.speech_llm.data.lhotse_dataset",
        "nemo.collections.common.prompts.llama"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.PromptFormatterTextProcessing": [
        "nemo.collections.multimodal.speech_llm.data.lhotse_dataset",
        "nemo.collections.multimodal.speech_llm.data.build_dataset"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.SourceTargetTextExample": [
        "nemo.collections.multimodal.speech_llm.data.lhotse_dataset",
        "nemo.collections.common.prompts.llama",
        "nemo.collections.common.prompts.t5nmt"
    ],
    "nemo.collections.multimodal.speech_llm.data.lhotse_dataset.LhotseAudioQuestionAnswerDataset": [
        "nemo.collections.multimodal.speech_llm.data.build_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.data.audio_text_dataset.get_tarred_audio_text_dataset_from_config": [
        "nemo.collections.multimodal.speech_llm.data.build_dataset"
    ],
    "nemo.collections.common.data.lhotse.get_lhotse_dataloader_from_config": [
        "nemo.collections.multimodal.speech_llm.data.build_dataset",
        "nemo.collections.audio.models.audio_to_audio",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.asr.parts.preprocessing.perturb.process_augmentations": [
        "nemo.collections.multimodal.speech_llm.data.build_dataset",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.label_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.parts.mixins.transcription",
        "nemo.collections.asr.data.audio_to_label_dataset",
        "nemo.collections.asr.data.audio_to_text_dataset",
        "nemo.collections.asr.data.data_simulation",
        "nemo.collections.asr.data.ssl_dataset",
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.multimodal.speech_llm.data.audio_text_dataset.get_audio_text_dataset_from_config": [
        "nemo.collections.multimodal.speech_llm.data.build_dataset"
    ],
    "nemo.collections.multimodal.modules.nerf.loss.laplacian_smooth_loss.LaplacianSmoothLoss": [
        "nemo.collections.multimodal.models.nerf.dreamfusion"
    ],
    "nemo.collections.multimodal.modules.nerf.materials.materials_base.ShadingEnum": [
        "nemo.collections.multimodal.models.nerf.dreamfusion",
        "nemo.collections.multimodal.modules.nerf.renderers.torchngp_volume_renderer",
        "nemo.collections.multimodal.modules.nerf.materials.basic_shading"
    ],
    "nemo.collections.multimodal.models.nerf.txt2nerf_base.Txt2NerfBase": [
        "nemo.collections.multimodal.models.nerf.dreamfusion"
    ],
    "nemo.collections.multimodal.modules.nerf.loss.normal_consistency_loss.NormalConsistencyLoss": [
        "nemo.collections.multimodal.models.nerf.dreamfusion"
    ],
    "nemo.collections.multimodal.models.nerf.base.NerfModelBase": [
        "nemo.collections.multimodal.models.nerf.txt2nerf_base"
    ],
    "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models.CLIPTextTransformer": [
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models"
    ],
    "nemo.collections.multimodal.data.nsfw.nsfw_dataset.build_dataset": [
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models"
    ],
    "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models.CLIPVisionTransformer": [
        "nemo.collections.multimodal.models.vision_language_foundation.megatron_nsfw_clip_models",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_gpt_model.mcore_supports_moe": [
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models"
    ],
    "nemo.collections.multimodal.losses.siglip_loss.SigLipLoss": [
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models"
    ],
    "nemo.collections.multimodal.data.clip.clip_dataset.build_imagenet_validation_dataloader": [
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models"
    ],
    "nemo.collections.multimodal.losses.clip_loss.ClipLoss": [
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_gpt_model.get_specs": [
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.language_model.get_language_model": [
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model"
    ],
    "nemo.collections.multimodal.data.clip.clip_dataset.build_train_valid_datasets": [
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models"
    ],
    "nemo.collections.nlp.parts.utils_funcs.activation_to_func": [
        "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm.MegatronLatentDiffusion": [
        "nemo.collections.multimodal.models.text_to_image.instruct_pix2pix.ldm.ddpm_edit"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm.LatentDiffusion": [
        "nemo.collections.multimodal.models.text_to_image.instruct_pix2pix.ldm.ddpm_edit",
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_trt_pipeline",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_nemo_pipeline"
    ],
    "nemo.collections.multimodal.data.instruct_pix2pix.edit_dataset.EditDataset": [
        "nemo.collections.multimodal.models.text_to_image.instruct_pix2pix.ldm.ddpm_edit"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel.Downsample": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel.ResBlock": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.linear": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.ddim.DDIMSampler": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.parts.stable_diffusion.pipeline"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel.UNetModel": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.exists": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.util"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.attention.SpatialTransformer": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.data.controlnet.controlnet_dataset.build_train_valid_datasets": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel.TimestepEmbedSequential": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel.AttentionBlock": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.conv_nd": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.log_txt_as_img": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.zero_module": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.timestep_embedding": [
        "nemo.collections.multimodal.models.text_to_image.controlnet.controlnet",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.parts.utils.randn_like": [
        "nemo.collections.multimodal.models.text_to_image.imagen.precond",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.ddim",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_helpers",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_trt_pipeline",
        "nemo.collections.multimodal.modules.imagen.sampler.continuous_ddpm",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.loss"
    ],
    "nemo.collections.multimodal.modules.imagen.sampler.batch_ops.batch_mul": [
        "nemo.collections.multimodal.models.text_to_image.imagen.precond",
        "nemo.collections.multimodal.modules.imagen.sampler.sampler"
    ],
    "nemo.collections.multimodal.modules.imagen.sampler.continuous_ddpm.GaussianDiffusionContinuousTimes": [
        "nemo.collections.multimodal.models.text_to_image.imagen.precond",
        "nemo.collections.multimodal.modules.imagen.sampler.sampler"
    ],
    "nemo.collections.multimodal.modules.imagen.sampler.sampler.DDPMSampler": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen"
    ],
    "nemo.collections.multimodal.parts.imagen.utils.random_dropout": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets.EfficientUNetModel": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen"
    ],
    "nemo.collections.multimodal.models.text_to_image.imagen.precond.EDMPrecond": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen"
    ],
    "nemo.collections.multimodal.modules.imagen.encoder.t5encoder.T5Encoder": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets.UNetModel": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen"
    ],
    "nemo.collections.multimodal.modules.imagen.sampler.sampler.EDMSampler": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen"
    ],
    "nemo.collections.multimodal.data.imagen.imagen_dataset.build_train_valid_datasets": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen"
    ],
    "nemo.collections.multimodal.models.text_to_image.imagen.precond.ContinousDDPMPrecond": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen"
    ],
    "nemo.collections.multimodal.models.text_to_image.imagen.imagen.MegatronImagen": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen_pipeline"
    ],
    "nemo.collections.multimodal.models.text_to_image.imagen.imagen.Imagen": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen_pipeline"
    ],
    "nemo.collections.multimodal.parts.utils.setup_trainer_and_models_for_inference": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen_pipeline"
    ],
    "nemo.collections.multimodal.parts.utils.numpy_to_pil": [
        "nemo.collections.multimodal.models.text_to_image.imagen.imagen_pipeline"
    ],
    "nemo.core.classes.mixins.adapter_mixins.AdapterModuleMixin": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.asr.parts.mixins.asr_adapter_mixins",
        "nemo.collections.asr.parts.submodules.jasper",
        "nemo.collections.tts.parts.mixins.fastpitch_adapter_mixins",
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.instantiate_from_config": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.autoencoder",
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.model",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.denoiser",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.loss",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sigma_sampling",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.guiders",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling"
    ],
    "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset.build_sdxl_precached_text_train_valid_datasets": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine"
    ],
    "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset.build_sdxl_train_valid_datasets": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.default": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.util",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_trt_pipeline",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sigma_sampling",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.guiders",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.wrappers.OPENAIUNETWRAPPER": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.disabled_train": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules"
    ],
    "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset.build_train_valid_precached_datasets": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.get_obj_from_str": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.attention.LinearWrapper": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.diffusion_engine",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.multimodal.modules.stable_diffusion.quantization_utils.utils"
    ],
    "nemo.core.config.modelPT": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm_config",
        "nemo.collections.asr.models.configs.classification_models_config",
        "nemo.collections.asr.models.configs.asr_models_config",
        "nemo.collections.asr.models.configs.quartznet_config",
        "nemo.collections.asr.models.configs.matchboxnet_config"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.Sampler": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.para_ddim",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.ddim",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.base_sampler",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.sampler_dpm",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.plms"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.noise_like": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.para_ddim",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.base_sampler",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.base_sampler.AbstractBaseSampler": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.para_ddim",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.ddim",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.sampler_dpm",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.plms"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.extract_into_tensor": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.ddim",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.util",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_trt_pipeline"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.make_ddim_sampling_parameters": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.base_sampler"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.make_ddim_timesteps": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.base_sampler"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.expand_dims": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.dpmsolver"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.interpolate_fn": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.dpmsolver"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.distributions.distributions.DiagonalGaussianDistribution": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.autoencoder",
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_nemo_pipeline"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.model.Encoder": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.autoencoder"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.model.Decoder": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.autoencoder"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.isimage": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.ismap": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.count_params": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules"
    ],
    "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset.build_train_valid_datasets": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.autoencoder.AutoencoderKL": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.autoencoder.VQModelInterface": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules.LoraWrapper": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.make_beta_schedule": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm",
        "nemo.collections.multimodal.models.text_to_image.dreambooth.util",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_trt_pipeline",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.discretizer"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.autoencoder.IdentityFirstStage": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.mean_flat": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.distributions.distributions.normal_kl": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.data.common.utils.get_collate_fn": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset.build_train_valid_precached_clip_datasets": [
        "nemo.collections.multimodal.models.text_to_image.stable_diffusion.ldm.ddpm"
    ],
    "nemo.collections.multimodal.data.dreambooth.dreambooth_dataset.DreamBoothDataset": [
        "nemo.collections.multimodal.models.text_to_image.dreambooth.dreambooth"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_IM_END_TOKEN": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.multimodal.data.neva.neva_dataset",
        "nemo.collections.nlp.modules.common.text_generation_utils"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.MultimodalProjectorAdapterConfig": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.multimodal.parts.utils.load_nemo_model_weights": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.nlp.modules.common.text_generation_utils.get_default_sampling_params": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.collections.nlp.modules.common.transformer.text_generation.LengthParam": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.rag.custom_gpt_llm",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.text_generation_utils"
    ],
    "nemo.core.adapter_mixins": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.multimodal.modules.stable_diffusion.attention",
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules",
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.attention",
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.transformer",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.DataCollatorForSupervisedDataset": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.nlp.modules.common.text_generation_utils.get_default_length_params": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.AdapterName": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.multimodal.modules.stable_diffusion.attention",
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.attention",
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.transformer",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.gpt_model.GPTModel": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.nlp.modules.common.text_generation_utils.megatron_neva_generate": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.multimodal.parts.utils.create_image_processor": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_IM_START_TOKEN": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.multimodal.data.neva.neva_dataset",
        "nemo.collections.nlp.modules.common.text_generation_utils"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.NevaPackedSeqDatatset": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models.MegatronCLIPModel": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.nlp.modules.common.transformer.text_generation.SamplingParam": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.rag.custom_gpt_llm",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.text_generation_utils"
    ],
    "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins.MultimodalAdapterModelMixin": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.make_supervised_data_module": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.nlp.modules.common.text_generation_utils.generate": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.text_generation_server"
    ],
    "nemo.collections.multimodal.data.neva.neva_energon_dataset.TaskEncoder": [
        "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_init.fake_initialize_model_parallel": [
        "nemo.collections.multimodal.parts.utils"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.NLPFSDPStrategy": [
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.collections.multimodal.models.multimodal_llm.neva.neva_model.MegatronNevaModel": [
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.process_image": [
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.multimodal.data.neva.neva_energon_dataset"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.NLPDDPStrategy": [
        "nemo.collections.multimodal.parts.utils",
        "nemo.collections.nlp.models.rag.custom_bert_embedder",
        "nemo.collections.nlp.models.rag.custom_gpt_llm",
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.DataParallelWrapper": [
        "nemo.collections.multimodal.parts.stable_diffusion.pipeline"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.sampler_dpm.DPMSolverSampler": [
        "nemo.collections.multimodal.parts.stable_diffusion.pipeline"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.para_ddim.ParaDDIMSampler": [
        "nemo.collections.multimodal.parts.stable_diffusion.pipeline"
    ],
    "nemo.collections.multimodal.models.text_to_image.stable_diffusion.samplers.plms.PLMSSampler": [
        "nemo.collections.multimodal.parts.stable_diffusion.pipeline"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling.EulerAncestralSampler": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_pipeline"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling.DPMPP2SAncestralSampler": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_pipeline"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling.EulerEDMSampler": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_pipeline"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.sdxl_helpers.Img2ImgDiscretizationWrapper": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_pipeline"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.sdxl_helpers.do_img2img": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_pipeline"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling.HeunEDMSampler": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_pipeline"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling.DPMPP2MSampler": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_pipeline"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.sdxl_helpers.do_sample": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_pipeline"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling.LinearMultistepSampler": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_pipeline"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.append_dims": [
        "nemo.collections.multimodal.parts.stable_diffusion.sdxl_helpers",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling_utils",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.denoiser",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.loss",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_decoding.RNNTBPEDecoding": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models"
    ],
    "nemo.collections.asr.losses.ctc.CTCLoss": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.tts.g2p.models.ctc"
    ],
    "nemo.collections.asr.parts.submodules.ctc_decoding.CTCBPEDecoding": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils",
        "nemo.collections.tts.g2p.models.ctc"
    ],
    "nemo.collections.multimodal.speech_cv.data.video_to_text_dataset": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models"
    ],
    "nemo.collections.asr.parts.mixins.ASRBPEMixin": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.tts.g2p.models.ctc"
    ],
    "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models.VisualEncDecHybridRNNTCTCModel": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models"
    ],
    "nemo.collections.asr.metrics.wer.WER": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils",
        "nemo.collections.tts.g2p.models.ctc"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_decoding.RNNTBPEDecodingConfig": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models"
    ],
    "nemo.collections.asr.parts.submodules.ctc_decoding.CTCBPEDecodingConfig": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils",
        "nemo.collections.tts.g2p.models.ctc"
    ],
    "nemo.collections.asr.losses.rnnt.RNNTLoss": [
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.asr.losses.ssl_losses.rnnt",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models"
    ],
    "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models.VisualEncDecRNNTModel": [
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_bpe_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models"
    ],
    "nemo.collections.asr.models.asr_model.ExportableEncDecModel": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.label_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.models.asr_model.ASRModel": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.asr.models.k2_aligner_model",
        "nemo.collections.asr.models.confidence_ensemble",
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_asr_tts_models",
        "nemo.collections.asr.parts.utils.asr_batching"
    ],
    "nemo.core.neural_types.VideoSignal": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.multimodal.speech_cv.modules.video_augment",
        "nemo.collections.multimodal.speech_cv.modules.resnet_video_front_end",
        "nemo.collections.multimodal.speech_cv.modules.linear_projection_video_front_end"
    ],
    "nemo.collections.asr.parts.mixins.InterCTCMixin": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models"
    ],
    "nemo.collections.asr.parts.mixins.ASRModuleMixin": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models"
    ],
    "nemo.collections.asr.parts.submodules.ctc_decoding.CTCDecoding": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils"
    ],
    "nemo.core.neural_types.LogprobsType": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.smoothed_cross_entropy",
        "nemo.collections.asr.losses.ctc",
        "nemo.collections.asr.losses.lattice_losses",
        "nemo.collections.asr.losses.rnnt_pytorch",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.losses.ssl_losses.mlm",
        "nemo.collections.asr.losses.ssl_losses.rnnt",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.token_classifier",
        "nemo.collections.asr.modules.graph_decoder",
        "nemo.collections.asr.modules.lstm_decoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.beam_search_decoder",
        "nemo.collections.asr.modules.flashlight_decoder",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.ssl_modules.multi_softmax_decoder",
        "nemo.collections.nlp.modules.common.sequence_classifier",
        "nemo.collections.nlp.modules.common.token_classifier"
    ],
    "nemo.collections.asr.data.audio_to_text_dataset": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models",
        "nemo.collections.asr.data.ssl_dataset"
    ],
    "nemo.collections.asr.parts.submodules.ctc_decoding.CTCDecodingConfig": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.configs.asr_models_config",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils"
    ],
    "nemo.collections.multimodal.speech_cv.models.visual_ctc_models.VisualEncDecCTCModel": [
        "nemo.collections.multimodal.speech_cv.models.visual_ctc_bpe_models"
    ],
    "nemo.collections.asr.parts.utils.rnnt_utils.Hypothesis": [
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.multimodal.speech_cv.models.visual_hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.confidence_ensemble",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.parts.mixins.mixins",
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils",
        "nemo.collections.asr.parts.utils.timestamp_utils",
        "nemo.collections.asr.parts.utils.asr_confidence_utils",
        "nemo.collections.asr.parts.utils.rnnt_batched_beam_utils",
        "nemo.collections.asr.parts.submodules.multitask_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding",
        "nemo.collections.asr.modules.rnnt_abstract",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.collections.asr.losses.rnnt.resolve_rnnt_default_loss_name": [
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.asr.models.rnnt_models"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_decoding.RNNTDecodingConfig": [
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.asr.models.rnnt_models"
    ],
    "nemo.collections.asr.modules.rnnt.RNNTDecoderJoint": [
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.asr.models.rnnt_models"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_decoding.RNNTDecoding": [
        "nemo.collections.multimodal.speech_cv.models.visual_rnnt_models",
        "nemo.collections.asr.models.rnnt_models"
    ],
    "nemo.collections.multimodal.speech_cv.parts.submodules.conv2d.Conv2d": [
        "nemo.collections.multimodal.speech_cv.parts.submodules.resnet_block",
        "nemo.collections.multimodal.speech_cv.parts.submodules.resnet",
        "nemo.collections.multimodal.speech_cv.parts.submodules.resnet_bottleneck_block"
    ],
    "nemo.collections.multimodal.speech_cv.parts.submodules.resnet_block.ResNetBlock": [
        "nemo.collections.multimodal.speech_cv.parts.submodules.resnet"
    ],
    "nemo.collections.multimodal.speech_cv.parts.submodules.global_avg_pool2d.GlobalAvgPool2d": [
        "nemo.collections.multimodal.speech_cv.parts.submodules.resnet"
    ],
    "nemo.collections.multimodal.speech_cv.parts.submodules.resnet_bottleneck_block.ResNetBottleneckBlock": [
        "nemo.collections.multimodal.speech_cv.parts.submodules.resnet"
    ],
    "nemo.collections.multimodal.speech_cv.parts.submodules.permute.Permute": [
        "nemo.collections.multimodal.speech_cv.modules.video_preprocessing"
    ],
    "nemo.collections.multimodal.speech_cv.parts.submodules.resnet.ResNet": [
        "nemo.collections.multimodal.speech_cv.modules.resnet_video_front_end"
    ],
    "nemo.collections.multimodal.speech_cv.data.video_to_text": [
        "nemo.collections.multimodal.speech_cv.data.video_to_text_dataset"
    ],
    "nemo.collections.common.tokenizers": [
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.parts.mixins.mixins",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.feature_to_text",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text"
    ],
    "nemo.collections.multimodal.speech_cv.parts.preprocessing.features.VideoFeaturizer": [
        "nemo.collections.multimodal.speech_cv.data.video_to_text"
    ],
    "nemo.collections.common.parts.preprocessing.parsers": [
        "nemo.collections.multimodal.speech_cv.data.video_to_text",
        "nemo.collections.common.parts.preprocessing.collections",
        "nemo.collections.asr.parts.preprocessing.perturb",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.audio_to_text_dali",
        "nemo.collections.asr.data.feature_to_text",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.tacotron2"
    ],
    "nemo.collections.multimodal.modules.nerf.background.nerf_background_base.NeRFBackgroundBase": [
        "nemo.collections.multimodal.modules.nerf.background.tcnn_background",
        "nemo.collections.multimodal.modules.nerf.background.torchngp_background"
    ],
    "nemo.collections.multimodal.modules.nerf.geometry.layers.MLP": [
        "nemo.collections.multimodal.modules.nerf.background.torchngp_background",
        "nemo.collections.multimodal.modules.nerf.geometry.torchngp_nerf"
    ],
    "nemo.collections.multimodal.modules.nerf.utils.torch_ngp.encoding.get_encoder": [
        "nemo.collections.multimodal.modules.nerf.background.torchngp_background",
        "nemo.collections.multimodal.modules.nerf.geometry.torchngp_nerf"
    ],
    "nemo.collections.multimodal.modules.renderer.base_renderer.RendererBase": [
        "nemo.collections.multimodal.modules.nerf.renderers.base_sdf_renderer",
        "nemo.collections.multimodal.modules.nerf.renderers.base_volume_renderer"
    ],
    "nemo.collections.multimodal.modules.nerf.renderers.base_renderer.BaseRenderer": [
        "nemo.collections.multimodal.modules.nerf.renderers.torchngp_volume_renderer",
        "nemo.collections.multimodal.modules.nerf.renderers.nvdiffrast_renderer"
    ],
    "nemo.collections.multimodal.modules.nerf.geometry.dmtet.DeepMarchingTetrahedra": [
        "nemo.collections.multimodal.modules.nerf.renderers.nvdiffrast_renderer"
    ],
    "nemo.collections.multimodal.modules.nerf.geometry.nerf_base.DensityActivationEnum": [
        "nemo.collections.multimodal.modules.nerf.renderers.nvdiffrast_renderer",
        "nemo.collections.multimodal.modules.nerf.geometry.torchngp_nerf",
        "nemo.collections.multimodal.modules.nerf.geometry.tcnn_nerf"
    ],
    "nemo.collections.multimodal.modules.renderer.base_renderer.BaseRenderer": [
        "nemo.collections.multimodal.modules.nerf.renderers.nerfacc_volume_renderer"
    ],
    "nemo.collections.multimodal.modules.nerf.materials.materials_base.MaterialsBase": [
        "nemo.collections.multimodal.modules.nerf.materials.basic_shading"
    ],
    "nemo.collections.multimodal.modules.nerf.guidance.txt2img_guidance_base.Txt2ImgGuidanceBase": [
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_huggingface_pipeline",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_trt_pipeline",
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_nemo_pipeline"
    ],
    "nemo.collections.multimodal.modules.nerf.utils.trt_engine.device_view": [
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_trt_pipeline"
    ],
    "nemo.collections.multimodal.modules.nerf.utils.trt_engine.Engine": [
        "nemo.collections.multimodal.modules.nerf.guidance.stablediffusion_trt_pipeline"
    ],
    "nemo.collections.multimodal.modules.nerf.utils.torch_ngp.gridencoder.GridEncoder": [
        "nemo.collections.multimodal.modules.nerf.utils.torch_ngp.encoding"
    ],
    "nemo.collections.multimodal.modules.nerf.utils.torch_ngp.freqencoder.FreqEncoder": [
        "nemo.collections.multimodal.modules.nerf.utils.torch_ngp.encoding"
    ],
    "nemo.collections.multimodal.modules.nerf.utils.torch_ngp.shencoder.SHEncoder": [
        "nemo.collections.multimodal.modules.nerf.utils.torch_ngp.encoding"
    ],
    "nemo.collections.multimodal.modules.nerf.geometry.nerf_base.NormalTypeEnum": [
        "nemo.collections.multimodal.modules.nerf.geometry.torchngp_nerf",
        "nemo.collections.multimodal.modules.nerf.geometry.tcnn_nerf"
    ],
    "nemo.collections.multimodal.modules.nerf.geometry.nerf_base.NeRFBase": [
        "nemo.collections.multimodal.modules.nerf.geometry.torchngp_nerf",
        "nemo.collections.multimodal.modules.nerf.geometry.tcnn_nerf"
    ],
    "nemo.collections.multimodal.modules.nerf.utils.activation.trunc_exp": [
        "nemo.collections.multimodal.modules.nerf.geometry.nerf_base"
    ],
    "nemo.collections.multimodal.modules.imagen.sampler.batch_ops.batch_div": [
        "nemo.collections.multimodal.modules.imagen.sampler.sampler"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention_alt": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention_alt.QKVStableMaskedAttention": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.layers.conv_nd": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention.QKVAttention": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention_alt.QKVMaskedAttention": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention_alt.QKVAttention": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.layers.UpsampleLearnable": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks",
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.layers.linear": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks",
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention_alt.QKVStableAttention": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.layers.Upsample": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.layers.Downsample": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks",
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.layers.normalization": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks",
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention.QKVStableMaskedAttention": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention.QKVMaskedAttention": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.layers.zero_module": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks",
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention.QKVStableAttention": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.embs.LearnedSinusoidalPosEmb": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks.ResBlock": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks.UBlock": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.attention.SelfAttentionPooling": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks.FusedCrossAttentionBlock": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks.StackedCrossAttentionBlock": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks.DBlock": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.blocks.ConditionalSequential": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.imagen.diffusionmodules.embs.UnLearnedSinusoidalPosEmb": [
        "nemo.collections.multimodal.modules.imagen.diffusionmodules.nets"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.fast_geglu": [
        "nemo.collections.multimodal.modules.stable_diffusion.attention"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.ParallelLinearAdapterConfig": [
        "nemo.collections.multimodal.modules.stable_diffusion.attention",
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.transformer",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.checkpoint": [
        "nemo.collections.multimodal.modules.stable_diffusion.attention",
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel.Timestep": [
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.expand_dims_like": [
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules"
    ],
    "nemo.collections.multimodal.data.clip.clip_dataset.get_preprocess_fns": [
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.encoders.x_transformer.Encoder": [
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.encoders.x_transformer.TransformerWrapper": [
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules"
    ],
    "nemo.collections.multimodal.models.vision_language_foundation.clip.megatron_clip_models.CLIPModel": [
        "nemo.collections.multimodal.modules.stable_diffusion.encoders.modules"
    ],
    "nemo.collections.multimodal.parts.stable_diffusion.utils.append_zero": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.discretizer"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.attention.LinearAttention": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.model"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling_utils.to_neg_log_sigma": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling_utils.to_d": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling_utils.to_sigma": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling_utils.linear_multistep_coeff": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling_utils.get_ancestral_step": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.sampling"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.default": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.build_timestep_embedding": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.normalization": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.avg_pool_nd": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.util.exists": [
        "nemo.collections.multimodal.modules.stable_diffusion.diffusionmodules.openaimodel"
    ],
    "nemo.collections.multimodal.data.energon.conversation.BaseConversationTemplateConfig": [
        "nemo.collections.multimodal.data.energon.config"
    ],
    "nemo.collections.multimodal.data.energon.conversation.LLaVATemplateConfig": [
        "nemo.collections.multimodal.data.energon.config"
    ],
    "nemo.collections.multimodal.data.energon.config.PackedImageTextRawBatch": [
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.multimodal.data.energon.config.PackedImageTextSample": [
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.multimodal.data.energon.sample_encoder.InterleavedSampleEncoder": [
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.vlm.neva.data.sequence_packing.predict_seq_len": [
        "nemo.collections.multimodal.data.energon.task_encoder"
    ],
    "nemo.collections.multimodal.data.nerf.cameras.PinholeCamera": [
        "nemo.collections.multimodal.data.nerf.circle_poses",
        "nemo.collections.multimodal.data.nerf.random_poses"
    ],
    "nemo.collections.multimodal.data.nerf.utils.get_rays": [
        "nemo.collections.multimodal.data.nerf.circle_poses",
        "nemo.collections.multimodal.data.nerf.random_poses"
    ],
    "nemo.collections.multimodal.data.nerf.utils.get_view_direction": [
        "nemo.collections.multimodal.data.nerf.circle_poses",
        "nemo.collections.multimodal.data.nerf.random_poses"
    ],
    "nemo.collections.multimodal.data.nerf.utils.compute_look_at_vectors": [
        "nemo.collections.multimodal.data.nerf.circle_poses",
        "nemo.collections.multimodal.data.nerf.random_poses"
    ],
    "nemo.collections.multimodal.data.nerf.utils.construct_poses": [
        "nemo.collections.multimodal.data.nerf.circle_poses",
        "nemo.collections.multimodal.data.nerf.random_poses"
    ],
    "nemo.collections.multimodal.data.stable_diffusion.augmentation.augmentations.identical_transform": [
        "nemo.collections.multimodal.data.controlnet.controlnet_dataset",
        "nemo.collections.multimodal.data.imagen.imagen_dataset",
        "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset"
    ],
    "nemo.collections.multimodal.data.common.webdataset.WebDatasetCommon": [
        "nemo.collections.multimodal.data.controlnet.controlnet_dataset",
        "nemo.collections.multimodal.data.clip.clip_dataset",
        "nemo.collections.multimodal.data.imagen.imagen_dataset",
        "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset"
    ],
    "nemo.collections.multimodal.data.stable_diffusion.augmentation.augmentations.construct_image_augmentations": [
        "nemo.collections.multimodal.data.controlnet.controlnet_dataset",
        "nemo.collections.multimodal.data.imagen.imagen_dataset",
        "nemo.collections.multimodal.data.stable_diffusion.stable_diffusion_dataset"
    ],
    "nemo.collections.multimodal.data.clip.imagenet_zeroshot_data.imagenet_classnames": [
        "nemo.collections.multimodal.data.clip.clip_dataset"
    ],
    "nemo.collections.multimodal.data.clip.imagenet_zeroshot_data.openai_imagenet_template": [
        "nemo.collections.multimodal.data.clip.clip_dataset"
    ],
    "nemo.collections.multimodal.data.imagen.augmentations.augmentations.build_resolution_filter": [
        "nemo.collections.multimodal.data.imagen.imagen_dataset"
    ],
    "nemo.collections.multimodal.data.imagen.augmentations.augmentations.PickleTransform": [
        "nemo.collections.multimodal.data.imagen.imagen_dataset"
    ],
    "nemo.collections.multimodal.data.imagen.augmentations.corruption.ImagePyramidNoCorruptions": [
        "nemo.collections.multimodal.data.imagen.imagen_dataset"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_llama_3": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_v1": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_llama_2": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_plain": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_conversations": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.DEFAULT_IMAGE_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_interleaved_prompt": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_multimodal": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_yi_34b": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_nv_dpo": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.multimodal.data.neva.neva_dataset.preprocess_nvgpt": [
        "nemo.collections.multimodal.data.neva.neva_energon_dataset",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_BOS_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_dataset"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_IMAGE_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_dataset"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_LABELS_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_dataset"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_VID_START_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_dataset",
        "nemo.collections.nlp.modules.common.text_generation_utils"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_VIDEO_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_dataset"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_VID_END_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_dataset",
        "nemo.collections.nlp.modules.common.text_generation_utils"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_EOS_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_dataset"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_PAD_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_dataset"
    ],
    "nemo.collections.multimodal.data.neva.conversation.DEFAULT_IMAGE_PATCH_TOKEN": [
        "nemo.collections.multimodal.data.neva.neva_dataset",
        "nemo.collections.nlp.modules.common.text_generation_utils"
    ],
    "nemo.collections.multimodal.data.common.webdataset_s3.WebDataset": [
        "nemo.collections.multimodal.data.common.webdataset"
    ],
    "nemo.collections.multimodal.data.common.data_samplers.WDSUrlsRandomSampler": [
        "nemo.collections.multimodal.data.common.webdataset"
    ],
    "nemo.collections.common.parts.perf_metrics_utils.read_tb_log": [
        "nemo.collections.common.metrics.perf_metrics"
    ],
    "nemo.collections.common.metrics.classification_accuracy.ExactStringMatchMetric": [
        "nemo.collections.common.metrics.metric_string_to_torchmetric"
    ],
    "nemo.collections.common.metrics.classification_accuracy.TokenF1Score": [
        "nemo.collections.common.metrics.metric_string_to_torchmetric"
    ],
    "nemo.core.neural_types.LossType": [
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.mse_loss",
        "nemo.collections.common.losses.aggregator",
        "nemo.collections.common.losses.multi_similarity_loss",
        "nemo.collections.common.losses.spanning_loss",
        "nemo.collections.common.losses.smoothed_cross_entropy",
        "nemo.collections.common.losses.bce_logits_loss",
        "nemo.collections.audio.losses.audio",
        "nemo.collections.audio.models.enhancement",
        "nemo.collections.asr.losses.ctc",
        "nemo.collections.asr.losses.bce_loss",
        "nemo.collections.asr.losses.angularloss",
        "nemo.collections.asr.losses.lattice_losses",
        "nemo.collections.asr.losses.rnnt_pytorch",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.losses.ssl_losses.contrastive",
        "nemo.collections.asr.losses.ssl_losses.ctc",
        "nemo.collections.asr.losses.ssl_losses.mlm",
        "nemo.collections.asr.losses.ssl_losses.rnnt",
        "nemo.collections.asr.parts.submodules.ssl_quantizers",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.tts.g2p.models.ctc",
        "nemo.collections.nlp.losses.sgd_loss",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder"
    ],
    "nemo.core.neural_types.LogitsType": [
        "nemo.collections.common.losses.cross_entropy",
        "nemo.collections.common.losses.multi_similarity_loss",
        "nemo.collections.common.losses.spanning_loss",
        "nemo.collections.common.losses.bce_logits_loss",
        "nemo.collections.asr.losses.angularloss",
        "nemo.collections.asr.parts.submodules.token_classifier",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.nlp.losses.sgd_loss",
        "nemo.collections.nlp.models.entity_linking.entity_linking_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.information_retrieval.bert_dpr_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.modules.common.sequence_classifier",
        "nemo.collections.nlp.modules.common.sequence_token_classifier",
        "nemo.collections.nlp.modules.common.token_classifier",
        "nemo.collections.nlp.modules.dialogue_state_tracking.sgd_encoder",
        "nemo.collections.nlp.modules.dialogue_state_tracking.sgd_decoder"
    ],
    "nemo.core.neural_types.RegressionValuesType": [
        "nemo.collections.common.losses.mse_loss",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.nlp.modules.common.sequence_regression",
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.core.classes.Loss": [
        "nemo.collections.common.losses.aggregator",
        "nemo.collections.common.losses.multi_similarity_loss",
        "nemo.collections.common.losses.spanning_loss",
        "nemo.collections.common.losses.smoothed_cross_entropy",
        "nemo.collections.audio.losses.audio",
        "nemo.collections.asr.losses.bce_loss",
        "nemo.collections.asr.losses.angularloss",
        "nemo.collections.asr.losses.lattice_losses",
        "nemo.collections.asr.losses.rnnt_pytorch",
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.tts.losses.hifigan_losses",
        "nemo.collections.tts.losses.radttsloss",
        "nemo.collections.tts.losses.stftlosses",
        "nemo.collections.tts.losses.waveglowloss",
        "nemo.collections.tts.losses.vits_losses",
        "nemo.collections.tts.losses.aligner_loss",
        "nemo.collections.tts.losses.tacotron2loss",
        "nemo.collections.nlp.losses.sgd_loss"
    ],
    "nemo.core.neural_types.ChannelType": [
        "nemo.collections.common.losses.spanning_loss",
        "nemo.collections.audio.parts.submodules.conformer",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.parts.submodules.classifier",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.asr.parts.submodules.token_classifier",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.transformer.decoder_module",
        "nemo.collections.asr.modules.transformer.encoder_module",
        "nemo.collections.asr.modules.transformer.transformer",
        "nemo.collections.nlp.losses.sgd_loss",
        "nemo.collections.nlp.models.information_retrieval.bert_dpr_model",
        "nemo.collections.nlp.models.text2sparql.text2sparql_model",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.classifier",
        "nemo.collections.nlp.modules.common.bert_module",
        "nemo.collections.nlp.modules.common.decoder_module",
        "nemo.collections.nlp.modules.common.encoder_module",
        "nemo.collections.nlp.modules.common.gpt_module",
        "nemo.collections.nlp.modules.common.transformer.transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoder_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_export",
        "nemo.collections.nlp.modules.common.megatron.megatron_decoder_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_tokens_head_module",
        "nemo.collections.nlp.modules.dialogue_state_tracking.sgd_encoder",
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_dataset",
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset",
        "nemo.collections.nlp.data.text_normalization_as_tagging.thutmose_tagger_dataset",
        "nemo.collections.nlp.data.text2sparql.text2sparql_dataset",
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.collections.common.tokenizers.chat_template_mixin.ChatTemplateMixin": [
        "nemo.collections.common.tokenizers.sentencepiece_tokenizer"
    ],
    "nemo.collections.common.parts.utils.if_exist": [
        "nemo.collections.common.tokenizers.sentencepiece_tokenizer"
    ],
    "nemo.collections.common.tokenizers.column_coder.ColumnCodes": [
        "nemo.collections.common.tokenizers.tabular_tokenizer"
    ],
    "nemo.collections.common.tokenizers.char_tokenizer.CharTokenizer": [
        "nemo.collections.common.tokenizers.word_tokenizer",
        "nemo.collections.nlp.modules.common.tokenizer_utils"
    ],
    "nemo.collections.common.tokenizers.char_tokenizer.TokenizerSpec": [
        "nemo.collections.common.tokenizers.regex_tokenizer"
    ],
    "nemo.collections.common.tokenizers.aggregate_tokenizer.AggregateTokenizer": [
        "nemo.collections.common.tokenizers.canary_tokenizer",
        "nemo.collections.asr.parts.submodules.multitask_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_decoding"
    ],
    "nemo.collections.common.tokenizers.sentencepiece_tokenizer.create_spt_model": [
        "nemo.collections.common.tokenizers.canary_tokenizer",
        "nemo.collections.nlp.data.machine_translation.preproc_mt_data"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.vietnamese_text_preprocessing": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.any_locale_text_preprocessing": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.chinese_text_preprocessing": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.french_text_preprocessing": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.italian_text_preprocessing": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.ipa_lexicon.get_grapheme_character_set": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers",
        "nemo.collections.tts.g2p.models.ja_jp_ipa",
        "nemo.collections.tts.g2p.models.zh_cn_pinyin"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.english_text_preprocessing": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.japanese_text_preprocessing": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.spanish_text_preprocessing": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.ipa_lexicon.get_ipa_punctuation_list": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers",
        "nemo.collections.tts.g2p.models.ja_jp_ipa",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.ipa_lexicon.validate_locale": [
        "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers",
        "nemo.collections.tts.g2p.models.i18n_ipa"
    ],
    "nemo.collections.tts.g2p.models.en_us_arpabet.EnglishG2p": [
        "nemo.collections.common.tokenizers.text_to_speech.tokenizer_wrapper",
        "nemo.collections.tts.g2p.modules",
        "nemo.collections.tts.torch.g2ps"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.EnglishPhonemesTokenizer": [
        "nemo.collections.common.tokenizers.text_to_speech.tokenizer_wrapper",
        "nemo.collections.tts.torch.tts_tokenizers",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.common.video_tokenizers.utils.tensor2numpy": [
        "nemo.collections.common.video_tokenizers.cosmos_tokenizer"
    ],
    "nemo.collections.common.video_tokenizers.utils.unpad_video_batch": [
        "nemo.collections.common.video_tokenizers.cosmos_tokenizer"
    ],
    "nemo.collections.common.video_tokenizers.utils.load_pytorch_model": [
        "nemo.collections.common.video_tokenizers.cosmos_tokenizer"
    ],
    "nemo.collections.common.video_tokenizers.utils.load_jit_model": [
        "nemo.collections.common.video_tokenizers.cosmos_tokenizer"
    ],
    "nemo.collections.common.video_tokenizers.utils.get_tokenizer_config": [
        "nemo.collections.common.video_tokenizers.cosmos_tokenizer"
    ],
    "nemo.collections.common.video_tokenizers.utils.pad_video_batch": [
        "nemo.collections.common.video_tokenizers.cosmos_tokenizer",
        "nemo.collections.multimodal_autoregressive.data.preprocess_pokemon_blip_cosmos_tokenizer"
    ],
    "nemo.collections.common.video_tokenizers.utils.numpy2tensor": [
        "nemo.collections.common.video_tokenizers.cosmos_tokenizer",
        "nemo.collections.multimodal_autoregressive.data.preprocess_pokemon_blip_cosmos_tokenizer"
    ],
    "nemo.export.tensorrt_lazy_compiler.trt_compile": [
        "nemo.collections.common.video_tokenizers.cosmos_trt_run"
    ],
    "nemo.collections.common.video_tokenizers.networks.TokenizerConfigs": [
        "nemo.collections.common.video_tokenizers.utils"
    ],
    "nemo.collections.common.video_tokenizers.networks.TokenizerModels": [
        "nemo.collections.common.video_tokenizers.utils"
    ],
    "nemo.collections.common.video_tokenizers.modules.Decoder3DType": [
        "nemo.collections.common.video_tokenizers.networks.configs",
        "nemo.collections.common.video_tokenizers.networks.discrete_video",
        "nemo.collections.common.video_tokenizers.networks.continuous_video"
    ],
    "nemo.collections.common.video_tokenizers.modules.ContinuousFormulation": [
        "nemo.collections.common.video_tokenizers.networks.configs",
        "nemo.collections.common.video_tokenizers.networks.continuous_image",
        "nemo.collections.common.video_tokenizers.networks.continuous_video"
    ],
    "nemo.collections.common.video_tokenizers.modules.DiscreteQuantizer": [
        "nemo.collections.common.video_tokenizers.networks.configs",
        "nemo.collections.common.video_tokenizers.networks.discrete_video",
        "nemo.collections.common.video_tokenizers.networks.discrete_image"
    ],
    "nemo.collections.common.video_tokenizers.modules.EncoderType": [
        "nemo.collections.common.video_tokenizers.networks.configs",
        "nemo.collections.common.video_tokenizers.networks.discrete_image",
        "nemo.collections.common.video_tokenizers.networks.continuous_image"
    ],
    "nemo.collections.common.video_tokenizers.modules.DecoderType": [
        "nemo.collections.common.video_tokenizers.networks.configs",
        "nemo.collections.common.video_tokenizers.networks.discrete_image",
        "nemo.collections.common.video_tokenizers.networks.continuous_image"
    ],
    "nemo.collections.common.video_tokenizers.modules.Encoder3DType": [
        "nemo.collections.common.video_tokenizers.networks.configs",
        "nemo.collections.common.video_tokenizers.networks.discrete_video",
        "nemo.collections.common.video_tokenizers.networks.continuous_video"
    ],
    "nemo.collections.common.video_tokenizers.modules.quantizers.InvQuantizerJit": [
        "nemo.collections.common.video_tokenizers.networks.discrete_video",
        "nemo.collections.common.video_tokenizers.networks.discrete_image"
    ],
    "nemo.collections.common.video_tokenizers.modules.layers3d.CausalConv3d": [
        "nemo.collections.common.video_tokenizers.networks.discrete_video",
        "nemo.collections.common.video_tokenizers.networks.continuous_video"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.round_ste": [
        "nemo.collections.common.video_tokenizers.modules.quantizers"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.rearrange": [
        "nemo.collections.common.video_tokenizers.modules.quantizers"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.pack_one": [
        "nemo.collections.common.video_tokenizers.modules.quantizers"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.entropy": [
        "nemo.collections.common.video_tokenizers.modules.quantizers"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.unpack_one": [
        "nemo.collections.common.video_tokenizers.modules.quantizers"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.default": [
        "nemo.collections.common.video_tokenizers.modules.quantizers"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.batch2time": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.time2batch": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.nonlinearity": [
        "nemo.collections.common.video_tokenizers.modules.layers3d",
        "nemo.collections.common.video_tokenizers.modules.layers2d"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.cast_tuple": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.is_odd": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.patching.UnPatcher": [
        "nemo.collections.common.video_tokenizers.modules.layers3d",
        "nemo.collections.common.video_tokenizers.modules.layers2d"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.batch2space": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.patching.Patcher3D": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.replication_pad": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.space2batch": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.CausalNormalize": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.patching.UnPatcher3D": [
        "nemo.collections.common.video_tokenizers.modules.layers3d"
    ],
    "nemo.collections.common.video_tokenizers.modules.patching.Patcher": [
        "nemo.collections.common.video_tokenizers.modules.layers3d",
        "nemo.collections.common.video_tokenizers.modules.layers2d"
    ],
    "nemo.collections.common.video_tokenizers.modules.utils.Normalize": [
        "nemo.collections.common.video_tokenizers.modules.layers2d"
    ],
    "nemo.collections.common.parts.skills_utils.add_task": [
        "nemo.collections.common.parts.nemo_run_utils"
    ],
    "nemo.collections.common.parts.skills_utils.check_if_mounted": [
        "nemo.collections.common.parts.nemo_run_utils"
    ],
    "nemo.collections.common.parts.skills_utils.get_mounts_from_config": [
        "nemo.collections.common.parts.nemo_run_utils"
    ],
    "nemo.collections.common.parts.skills_utils.run_exp": [
        "nemo.collections.common.parts.nemo_run_utils"
    ],
    "nemo.core.classes.mixins.access_mixins": [
        "nemo.collections.common.parts.adapter_modules"
    ],
    "nemo.utils.data_utils.DataStoreObject": [
        "nemo.collections.common.parts.preprocessing.manifest",
        "nemo.collections.asr.parts.utils.manifest_utils",
        "nemo.collections.asr.data.audio_to_text"
    ],
    "nemo.utils.data_utils.get_datastore_object": [
        "nemo.collections.common.parts.preprocessing.manifest"
    ],
    "nemo.utils.nemo_logging.LogMode": [
        "nemo.collections.common.parts.preprocessing.manifest",
        "nemo.collections.asr.parts.utils.eval_utils"
    ],
    "nemo.collections.common.parts.preprocessing.cleaners": [
        "nemo.collections.common.parts.preprocessing.parsers"
    ],
    "nemo.collections.common.parts.preprocessing.manifest": [
        "nemo.collections.common.parts.preprocessing.collections"
    ],
    "nemo.collections.common.parts.preprocessing.manifest.get_full_path": [
        "nemo.collections.common.parts.preprocessing.collections",
        "nemo.collections.common.data.lhotse.cutset",
        "nemo.collections.common.data.lhotse.nemo_adapters",
        "nemo.collections.common.data.lhotse.text_adapters",
        "nemo.collections.audio.data.audio_to_audio_lhotse",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.parts.utils.transcribe_utils",
        "nemo.collections.asr.parts.utils.vad_utils",
        "nemo.collections.asr.data.ssl_dataset"
    ],
    "nemo.collections.common.tokenizers.AggregateTokenizer": [
        "nemo.collections.common.prompts.formatter",
        "nemo.collections.asr.parts.submodules.ngram_lm.kenlm_utils"
    ],
    "nemo.collections.common.prompts.formatter.Modality": [
        "nemo.collections.common.prompts.mistral",
        "nemo.collections.common.prompts.phi2",
        "nemo.collections.common.prompts.canary",
        "nemo.collections.common.prompts.llama",
        "nemo.collections.common.prompts.example",
        "nemo.collections.common.prompts.canary2",
        "nemo.collections.common.prompts.plain",
        "nemo.collections.common.prompts.gemma",
        "nemo.collections.common.prompts.t5nmt"
    ],
    "nemo.collections.common.prompts.formatter.PromptFormatter": [
        "nemo.collections.common.prompts.mistral",
        "nemo.collections.common.prompts.phi2",
        "nemo.collections.common.prompts.canary",
        "nemo.collections.common.prompts.llama",
        "nemo.collections.common.prompts.example",
        "nemo.collections.common.prompts.canary2",
        "nemo.collections.common.prompts.plain",
        "nemo.collections.common.prompts.gemma",
        "nemo.collections.common.prompts.t5nmt",
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.common.tokenizers.canary_tokenizer.CANARY_BOS": [
        "nemo.collections.common.prompts.canary",
        "nemo.collections.common.prompts.canary2"
    ],
    "nemo.collections.common.tokenizers.canary_tokenizer.CANARY_NOPNC": [
        "nemo.collections.common.prompts.canary"
    ],
    "nemo.collections.common.tokenizers.canary_tokenizer.CANARY_SPECIAL_TOKENIZER": [
        "nemo.collections.common.prompts.canary",
        "nemo.collections.common.prompts.canary2"
    ],
    "nemo.collections.common.tokenizers.canary_tokenizer.CANARY_EOS": [
        "nemo.collections.common.prompts.canary",
        "nemo.collections.common.prompts.canary2"
    ],
    "nemo.collections.common.data.prompt_fn.registered_prompt_format_fn": [
        "nemo.collections.common.prompts.canary",
        "nemo.collections.common.prompts.llama",
        "nemo.collections.common.prompts.canary2",
        "nemo.collections.common.prompts.plain",
        "nemo.collections.common.prompts.gemma",
        "nemo.collections.common.prompts.t5nmt",
        "nemo.collections.common.data.lhotse.text_adapters"
    ],
    "nemo.collections.common.tokenizers.canary_tokenizer.CANARY_PNC": [
        "nemo.collections.common.prompts.canary"
    ],
    "nemo.collections.common.prompts.formatter.BOS_SLOT": [
        "nemo.collections.common.prompts.llama"
    ],
    "nemo.collections.common.prompts.formatter.EOS_SLOT": [
        "nemo.collections.common.prompts.llama"
    ],
    "nemo.collections.common.tokenizers.canary_tokenizer.CanaryTokenizer": [
        "nemo.collections.common.prompts.canary2"
    ],
    "nemo.collections.common.tokenizers.canary_tokenizer.CANARY2_BOCTX": [
        "nemo.collections.common.prompts.canary2"
    ],
    "nemo.collections.asr.parts.preprocessing.AudioSegment": [
        "nemo.collections.common.data.dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.Formattable": [
        "nemo.collections.common.data.lhotse.sampling"
    ],
    "nemo.collections.common.data.lhotse.cutset.guess_parse_cutset": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.sampling.BucketingFilter": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.sampling.FixedBucketBatchSizeConstraint2D": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.sampling.MultimodalFixedBucketBatchSizeConstraint2D": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.sampling.MultimodalSamplingConstraint": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.sampling.TokenCountFilter": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.sampling.TokenPerSecondFilter": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.sampling.DurationFilter": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.cutset.IncompleteConfigError": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.cutset.read_cutset_from_config": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.prompt_fn.apply_prompt_format_fn": [
        "nemo.collections.common.data.lhotse.dataloader",
        "nemo.collections.common.data.lhotse.text_adapters"
    ],
    "nemo.collections.common.tokenizers.aggregate_tokenizer.TokenizerWrapper": [
        "nemo.collections.common.data.lhotse.dataloader",
        "nemo.collections.common.data.lhotse.text_adapters",
        "nemo.collections.asr.data.audio_to_text_lhotse"
    ],
    "nemo.collections.common.data.lhotse.sampling.TokenPerTokenFilter": [
        "nemo.collections.common.data.lhotse.dataloader"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.NeMoMultimodalConversationJsonlAdapter": [
        "nemo.collections.common.data.lhotse.cutset"
    ],
    "nemo.collections.common.data.lhotse.sampling.PlaceholderFilter": [
        "nemo.collections.common.data.lhotse.cutset"
    ],
    "nemo.collections.common.data.lhotse.dataloader.make_structured_with_schema_warnings": [
        "nemo.collections.common.data.lhotse.cutset"
    ],
    "nemo.collections.common.data.lhotse.nemo_adapters.LazyNeMoIterator": [
        "nemo.collections.common.data.lhotse.cutset"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.NeMoSFTJsonlAdapter": [
        "nemo.collections.common.data.lhotse.cutset"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.LhotseTextPairAdapter": [
        "nemo.collections.common.data.lhotse.cutset"
    ],
    "nemo.collections.common.data.lhotse.nemo_adapters.expand_sharded_filepaths": [
        "nemo.collections.common.data.lhotse.cutset",
        "nemo.collections.common.data.lhotse.text_adapters"
    ],
    "nemo.collections.common.data.lhotse.nemo_adapters.LazyNeMoTarredIterator": [
        "nemo.collections.common.data.lhotse.cutset"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.LhotseTextAdapter": [
        "nemo.collections.common.data.lhotse.cutset"
    ],
    "nemo.collections.audio.metrics.squim.SquimObjectiveMetric": [
        "nemo.collections.audio.metrics.audio"
    ],
    "nemo.collections.audio.metrics.squim.SquimMOSMetric": [
        "nemo.collections.audio.metrics.audio"
    ],
    "nemo.core.neural_types.VoidType": [
        "nemo.collections.audio.losses.audio",
        "nemo.collections.audio.parts.submodules.diffusion",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.asr.losses.ssl_losses.ctc",
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.nlp.modules.common.gpt_module"
    ],
    "nemo.collections.audio.parts.utils.audio.toeplitz": [
        "nemo.collections.audio.losses.audio"
    ],
    "nemo.collections.asr.parts.preprocessing.features.make_seq_mask_like": [
        "nemo.collections.audio.losses.audio",
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.audio.modules.transforms",
        "nemo.collections.audio.modules.masking"
    ],
    "nemo.collections.audio.models.audio_to_audio.AudioToAudioModel": [
        "nemo.collections.audio.models.enhancement"
    ],
    "nemo.collections.audio.data.audio_to_audio_dataset": [
        "nemo.collections.audio.models.audio_to_audio"
    ],
    "nemo.collections.audio.data.audio_to_audio_lhotse.LhotseAudioToTargetDataset": [
        "nemo.collections.audio.models.audio_to_audio"
    ],
    "nemo.collections.audio.metrics.audio.AudioMetricWrapper": [
        "nemo.collections.audio.models.audio_to_audio"
    ],
    "nemo.collections.audio.parts.utils.callbacks.SpeechEnhancementLoggingCallback": [
        "nemo.collections.audio.models.audio_to_audio"
    ],
    "nemo.collections.asr.data.audio_to_text_dataset.inject_dataloader_value_from_model_config": [
        "nemo.collections.audio.models.audio_to_audio"
    ],
    "nemo.core.neural_types.FloatType": [
        "nemo.collections.audio.parts.submodules.diffusion",
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.audio.parts.submodules.transformerunet",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.audio.modules.masking",
        "nemo.collections.asr.parts.submodules.token_classifier",
        "nemo.collections.nlp.modules.common.gpt_module"
    ],
    "nemo.collections.common.parts.utils.mask_sequence_tensor": [
        "nemo.collections.audio.parts.submodules.diffusion",
        "nemo.collections.audio.parts.submodules.flow",
        "nemo.collections.audio.parts.submodules.schroedinger_bridge",
        "nemo.collections.audio.parts.submodules.ncsnpp",
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.tts.losses.spectrogram_enhancer_losses",
        "nemo.collections.tts.models.spectrogram_enhancer",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.spectrogram_enhancer",
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.collections.asr.parts.submodules.multi_head_attention.MultiHeadAttention": [
        "nemo.collections.audio.parts.submodules.multichannel",
        "nemo.collections.asr.parts.submodules.squeezeformer_modules",
        "nemo.collections.asr.parts.submodules.conformer_modules",
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.core.neural_types.BoolType": [
        "nemo.collections.audio.parts.submodules.transformerunet"
    ],
    "nemo.collections.audio.losses.audio.calculate_mean": [
        "nemo.collections.audio.modules.features"
    ],
    "nemo.collections.audio.parts.utils.audio.wrap_to_pi": [
        "nemo.collections.audio.modules.features"
    ],
    "nemo.collections.audio.parts.submodules.multichannel.ChannelAttentionPool": [
        "nemo.collections.audio.modules.masking"
    ],
    "nemo.collections.audio.parts.submodules.multichannel.TransformAverageConcatenate": [
        "nemo.collections.audio.modules.masking"
    ],
    "nemo.collections.audio.parts.submodules.multichannel.WPEFilter": [
        "nemo.collections.audio.modules.masking"
    ],
    "nemo.collections.audio.modules.features.SpectrogramToMultichannelFeatures": [
        "nemo.collections.audio.modules.masking"
    ],
    "nemo.collections.audio.parts.submodules.multichannel.TransformAttendConcatenate": [
        "nemo.collections.audio.modules.masking"
    ],
    "nemo.collections.audio.parts.submodules.multichannel.ParametricMultichannelWienerFilter": [
        "nemo.collections.audio.modules.masking"
    ],
    "nemo.collections.audio.parts.utils.audio.db2mag": [
        "nemo.collections.audio.modules.masking",
        "nemo.collections.audio.data.data_simulation"
    ],
    "nemo.collections.audio.parts.submodules.multichannel.ChannelAveragePool": [
        "nemo.collections.audio.modules.masking"
    ],
    "nemo.collections.audio.data.audio_to_audio": [
        "nemo.collections.audio.data.audio_to_audio_dataset"
    ],
    "nemo.collections.audio.parts.utils.audio.pow2db": [
        "nemo.collections.audio.data.data_simulation"
    ],
    "nemo.collections.audio.parts.utils.audio.generate_approximate_noise_field": [
        "nemo.collections.audio.data.data_simulation"
    ],
    "nemo.collections.audio.parts.utils.audio.mag2db": [
        "nemo.collections.audio.data.data_simulation"
    ],
    "nemo.collections.asr.parts.preprocessing.segment.AudioSegment": [
        "nemo.collections.audio.data.data_simulation",
        "nemo.collections.audio.data.audio_to_audio",
        "nemo.collections.asr.parts.mixins.transcription",
        "nemo.collections.asr.parts.utils.data_simulation_utils",
        "nemo.collections.asr.parts.preprocessing.features",
        "nemo.collections.asr.parts.preprocessing.perturb",
        "nemo.collections.asr.data.ssl_dataset",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.parts.utils.tts_dataset_utils",
        "nemo.collections.tts.data.dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset"
    ],
    "nemo.collections.asr.parts.utils.manifest_utils.read_manifest": [
        "nemo.collections.audio.data.data_simulation",
        "nemo.collections.asr.parts.context_biasing.context_biasing_utils",
        "nemo.collections.asr.parts.utils.data_simulation_utils",
        "nemo.collections.asr.data.data_simulation",
        "nemo.collections.asr.data.ssl_dataset",
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.text_to_speech_dataset"
    ],
    "nemo.collections.audio.parts.utils.audio.rms": [
        "nemo.collections.audio.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.manifest_utils.write_manifest": [
        "nemo.collections.audio.data.data_simulation",
        "nemo.collections.asr.parts.utils.data_simulation_utils"
    ],
    "nemo.core.neural_types.EncodedRepresentation": [
        "nemo.collections.audio.data.audio_to_audio",
        "nemo.collections.asr.parts.submodules.ssl_quantizers",
        "nemo.collections.asr.modules.msdd_diarizer",
        "nemo.collections.asr.modules.transformer.decoder_module",
        "nemo.collections.asr.data.audio_to_diar_label",
        "nemo.collections.nlp.modules.common.decoder_module",
        "nemo.collections.nlp.modules.common.megatron.megatron_export"
    ],
    "nemo.collections.common.parts.utils.flatten": [
        "nemo.collections.audio.data.audio_to_audio"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_decoding.AbstractRNNTDecoding": [
        "nemo.collections.asr.metrics.bleu",
        "nemo.collections.asr.metrics.wer"
    ],
    "nemo.collections.asr.parts.submodules.ctc_decoding.AbstractCTCDecoding": [
        "nemo.collections.asr.metrics.bleu",
        "nemo.collections.asr.metrics.wer",
        "nemo.collections.asr.parts.utils.timestamp_utils"
    ],
    "nemo.collections.asr.parts.submodules.multitask_decoding.AbstractMultiTaskDecoding": [
        "nemo.collections.asr.metrics.bleu",
        "nemo.collections.asr.metrics.wer"
    ],
    "nemo.collections.asr.metrics.wer.word_error_rate": [
        "nemo.collections.asr.metrics.der",
        "nemo.collections.asr.parts.utils.transcribe_utils",
        "nemo.collections.asr.parts.utils.diarization_utils",
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.tts.models.magpietts",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.asr.parts.utils.optimization_utils.linear_sum_assignment": [
        "nemo.collections.asr.metrics.der",
        "nemo.collections.asr.parts.utils.online_clustering"
    ],
    "nemo.core.neural_types.ProbsType": [
        "nemo.collections.asr.losses.bce_loss",
        "nemo.collections.asr.data.audio_to_diar_label"
    ],
    "nemo.collections.asr.parts.k2.ml_loss.RnntLoss": [
        "nemo.collections.asr.losses.lattice_losses"
    ],
    "nemo.collections.asr.parts.k2.grad_utils.PartialGrad": [
        "nemo.collections.asr.losses.lattice_losses"
    ],
    "nemo.collections.asr.parts.k2.ml_loss.CtcLoss": [
        "nemo.collections.asr.losses.lattice_losses"
    ],
    "nemo.collections.asr.parts.k2.map_loss.CtcMmiLoss": [
        "nemo.collections.asr.losses.lattice_losses"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.RNNTLossNumba": [
        "nemo.collections.asr.losses.rnnt"
    ],
    "nemo.collections.asr.parts.k2.w_transducer.GraphWTransducerLoss": [
        "nemo.collections.asr.losses.rnnt"
    ],
    "nemo.collections.asr.losses.rnnt_pytorch.MultiblankRNNTLossPytorch": [
        "nemo.collections.asr.losses.rnnt"
    ],
    "nemo.core.utils.numba_utils": [
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.modules.audio_preprocessing"
    ],
    "nemo.core.utils.numba_utils.NUMBA_INSTALLATION_MESSAGE": [
        "nemo.collections.asr.losses.rnnt"
    ],
    "nemo.collections.asr.losses.rnnt_pytorch.TDTLossPytorch": [
        "nemo.collections.asr.losses.rnnt"
    ],
    "nemo.collections.asr.parts.k2.graph_transducer.GraphRnntLoss": [
        "nemo.collections.asr.losses.rnnt",
        "nemo.collections.asr.parts.k2.w_transducer"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.TDTLossNumba": [
        "nemo.collections.asr.losses.rnnt"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.MultiblankRNNTLossNumba": [
        "nemo.collections.asr.losses.rnnt"
    ],
    "nemo.collections.asr.losses.rnnt_pytorch.RNNTLossPytorch": [
        "nemo.collections.asr.losses.rnnt"
    ],
    "nemo.core.Loss": [
        "nemo.collections.asr.losses.ssl_losses.contrastive",
        "nemo.collections.asr.losses.ssl_losses.ctc",
        "nemo.collections.asr.losses.ssl_losses.mlm",
        "nemo.collections.asr.losses.ssl_losses.rnnt"
    ],
    "nemo.core.typecheck": [
        "nemo.collections.asr.losses.ssl_losses.contrastive",
        "nemo.collections.asr.losses.ssl_losses.ctc",
        "nemo.collections.asr.losses.ssl_losses.mlm",
        "nemo.collections.asr.losses.ssl_losses.rnnt",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.tts.models.spectrogram_enhancer"
    ],
    "nemo.collections.asr.losses.CTCLoss": [
        "nemo.collections.asr.losses.ssl_losses.ctc"
    ],
    "nemo.collections.asr.parts.k2.utils.apply_rnnt_prune_ranges": [
        "nemo.collections.asr.models.k2_aligner_model"
    ],
    "nemo.collections.asr.models.rnnt_models.EncDecRNNTModel": [
        "nemo.collections.asr.models.k2_aligner_model",
        "nemo.collections.asr.models.k2_sequence_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.rnnt_bpe_models"
    ],
    "nemo.collections.asr.models.ctc_models.EncDecCTCModel": [
        "nemo.collections.asr.models.k2_aligner_model",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.k2_sequence_models"
    ],
    "nemo.collections.asr.modules.graph_decoder.ViterbiDecoderWithGraph": [
        "nemo.collections.asr.models.k2_aligner_model",
        "nemo.collections.asr.parts.k2.classes"
    ],
    "nemo.collections.asr.data.audio_to_text_dali.DALIOutputs": [
        "nemo.collections.asr.models.k2_aligner_model",
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models",
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.asr.parts.k2.utils.get_uniform_rnnt_prune_ranges": [
        "nemo.collections.asr.models.k2_aligner_model",
        "nemo.collections.asr.parts.k2.loss_mixins"
    ],
    "nemo.collections.asr.parts.k2.classes.GraphModuleConfig": [
        "nemo.collections.asr.models.k2_aligner_model",
        "nemo.collections.asr.models.configs.k2_sequence_models_config",
        "nemo.collections.asr.models.configs.aligner_config"
    ],
    "nemo.collections.asr.data.audio_to_ctm_dataset.FrameCtmUnit": [
        "nemo.collections.asr.models.k2_aligner_model"
    ],
    "nemo.core.neural_types.elements.ProbsType": [
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.modules.msdd_diarizer",
        "nemo.collections.tts.losses.aligner_loss",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.modules.fastpitch"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.generate_diarization_output_lines": [
        "nemo.collections.asr.models.sortformer_diar_models"
    ],
    "nemo.collections.asr.data.audio_to_diar_label.AudioToSpeechE2ESpkDiarDataset": [
        "nemo.collections.asr.models.sortformer_diar_models"
    ],
    "nemo.collections.asr.metrics.multi_binary_acc.MultiBinaryAccuracy": [
        "nemo.collections.asr.models.sortformer_diar_models",
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.parts.mixins.diarization.SpkDiarizationMixin": [
        "nemo.collections.asr.models.sortformer_diar_models"
    ],
    "nemo.collections.asr.parts.utils.asr_multispeaker_utils.get_pil_targets": [
        "nemo.collections.asr.models.sortformer_diar_models"
    ],
    "nemo.collections.asr.parts.mixins.diarization.DiarizeConfig": [
        "nemo.collections.asr.models.sortformer_diar_models"
    ],
    "nemo.collections.asr.parts.utils.asr_multispeaker_utils.get_ats_targets": [
        "nemo.collections.asr.models.sortformer_diar_models"
    ],
    "nemo.collections.asr.parts.utils.vad_utils.ts_vad_post_processing": [
        "nemo.collections.asr.models.sortformer_diar_models"
    ],
    "nemo.collections.asr.data.audio_to_diar_label_lhotse.LhotseAudioToSpeechE2ESpkDiarDataset": [
        "nemo.collections.asr.models.sortformer_diar_models"
    ],
    "nemo.collections.asr.parts.utils.asr_confidence_utils.ConfidenceConfig": [
        "nemo.collections.asr.models.confidence_ensemble",
        "nemo.collections.asr.parts.submodules.multitask_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_decoding",
        "nemo.collections.asr.parts.submodules.ctc_decoding"
    ],
    "nemo.collections.asr.parts.utils.asr_confidence_utils.get_confidence_measure_bank": [
        "nemo.collections.asr.models.confidence_ensemble"
    ],
    "nemo.utils.decorators.deprecated": [
        "nemo.collections.asr.models.confidence_ensemble",
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.tts.parts.utils.helpers"
    ],
    "nemo.collections.asr.models.hybrid_rnnt_ctc_models.EncDecHybridRNNTCTCModel": [
        "nemo.collections.asr.models.confidence_ensemble",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models"
    ],
    "nemo.collections.asr.parts.utils.asr_confidence_utils.get_confidence_aggregation_bank": [
        "nemo.collections.asr.models.confidence_ensemble"
    ],
    "nemo.collections.asr.parts.utils.asr_confidence_utils.ConfidenceMethodConfig": [
        "nemo.collections.asr.models.confidence_ensemble",
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding"
    ],
    "nemo.collections.common.metrics.TopKClassificationAccuracy": [
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.label_models"
    ],
    "nemo.collections.asr.models.label_models.EncDecSpeakerLabelModel": [
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.common.losses.CrossEntropyLoss": [
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.tts.g2p.models.heteronym_classification",
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.models.text_classification.text_classification_model",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.token_classification.token_classification_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model"
    ],
    "nemo.utils.cast_utils.cast_all": [
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.asr_model"
    ],
    "nemo.collections.asr.parts.mixins.TranscriptionMixin": [
        "nemo.collections.asr.models.classification_models"
    ],
    "nemo.collections.common.losses.MSELoss": [
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model"
    ],
    "nemo.collections.asr.parts.mixins.TranscriptionReturnType": [
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models"
    ],
    "nemo.collections.asr.data.feature_to_label_dataset": [
        "nemo.collections.asr.models.classification_models"
    ],
    "nemo.collections.asr.parts.mixins.transcription.InternalTranscribeConfig": [
        "nemo.collections.asr.models.classification_models",
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.asr.data.audio_to_label_dataset": [
        "nemo.collections.asr.models.classification_models"
    ],
    "nemo.collections.common.parts.preprocessing.parsers.make_parser": [
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models"
    ],
    "nemo.collections.asr.data.ssl_dataset": [
        "nemo.collections.asr.models.ssl_models"
    ],
    "nemo.collections.asr.modules.ssl_modules.masking.ConvFeatureMaksingWrapper": [
        "nemo.collections.asr.models.ssl_models"
    ],
    "nemo.core.classes.mixins.set_access_cfg": [
        "nemo.collections.asr.models.ssl_models"
    ],
    "nemo.collections.asr.data.audio_to_text_lhotse.LhotseSpeechToTextBpeDataset": [
        "nemo.collections.asr.models.ssl_models",
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models"
    ],
    "nemo.collections.asr.data.audio_to_text_dali.AudioToBPEDALIDataset": [
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models"
    ],
    "nemo.collections.asr.data.audio_to_text._AudioTextDataset": [
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models"
    ],
    "nemo.collections.asr.parts.utils.asr_batching.get_semi_sorted_batch_sampler": [
        "nemo.collections.asr.models.ctc_bpe_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_bpe_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models"
    ],
    "nemo.collections.asr.parts.k2.classes.ASRK2Mixin": [
        "nemo.collections.asr.models.k2_sequence_models"
    ],
    "nemo.collections.asr.models.rnnt_bpe_models.EncDecRNNTBPEModel": [
        "nemo.collections.asr.models.k2_sequence_models",
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.asr.models.ctc_bpe_models.EncDecCTCModelBPE": [
        "nemo.collections.asr.models.k2_sequence_models",
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.asr.parts.utils.vad_utils.prepare_manifest": [
        "nemo.collections.asr.models.clustering_diarizer"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.perform_clustering": [
        "nemo.collections.asr.models.clustering_diarizer"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.segments_manifest_to_subsegments_manifest": [
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.parts.utils.manifest_utils"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.audio_rttm_map": [
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.models.online_diarizer",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.parts.mixins.diarization",
        "nemo.collections.asr.parts.utils.diarization_utils",
        "nemo.collections.asr.parts.utils.manifest_utils",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils"
    ],
    "nemo.collections.asr.parts.utils.vad_utils.get_vad_stream_status": [
        "nemo.collections.asr.models.clustering_diarizer"
    ],
    "nemo.core.classes.Model": [
        "nemo.collections.asr.models.clustering_diarizer"
    ],
    "nemo.collections.asr.metrics.der.score_labels": [
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.get_embs_and_timestamps": [
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.models.online_diarizer",
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.write_rttm2manifest": [
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.parts.utils.diarization_utils",
        "nemo.collections.asr.parts.utils.manifest_utils"
    ],
    "nemo.collections.asr.models.classification_models.EncDecClassificationModel": [
        "nemo.collections.asr.models.clustering_diarizer"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.parse_scale_configs": [
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.validate_vad_manifest": [
        "nemo.collections.asr.models.clustering_diarizer"
    ],
    "nemo.collections.asr.parts.utils.vad_utils.generate_overlap_vad_seq": [
        "nemo.collections.asr.models.clustering_diarizer"
    ],
    "nemo.collections.asr.parts.mixins.mixins.DiarizationMixin": [
        "nemo.collections.asr.models.clustering_diarizer"
    ],
    "nemo.collections.asr.parts.utils.vad_utils.generate_vad_segment_table": [
        "nemo.collections.asr.models.clustering_diarizer"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.get_uniqname_from_filepath": [
        "nemo.collections.asr.models.clustering_diarizer",
        "nemo.collections.asr.parts.mixins.diarization",
        "nemo.collections.asr.parts.utils.diarization_utils",
        "nemo.collections.asr.parts.utils.manifest_utils",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils"
    ],
    "nemo.collections.asr.data.audio_to_label.cache_datastore_manifests": [
        "nemo.collections.asr.models.label_models"
    ],
    "nemo.collections.asr.data.audio_to_label.AudioToSpeechLabelDataset": [
        "nemo.collections.asr.models.label_models"
    ],
    "nemo.collections.asr.parts.mixins.mixins.VerificationMixin": [
        "nemo.collections.asr.models.label_models"
    ],
    "nemo.collections.common.parts.preprocessing.collections.ASRSpeechLabel": [
        "nemo.collections.asr.models.label_models"
    ],
    "nemo.collections.asr.data.audio_to_label.AudioPairToLabelDataset": [
        "nemo.collections.asr.models.label_models"
    ],
    "nemo.collections.asr.data.audio_to_label_dataset.get_concat_tarred_speech_label_dataset": [
        "nemo.collections.asr.models.label_models"
    ],
    "nemo.collections.asr.data.audio_to_label_dataset.get_tarred_speech_label_dataset": [
        "nemo.collections.asr.models.label_models"
    ],
    "nemo.collections.asr.modules.transformer.BeamSearchSequenceGenerator": [
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.parts.utils.slu_utils",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding"
    ],
    "nemo.collections.common.losses.SmoothedCrossEntropyLoss": [
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.information_retrieval.bert_dpr_model",
        "nemo.collections.nlp.models.information_retrieval.bert_joint_ir_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model"
    ],
    "nemo.collections.common.parts.transformer_weights_init": [
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.parts.submodules.classifier",
        "nemo.collections.asr.modules.wav2vec_modules",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model",
        "nemo.collections.nlp.modules.common.classifier"
    ],
    "nemo.collections.asr.parts.mixins.TranscribeConfig": [
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models"
    ],
    "nemo.collections.asr.modules.transformer.TransformerEncoder": [
        "nemo.collections.asr.models.transformer_bpe_models"
    ],
    "nemo.collections.common.metrics.GlobalAverageLossMetric": [
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model"
    ],
    "nemo.collections.asr.parts.submodules.token_classifier.TokenClassifier": [
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.modules.transformer.transformer_generators"
    ],
    "nemo.collections.asr.modules.transformer.get_nemo_transformer": [
        "nemo.collections.asr.models.transformer_bpe_models"
    ],
    "nemo.collections.asr.parts.mixins.ASRTranscriptionMixin": [
        "nemo.collections.asr.models.transformer_bpe_models",
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models",
        "nemo.collections.asr.models.slu_models"
    ],
    "nemo.collections.asr.parts.mixins.transcription.TranscriptionReturnType": [
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models"
    ],
    "nemo.collections.asr.parts.utils.timestamp_utils.process_timestamp_outputs": [
        "nemo.collections.asr.models.hybrid_rnnt_ctc_models",
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models"
    ],
    "nemo.collections.asr.parts.mixins.transcription.TranscribeConfig": [
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.asr.metrics.WER": [
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.asr.parts.submodules.multitask_decoding.MultiTaskDecoding": [
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.common.data.lhotse.dataloader.get_lhotse_dataloader_from_config": [
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.asr.data.audio_to_text_lhotse_prompted.PromptedAudioToTextLhotseDataset": [
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.asr.parts.submodules.multitask_decoding.MultiTaskDecodingConfig": [
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.asr.metrics.BLEU": [
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.asr.parts.mixins.transcription.GenericTranscriptionType": [
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.models.ctc_models"
    ],
    "nemo.collections.asr.data.audio_to_text_lhotse_prompted.PromptedAudioToTextMiniBatch": [
        "nemo.collections.asr.models.aed_multitask_models",
        "nemo.collections.asr.parts.utils.streaming_utils"
    ],
    "nemo.collections.asr.parts.utils.timestamp_utils.process_aed_timestamp_outputs": [
        "nemo.collections.asr.models.aed_multitask_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.OnlineSegmentor": [
        "nemo.collections.asr.models.online_diarizer"
    ],
    "nemo.collections.asr.parts.utils.offline_clustering.split_input_data": [
        "nemo.collections.asr.models.online_diarizer",
        "nemo.collections.asr.parts.utils.longform_clustering",
        "nemo.collections.asr.parts.utils.online_clustering",
        "nemo.collections.asr.parts.utils.speaker_utils"
    ],
    "nemo.collections.asr.parts.utils.offline_clustering.get_scale_interpolated_embs": [
        "nemo.collections.asr.models.online_diarizer",
        "nemo.collections.asr.parts.utils.longform_clustering",
        "nemo.collections.asr.parts.utils.online_clustering"
    ],
    "nemo.collections.asr.parts.utils.online_clustering.OnlineSpeakerClustering": [
        "nemo.collections.asr.models.online_diarizer"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.generate_cluster_labels": [
        "nemo.collections.asr.models.online_diarizer"
    ],
    "nemo.collections.asr.models.ClusteringDiarizer": [
        "nemo.collections.asr.models.online_diarizer",
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.parts.utils.diarization_utils"
    ],
    "nemo.collections.asr.data.audio_to_text_dali.AudioToCharDALIDataset": [
        "nemo.collections.asr.models.ctc_models",
        "nemo.collections.asr.models.rnnt_models"
    ],
    "nemo.collections.asr.parts.utils.slu_utils.get_seq_mask": [
        "nemo.collections.asr.models.slu_models"
    ],
    "nemo.collections.asr.parts.utils.slu_utils.SequenceGenerator": [
        "nemo.collections.asr.models.slu_models"
    ],
    "nemo.collections.common.losses.SmoothedNLLLoss": [
        "nemo.collections.asr.models.slu_models"
    ],
    "nemo.collections.asr.parts.utils.slu_utils.SequenceGeneratorConfig": [
        "nemo.collections.asr.models.slu_models"
    ],
    "nemo.collections.common.parts.optional_cuda_graphs.WithOptionalCudaGraphs": [
        "nemo.collections.asr.models.asr_model",
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer"
    ],
    "nemo.collections.tts.models.FastPitchModel": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.asr.data.text_to_text.TextToTextDataset": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.asr.parts.preprocessing.features.clean_spectrogram_batch": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.utils.enum.PrettyStrEnum": [
        "nemo.collections.asr.models.hybrid_asr_tts_models",
        "nemo.collections.asr.parts.k2.w_transducer",
        "nemo.collections.asr.parts.utils.rnnt_batched_beam_utils",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer"
    ],
    "nemo.collections.asr.parts.submodules.batchnorm.replace_bn_with_fused_bn_all": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.common.data.ConcatMapDataset": [
        "nemo.collections.asr.models.hybrid_asr_tts_models",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model"
    ],
    "nemo.collections.asr.data.audio_to_text_dataset.get_audio_to_text_bpe_dataset_from_config": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.tts.models.SpectrogramEnhancerModel": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.asr.parts.preprocessing.features.normalize_batch": [
        "nemo.collections.asr.models.hybrid_asr_tts_models",
        "nemo.collections.asr.parts.utils.streaming_utils",
        "nemo.collections.asr.data.feature_to_text"
    ],
    "nemo.collections.asr.data.text_to_text.TextOrAudioToTextBatch": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.asr.data.text_to_text.TextToTextIterableDataset": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.common.data.ConcatDataset": [
        "nemo.collections.asr.models.hybrid_asr_tts_models",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.asr.data.text_to_text.TextToTextBatch": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.asr.models.hybrid_rnnt_ctc_bpe_models.EncDecHybridRNNTCTCBPEModel": [
        "nemo.collections.asr.models.hybrid_asr_tts_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.make_rttm_with_overlap": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.get_scale_mapping_argmat": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.models.clustering_diarizer.get_available_model_names": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.models.clustering_diarizer._SPEAKER_MODEL": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.get_uniq_id_list_from_manifest": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.models.clustering_diarizer._MODEL_CONFIG_YAML": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.models.clustering_diarizer._VAD_MODEL": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.models.configs.diarizer_config.NeuralDiarizerInferenceConfig": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.data.audio_to_diar_label.AudioToSpeechMSDDTrainDataset": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.data.audio_to_diar_label.AudioToSpeechMSDDInferDataset": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.labels_to_pyannote_object": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.get_id_tup_dict": [
        "nemo.collections.asr.models.msdd_models"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.rttm_to_labels": [
        "nemo.collections.asr.models.msdd_models",
        "nemo.collections.asr.parts.utils.diarization_utils",
        "nemo.collections.asr.parts.utils.manifest_utils"
    ],
    "nemo.collections.asr.modules.audio_preprocessing.CropOrPadSpectrogramAugmentationConfig": [
        "nemo.collections.asr.models.configs.classification_models_config",
        "nemo.collections.asr.models.configs.matchboxnet_config"
    ],
    "nemo.collections.asr.modules.conv_asr.ConvASRDecoderClassificationConfig": [
        "nemo.collections.asr.models.configs.classification_models_config",
        "nemo.collections.asr.models.configs.matchboxnet_config"
    ],
    "nemo.collections.asr.modules.conv_asr.ConvASREncoderConfig": [
        "nemo.collections.asr.models.configs.classification_models_config",
        "nemo.collections.asr.models.configs.asr_models_config",
        "nemo.collections.asr.models.configs.quartznet_config",
        "nemo.collections.asr.models.configs.matchboxnet_config"
    ],
    "nemo.collections.asr.modules.audio_preprocessing.SpectrogramAugmentationConfig": [
        "nemo.collections.asr.models.configs.classification_models_config",
        "nemo.collections.asr.models.configs.asr_models_config",
        "nemo.collections.asr.models.configs.quartznet_config",
        "nemo.collections.asr.models.configs.matchboxnet_config"
    ],
    "nemo.collections.asr.modules.audio_preprocessing.AudioToMFCCPreprocessorConfig": [
        "nemo.collections.asr.models.configs.classification_models_config",
        "nemo.collections.asr.models.configs.matchboxnet_config"
    ],
    "nemo.collections.asr.models.configs.asr_models_config.EncDecCTCConfig": [
        "nemo.collections.asr.models.configs.k2_sequence_models_config"
    ],
    "nemo.collections.asr.modules.conv_asr.ConvASRDecoderConfig": [
        "nemo.collections.asr.models.configs.asr_models_config",
        "nemo.collections.asr.models.configs.quartznet_config"
    ],
    "nemo.collections.asr.modules.audio_preprocessing.AudioToMelSpectrogramPreprocessorConfig": [
        "nemo.collections.asr.models.configs.asr_models_config",
        "nemo.collections.asr.models.configs.quartznet_config"
    ],
    "nemo.collections.asr.modules.conv_asr.JasperEncoderConfig": [
        "nemo.collections.asr.models.configs.quartznet_config",
        "nemo.collections.asr.models.configs.matchboxnet_config"
    ],
    "nemo.collections.asr.models.configs.asr_models_config": [
        "nemo.collections.asr.models.configs.quartznet_config"
    ],
    "nemo.collections.asr.models.configs.classification_models_config": [
        "nemo.collections.asr.models.configs.matchboxnet_config"
    ],
    "nemo.core.classes.mixins.adapter_mixins.AdapterModelPTMixin": [
        "nemo.collections.asr.parts.mixins.asr_adapter_mixins",
        "nemo.collections.tts.parts.mixins.fastpitch_adapter_mixins"
    ],
    "nemo.collections.asr.data.audio_to_text._speech_collate_fn": [
        "nemo.collections.asr.parts.mixins.transcription",
        "nemo.collections.asr.data.text_to_text",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset"
    ],
    "nemo.collections.asr.parts.utils.manifest_utils": [
        "nemo.collections.asr.parts.mixins.transcription",
        "nemo.collections.asr.parts.utils.transcribe_utils"
    ],
    "nemo.collections.asr.parts.utils.streaming_utils.CacheAwareStreamingAudioBuffer": [
        "nemo.collections.asr.parts.mixins.mixins"
    ],
    "nemo.utils.app_state": [
        "nemo.collections.asr.parts.mixins.mixins"
    ],
    "nemo.collections.asr.parts.mixins.asr_adapter_mixins.ASRAdapterModelMixin": [
        "nemo.collections.asr.parts.mixins.mixins"
    ],
    "nemo.collections.asr.parts.mixins.streaming.StreamingEncoder": [
        "nemo.collections.asr.parts.mixins.mixins",
        "nemo.collections.asr.parts.utils.streaming_utils",
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.collections.asr.parts.utils.asr_module_utils": [
        "nemo.collections.asr.parts.mixins.mixins"
    ],
    "nemo.collections.asr.parts.utils.vad_utils.load_postprocessing_from_yaml": [
        "nemo.collections.asr.parts.mixins.diarization"
    ],
    "nemo.collections.asr.parts.utils.vad_utils.PostProcessingParams": [
        "nemo.collections.asr.parts.mixins.diarization"
    ],
    "nemo.collections.asr.parts.context_biasing.ctc_based_word_spotter.WSHyp": [
        "nemo.collections.asr.parts.context_biasing.context_biasing_utils"
    ],
    "nemo.collections.asr.parts.utils.rnnt_utils": [
        "nemo.collections.asr.parts.context_biasing.context_biasing_utils",
        "nemo.collections.asr.parts.utils.streaming_utils",
        "nemo.collections.asr.parts.utils.transcribe_utils",
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.cuda_graph_rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer",
        "nemo.collections.asr.modules.rnnt"
    ],
    "nemo.collections.asr.parts.context_biasing.context_graph_ctc.ContextState": [
        "nemo.collections.asr.parts.context_biasing.ctc_based_word_spotter"
    ],
    "nemo.collections.asr.parts.context_biasing.context_graph_ctc.ContextGraphCTC": [
        "nemo.collections.asr.parts.context_biasing.ctc_based_word_spotter"
    ],
    "nemo.collections.asr.parts.k2.utils.make_non_pad_mask": [
        "nemo.collections.asr.parts.k2.grad_utils",
        "nemo.collections.asr.parts.k2.loss_mixins"
    ],
    "nemo.collections.asr.parts.k2.graph_transducer.force_float32_context": [
        "nemo.collections.asr.parts.k2.w_transducer"
    ],
    "nemo.collections.asr.parts.k2.utils.get_tot_objf_and_finite_mask": [
        "nemo.collections.asr.parts.k2.map_loss",
        "nemo.collections.asr.parts.k2.ml_loss"
    ],
    "nemo.collections.asr.parts.k2.ml_loss.MLLoss": [
        "nemo.collections.asr.parts.k2.map_loss"
    ],
    "nemo.collections.asr.parts.k2.utils.create_sparse_wrapped": [
        "nemo.collections.asr.parts.k2.map_loss"
    ],
    "nemo.collections.asr.parts.k2.graph_compilers.MmiGraphCompiler": [
        "nemo.collections.asr.parts.k2.map_loss"
    ],
    "nemo.collections.asr.parts.k2.utils.invert_permutation": [
        "nemo.collections.asr.parts.k2.map_loss",
        "nemo.collections.asr.parts.k2.ml_loss",
        "nemo.collections.asr.parts.k2.graph_decoders"
    ],
    "nemo.collections.asr.parts.k2.loss_mixins.CtcK2Mixin": [
        "nemo.collections.asr.parts.k2.map_loss",
        "nemo.collections.asr.parts.k2.ml_loss",
        "nemo.collections.asr.parts.k2.graph_decoders"
    ],
    "nemo.collections.asr.parts.k2.classes.GraphIntersectDenseConfig": [
        "nemo.collections.asr.parts.k2.map_loss",
        "nemo.collections.asr.parts.k2.graph_decoders",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding"
    ],
    "nemo.collections.asr.parts.k2.utils.load_graph": [
        "nemo.collections.asr.parts.k2.map_loss",
        "nemo.collections.asr.parts.k2.graph_decoders",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding"
    ],
    "nemo.core.classes.loss.Loss": [
        "nemo.collections.asr.parts.k2.graph_transducer"
    ],
    "nemo.collections.asr.parts.k2.rnnt_logprobs_triton.rnnt_logprobs_triton": [
        "nemo.collections.asr.parts.k2.graph_transducer"
    ],
    "nemo.collections.asr.parts.k2.utils.get_arc_weights": [
        "nemo.collections.asr.parts.k2.loss_mixins"
    ],
    "nemo.collections.asr.parts.k2.utils.prep_padded_densefsavec": [
        "nemo.collections.asr.parts.k2.loss_mixins"
    ],
    "nemo.collections.asr.parts.k2.utils.create_supervision": [
        "nemo.collections.asr.parts.k2.loss_mixins",
        "nemo.collections.asr.parts.k2.graph_decoders"
    ],
    "nemo.collections.asr.parts.k2.utils.make_non_pad_mask_3d": [
        "nemo.collections.asr.parts.k2.loss_mixins"
    ],
    "nemo.collections.asr.parts.k2.grad_utils.GradExpNormalize": [
        "nemo.collections.asr.parts.k2.loss_mixins"
    ],
    "nemo.collections.asr.parts.k2.graph_compilers.RnntTopologyCompiler": [
        "nemo.collections.asr.parts.k2.ml_loss",
        "nemo.collections.asr.parts.k2.graph_decoders"
    ],
    "nemo.collections.asr.parts.k2.graph_compilers.CtcTopologyCompiler": [
        "nemo.collections.asr.parts.k2.ml_loss",
        "nemo.collections.asr.parts.k2.graph_decoders"
    ],
    "nemo.collections.asr.parts.k2.loss_mixins.RnntK2Mixin": [
        "nemo.collections.asr.parts.k2.ml_loss",
        "nemo.collections.asr.parts.k2.graph_decoders"
    ],
    "nemo.collections.asr.parts.submodules.wfst_decoder.collapse_tokenword_hypotheses": [
        "nemo.collections.asr.parts.k2.graph_decoders"
    ],
    "nemo.collections.asr.parts.submodules.wfst_decoder.AbstractWFSTDecoder": [
        "nemo.collections.asr.parts.k2.graph_decoders"
    ],
    "nemo.collections.asr.parts.submodules.wfst_decoder.WfstNbestHypothesis": [
        "nemo.collections.asr.parts.k2.graph_decoders",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding"
    ],
    "nemo.collections.asr.parts.k2.utils.levenshtein_graph_k2": [
        "nemo.collections.asr.parts.k2.graph_decoders"
    ],
    "nemo.collections.asr.losses.lattice_losses.LatticeLoss": [
        "nemo.collections.asr.parts.k2.classes"
    ],
    "nemo.collections.asr.parts.k2.topologies.RnntEmissionAdapterBuilder": [
        "nemo.collections.asr.parts.k2.graph_compilers"
    ],
    "nemo.collections.asr.parts.k2.utils.intersect_with_self_loops": [
        "nemo.collections.asr.parts.k2.graph_compilers"
    ],
    "nemo.collections.asr.parts.k2.utils.compose_with_self_loops": [
        "nemo.collections.asr.parts.k2.graph_compilers"
    ],
    "nemo.collections.asr.parts.k2.utils.add_self_loops": [
        "nemo.collections.asr.parts.k2.graph_compilers"
    ],
    "nemo.collections.asr.parts.k2.topologies.build_topo": [
        "nemo.collections.asr.parts.k2.graph_compilers"
    ],
    "nemo.collections.asr.parts.utils.offline_clustering.SpeakerClustering": [
        "nemo.collections.asr.parts.utils.longform_clustering",
        "nemo.collections.asr.parts.utils.online_clustering"
    ],
    "nemo.collections.asr.parts.utils.online_clustering.get_merge_quantity": [
        "nemo.collections.asr.parts.utils.longform_clustering"
    ],
    "nemo.collections.asr.parts.utils.online_clustering.run_reducer": [
        "nemo.collections.asr.parts.utils.longform_clustering"
    ],
    "nemo.collections.asr.parts.utils.offline_clustering.getCosAffinityMatrix": [
        "nemo.collections.asr.parts.utils.longform_clustering",
        "nemo.collections.asr.parts.utils.online_clustering"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.save_pr_curve": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.save_custom_confidence_curve": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.save_roc_curve": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.auc_nt": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.models.EncDecRNNTModel": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.auc_yc": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.ece": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.nce": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.save_confidence_hist": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.auc_roc": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.auc_pr": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.utils.confidence_metrics.save_nt_curve": [
        "nemo.collections.asr.parts.utils.asr_confidence_benchmarking_utils"
    ],
    "nemo.collections.asr.parts.preprocessing.segment.get_samples": [
        "nemo.collections.asr.parts.utils.streaming_utils",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils"
    ],
    "nemo.core.neural_types.MelSpectrogramType": [
        "nemo.collections.asr.parts.utils.streaming_utils",
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.tts.models.spectrogram_enhancer"
    ],
    "nemo.collections.asr.parts.utils.offline_clustering.NMESC": [
        "nemo.collections.asr.parts.utils.online_clustering"
    ],
    "nemo.collections.asr.parts.utils.offline_clustering.getAffinityGraphMat": [
        "nemo.collections.asr.parts.utils.online_clustering"
    ],
    "nemo.collections.asr.parts.utils.offline_clustering.SpectralClustering": [
        "nemo.collections.asr.parts.utils.online_clustering"
    ],
    "nemo.collections.asr.modules.transformer.GreedySequenceGenerator": [
        "nemo.collections.asr.parts.utils.slu_utils",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding"
    ],
    "nemo.collections.asr.modules.transformer.TopKSequenceGenerator": [
        "nemo.collections.asr.parts.utils.slu_utils"
    ],
    "nemo.collections.asr.parts.utils.streaming_utils.FrameBatchMultiTaskAED": [
        "nemo.collections.asr.parts.utils.transcribe_utils"
    ],
    "nemo.collections.asr.parts.utils.streaming_utils.FrameBatchASR": [
        "nemo.collections.asr.parts.utils.transcribe_utils",
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils"
    ],
    "nemo.collections.asr.models.EncDecMultiTaskModel": [
        "nemo.collections.asr.parts.utils.transcribe_utils"
    ],
    "nemo.collections.common.metrics.punct_er.OccurancePunctuationErrorRate": [
        "nemo.collections.asr.parts.utils.transcribe_utils"
    ],
    "nemo.collections.asr.metrics.der.concat_perm_word_error_rate": [
        "nemo.collections.asr.parts.utils.diarization_utils"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.labels_to_rttmfile": [
        "nemo.collections.asr.parts.utils.diarization_utils",
        "nemo.collections.asr.parts.utils.data_simulation_utils"
    ],
    "nemo.collections.asr.models.EncDecClassificationModel": [
        "nemo.collections.asr.parts.utils.vad_utils",
        "nemo.collections.tts.parts.preprocessing.audio_trimming"
    ],
    "nemo.collections.asr.models.EncDecFrameClassificationModel": [
        "nemo.collections.asr.parts.utils.vad_utils"
    ],
    "nemo.collections.asr.parts.submodules.jasper": [
        "nemo.collections.asr.parts.utils.asr_module_utils"
    ],
    "nemo.collections.asr.modules.conv_asr": [
        "nemo.collections.asr.parts.utils.asr_module_utils"
    ],
    "nemo.collections.asr.data.audio_to_text.AudioToBPEDataset": [
        "nemo.collections.asr.parts.utils.asr_batching"
    ],
    "nemo.collections.asr.data.audio_to_text.AudioToCharDataset": [
        "nemo.collections.asr.parts.utils.asr_batching"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.get_subsegments_scriptable": [
        "nemo.collections.asr.parts.utils.manifest_utils"
    ],
    "nemo.collections.asr.data.audio_to_label.repeat_signal": [
        "nemo.collections.asr.parts.utils.speaker_utils"
    ],
    "nemo.collections.asr.parts.utils.offline_clustering.get_argmin_mat": [
        "nemo.collections.asr.parts.utils.speaker_utils",
        "nemo.collections.asr.data.audio_to_diar_label"
    ],
    "nemo.collections.asr.parts.utils.longform_clustering.LongFormSpeakerClustering": [
        "nemo.collections.asr.parts.utils.speaker_utils"
    ],
    "nemo.collections.asr.metrics.wer.word_error_rate_detail": [
        "nemo.collections.asr.parts.utils.eval_utils"
    ],
    "nemo.collections.asr.parts.utils.rnnt_utils.NBestHypotheses": [
        "nemo.collections.asr.parts.utils.rnnt_batched_beam_utils",
        "nemo.collections.asr.parts.submodules.multitask_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding"
    ],
    "nemo.collections.asr.models.EncDecCTCModelBPE": [
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils"
    ],
    "nemo.collections.asr.models.EncDecCTCModel": [
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils",
        "nemo.collections.tts.g2p.models.ctc"
    ],
    "nemo.collections.asr.parts.utils.streaming_utils.AudioFeatureIterator": [
        "nemo.collections.asr.parts.utils.decoder_timestamps_utils"
    ],
    "nemo.collections.asr.parts.utils.manifest_utils.write_ctm": [
        "nemo.collections.asr.parts.utils.data_simulation_utils"
    ],
    "nemo.collections.asr.parts.utils.manifest_utils.get_ctm_line": [
        "nemo.collections.asr.parts.utils.data_simulation_utils"
    ],
    "nemo.collections.asr.parts.utils.manifest_utils.write_text": [
        "nemo.collections.asr.parts.utils.data_simulation_utils"
    ],
    "nemo.collections.asr.parts.preprocessing.perturb.AudioAugmentor": [
        "nemo.collections.asr.parts.utils.data_simulation_utils",
        "nemo.collections.asr.parts.preprocessing.features",
        "nemo.collections.asr.data.audio_to_text_dataset",
        "nemo.collections.asr.data.huggingface.hf_audio_to_text"
    ],
    "nemo.collections.asr.parts.submodules.multitask_greedy_decoding.AEDGreedyInferConfig": [
        "nemo.collections.asr.parts.submodules.multitask_decoding"
    ],
    "nemo.collections.asr.parts.submodules.multitask_beam_decoding.AEDBeamInfer": [
        "nemo.collections.asr.parts.submodules.multitask_decoding"
    ],
    "nemo.collections.asr.parts.submodules.multitask_greedy_decoding.TransformerAEDGreedyInfer": [
        "nemo.collections.asr.parts.submodules.multitask_decoding"
    ],
    "nemo.collections.asr.parts.submodules.multitask_beam_decoding.TransformerAEDBeamInfer": [
        "nemo.collections.asr.parts.submodules.multitask_decoding"
    ],
    "nemo.collections.asr.parts.submodules.multitask_beam_decoding.AEDBeamInferConfig": [
        "nemo.collections.asr.parts.submodules.multitask_decoding"
    ],
    "nemo.collections.asr.parts.utils.asr_confidence_utils.ConfidenceMixin": [
        "nemo.collections.asr.parts.submodules.multitask_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_decoding",
        "nemo.collections.asr.parts.submodules.ctc_decoding"
    ],
    "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer.GreedyBatchedTDTLoopLabelsComputer": [
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding"
    ],
    "nemo.collections.asr.parts.submodules.cuda_graph_rnnt_greedy_decoding.RNNTGreedyDecodeCudaGraph": [
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding"
    ],
    "nemo.collections.asr.parts.utils.asr_confidence_utils.ConfidenceMethodMixin": [
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_maes_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding",
        "nemo.collections.asr.modules.transformer.transformer_generators"
    ],
    "nemo.core.neural_types.HypothesisType": [
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_greedy_decoding",
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding"
    ],
    "nemo.collections.asr.modules.rnnt_abstract": [
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding",
        "nemo.collections.asr.modules.rnnt"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer.GreedyBatchedRNNTLoopLabelsComputer": [
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding"
    ],
    "nemo.collections.common.parts.rnn.label_collate": [
        "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding"
    ],
    "nemo.collections.asr.parts.submodules.multi_head_attention.RelPositionMultiHeadAttention": [
        "nemo.collections.asr.parts.submodules.squeezeformer_modules",
        "nemo.collections.asr.parts.submodules.conformer_modules",
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.collections.asr.parts.submodules.conformer_modules.ConformerFeedForward": [
        "nemo.collections.asr.parts.submodules.squeezeformer_modules"
    ],
    "nemo.collections.asr.parts.submodules.adapters.attention_adapter_mixin.AttentionAdapterModuleMixin": [
        "nemo.collections.asr.parts.submodules.squeezeformer_modules",
        "nemo.collections.asr.parts.submodules.conformer_modules",
        "nemo.collections.asr.modules.transformer.transformer_encoders",
        "nemo.collections.asr.modules.transformer.transformer_decoders",
        "nemo.collections.asr.modules.transformer.transformer"
    ],
    "nemo.collections.asr.parts.submodules.conformer_modules.ConformerConvolution": [
        "nemo.collections.asr.parts.submodules.squeezeformer_modules"
    ],
    "nemo.collections.asr.parts.submodules.causal_convs.CausalConv2D": [
        "nemo.collections.asr.parts.submodules.subsampling"
    ],
    "nemo.collections.asr.parts.submodules.causal_convs.CausalConv1D": [
        "nemo.collections.asr.parts.submodules.subsampling",
        "nemo.collections.asr.parts.submodules.conformer_modules",
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.collections.asr.parts.submodules.jasper.jasper_activations": [
        "nemo.collections.asr.parts.submodules.ssl_quantizers",
        "nemo.collections.asr.modules.conv_asr"
    ],
    "nemo.core.NeuralModule": [
        "nemo.collections.asr.parts.submodules.ssl_quantizers",
        "nemo.collections.asr.modules.rnnt_abstract",
        "nemo.collections.asr.modules.ssl_modules.quantizers"
    ],
    "nemo.collections.asr.parts.utils.rnnt_batched_beam_utils.PruningMode": [
        "nemo.collections.asr.parts.submodules.rnnt_maes_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding"
    ],
    "nemo.collections.asr.parts.utils.rnnt_batched_beam_utils.BatchedBeamHyps": [
        "nemo.collections.asr.parts.submodules.rnnt_maes_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer"
    ],
    "nemo.collections.asr.parts.utils.rnnt_batched_beam_utils.NON_EXISTENT_LABEL_VALUE": [
        "nemo.collections.asr.parts.submodules.rnnt_maes_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer"
    ],
    "nemo.collections.asr.parts.utils.rnnt_batched_beam_utils.INACTIVE_SCORE": [
        "nemo.collections.asr.parts.submodules.rnnt_maes_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer"
    ],
    "nemo.collections.asr.parts.utils.rnnt_batched_beam_utils.BlankLMScoreMode": [
        "nemo.collections.asr.parts.submodules.rnnt_maes_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding"
    ],
    "nemo.collections.asr.parts.submodules.ngram_lm.NGramGPULanguageModel": [
        "nemo.collections.asr.parts.submodules.rnnt_maes_batched_computer",
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer",
        "nemo.collections.asr.modules.transformer.transformer_generators"
    ],
    "nemo.core.utils.cuda_python_utils.check_cuda_python_cuda_graphs_conditional_nodes_supported": [
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.cuda_graph_rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer"
    ],
    "nemo.core.utils.cuda_python_utils.cu_call": [
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.cuda_graph_rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer"
    ],
    "nemo.core.utils.cuda_python_utils.with_conditional_node": [
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.cuda_graph_rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer"
    ],
    "nemo.core.utils.cuda_python_utils.run_nvrtc": [
        "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer",
        "nemo.collections.asr.parts.submodules.tdt_loop_labels_computer",
        "nemo.collections.asr.parts.submodules.cuda_graph_rnnt_greedy_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_loop_labels_computer"
    ],
    "nemo.collections.asr.parts.submodules.batchnorm.FusedBatchNorm1d": [
        "nemo.collections.asr.parts.submodules.conformer_modules"
    ],
    "nemo.collections.asr.parts.submodules.multi_head_attention.RelPositionMultiHeadAttentionLongformer": [
        "nemo.collections.asr.parts.submodules.conformer_modules",
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.collections.asr.parts.utils.activations.Swish": [
        "nemo.collections.asr.parts.submodules.conformer_modules"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_beam_decoding": [
        "nemo.collections.asr.parts.submodules.rnnt_decoding"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_greedy_decoding": [
        "nemo.collections.asr.parts.submodules.rnnt_decoding"
    ],
    "nemo.collections.asr.parts.submodules.tdt_beam_decoding": [
        "nemo.collections.asr.parts.submodules.rnnt_decoding"
    ],
    "nemo.collections.asr.parts.submodules.ngram_lm.DEFAULT_TOKEN_OFFSET": [
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding"
    ],
    "nemo.collections.asr.parts.submodules.wfst_decoder.RivaGpuWfstDecoder": [
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding"
    ],
    "nemo.collections.asr.parts.submodules.wfst_decoder.RivaDecoderConfig": [
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding"
    ],
    "nemo.collections.asr.parts.utils.wfst_utils.kaldifst_importer": [
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding",
        "nemo.collections.asr.parts.submodules.wfst_decoder"
    ],
    "nemo.collections.asr.parts.utils.wfst_utils.mkgraph_ctc_ov": [
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding"
    ],
    "nemo.collections.asr.parts.k2.graph_decoders.K2WfstDecoder": [
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding"
    ],
    "nemo.collections.asr.modules.flashlight_decoder.FlashLightKenLMBeamSearchDecoder": [
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding"
    ],
    "nemo.collections.asr.modules.beam_search_decoder.BeamSearchDecoderWithLM": [
        "nemo.collections.asr.parts.submodules.ctc_beam_decoding"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_malsd_batched_computer.ModifiedALSDBatchedRNNTComputer": [
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding"
    ],
    "nemo.collections.asr.modules.rnnt.StatelessTransducerDecoder": [
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_maes_batched_computer.ModifiedAESBatchedRNNTComputer": [
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding"
    ],
    "nemo.collections.asr.parts.utils.rnnt_utils.HATJointOutput": [
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.modules.hybrid_autoregressive_transducer"
    ],
    "nemo.collections.asr.modules.rnnt.RNNTDecoder": [
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding"
    ],
    "nemo.collections.asr.parts.utils.rnnt_utils.select_k_expansions": [
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding"
    ],
    "nemo.collections.asr.parts.utils.rnnt_utils.is_prefix": [
        "nemo.collections.asr.parts.submodules.rnnt_beam_decoding",
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding"
    ],
    "nemo.core.Typing": [
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding",
        "nemo.collections.asr.parts.submodules.multitask_greedy_decoding"
    ],
    "nemo.collections.asr.modules.transformer.BeamSearchSequenceGeneratorWithNGramLM": [
        "nemo.collections.asr.parts.submodules.multitask_beam_decoding"
    ],
    "nemo.collections.asr.parts.utils.wfst_utils.TW_BREAK": [
        "nemo.collections.asr.parts.submodules.wfst_decoder"
    ],
    "nemo.collections.asr.parts.utils.wfst_utils.load_word_lattice": [
        "nemo.collections.asr.parts.submodules.wfst_decoder"
    ],
    "nemo.collections.asr.parts.submodules.jasper.init_weights": [
        "nemo.collections.asr.parts.submodules.tdnn_attention",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.ssl_modules.multi_softmax_decoder"
    ],
    "nemo.collections.asr.parts.submodules.jasper.get_same_padding": [
        "nemo.collections.asr.parts.submodules.tdnn_attention"
    ],
    "nemo.utils.avoid_float16_autocast_context": [
        "nemo.collections.asr.parts.submodules.multi_head_attention"
    ],
    "nemo.collections.common.tokenizers.aggregate_tokenizer.DummyTokenizer": [
        "nemo.collections.asr.parts.submodules.ctc_decoding"
    ],
    "nemo.collections.asr.parts.submodules.ctc_beam_decoding": [
        "nemo.collections.asr.parts.submodules.ctc_decoding"
    ],
    "nemo.collections.asr.parts.submodules.ctc_greedy_decoding": [
        "nemo.collections.asr.parts.submodules.ctc_decoding"
    ],
    "nemo.collections.asr.parts.submodules.tdt_malsd_batched_computer.ModifiedALSDBatchedTDTComputer": [
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding"
    ],
    "nemo.collections.asr.parts.submodules.rnnt_beam_decoding.pack_hypotheses": [
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding"
    ],
    "nemo.collections.asr.parts.submodules.ctc_beam_decoding.DEFAULT_TOKEN_OFFSET": [
        "nemo.collections.asr.parts.submodules.tdt_beam_decoding"
    ],
    "nemo.collections.asr.parts.submodules.classifier.Classifier": [
        "nemo.collections.asr.parts.submodules.token_classifier"
    ],
    "nemo.collections.common.parts.MultiLayerPerceptron": [
        "nemo.collections.asr.parts.submodules.token_classifier",
        "nemo.collections.nlp.modules.common.sequence_classifier",
        "nemo.collections.nlp.modules.common.sequence_regression",
        "nemo.collections.nlp.modules.common.sequence_token_classifier",
        "nemo.collections.nlp.modules.common.token_classifier"
    ],
    "nemo.collections.common.parts.adapter_modules": [
        "nemo.collections.asr.parts.submodules.adapters.multi_head_attention_adapter_module",
        "nemo.collections.asr.parts.submodules.adapters.attention_adapter_mixin",
        "nemo.collections.asr.parts.submodules.adapters.transformer_multi_head_attention_adapter_module"
    ],
    "nemo.collections.asr.parts.submodules.multi_head_attention": [
        "nemo.collections.asr.parts.submodules.adapters.multi_head_attention_adapter_module",
        "nemo.collections.asr.parts.submodules.adapters.attention_adapter_mixin"
    ],
    "nemo.collections.asr.modules.transformer.transformer_modules": [
        "nemo.collections.asr.parts.submodules.adapters.attention_adapter_mixin",
        "nemo.collections.asr.parts.submodules.adapters.transformer_multi_head_attention_adapter_module"
    ],
    "nemo.collections.asr.parts.submodules.adapters.multi_head_attention_adapter_module.MHAResidualAddAdapterStrategy": [
        "nemo.collections.asr.parts.submodules.adapters.transformer_multi_head_attention_adapter_module"
    ],
    "nemo.collections.asr.parts.submodules.adapters.multi_head_attention_adapter_module.MHAResidualAddAdapterStrategyConfig": [
        "nemo.collections.asr.parts.submodules.adapters.transformer_multi_head_attention_adapter_module"
    ],
    "nemo.collections.asr.parts.submodules.ngram_lm.constants.DEFAULT_TOKEN_OFFSET": [
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched",
        "nemo.collections.asr.parts.submodules.ngram_lm.kenlm_utils"
    ],
    "nemo.core.ModelPT": [
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched",
        "nemo.collections.tts.models.spectrogram_enhancer",
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.core.utils.optional_libs.triton_required": [
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched"
    ],
    "nemo.collections.common.parts.NEG_INF": [
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched",
        "nemo.collections.asr.modules.transformer.transformer_generators",
        "nemo.collections.nlp.modules.common.transformer.transformer_generators"
    ],
    "nemo.core.utils.optional_libs.kenlm_required": [
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched"
    ],
    "nemo.core.utils.optional_libs.KENLM_AVAILABLE": [
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched"
    ],
    "nemo.core.PretrainedModelInfo": [
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched",
        "nemo.collections.tts.models.spectrogram_enhancer"
    ],
    "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_triton.ngram_advance_triton_kernel": [
        "nemo.collections.asr.parts.submodules.ngram_lm.ngram_lm_batched"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.utils.cpu_utils.cpu_rnnt": [
        "nemo.collections.asr.parts.numba.rnnt_loss.rnnt_pytorch",
        "nemo.collections.asr.parts.numba.rnnt_loss.rnnt"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.rnnt": [
        "nemo.collections.asr.parts.numba.rnnt_loss.rnnt_pytorch"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.gpu_rnnt": [
        "nemo.collections.asr.parts.numba.rnnt_loss.rnnt"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.utils.rnnt_helper": [
        "nemo.collections.asr.parts.numba.rnnt_loss.rnnt",
        "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.reduce",
        "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.gpu_rnnt",
        "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.gpu_rnnt_kernel"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.utils.global_constants": [
        "nemo.collections.asr.parts.numba.rnnt_loss.rnnt",
        "nemo.collections.asr.parts.numba.rnnt_loss.utils.rnnt_helper",
        "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.reduce",
        "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.gpu_rnnt",
        "nemo.collections.asr.parts.numba.rnnt_loss.utils.cpu_utils.cpu_rnnt"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.gpu_rnnt_kernel": [
        "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.gpu_rnnt"
    ],
    "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.reduce": [
        "nemo.collections.asr.parts.numba.rnnt_loss.utils.cuda_utils.gpu_rnnt"
    ],
    "nemo.collections.asr.parts.utils.numba_utils": [
        "nemo.collections.asr.parts.preprocessing.perturb"
    ],
    "nemo.collections.asr.data.audio_to_text.RandomizedChainDataset": [
        "nemo.collections.asr.parts.preprocessing.perturb"
    ],
    "nemo.utils.exceptions.LightningNotInstalledException": [
        "nemo.collections.asr.parts.preprocessing.perturb"
    ],
    "nemo.collections.nlp.modules.common.transformer.TransformerEncoder": [
        "nemo.collections.asr.modules.wav2vec_modules"
    ],
    "nemo.collections.common.parts.form_attention_mask": [
        "nemo.collections.asr.modules.wav2vec_modules",
        "nemo.collections.asr.modules.transformer.transformer_encoders",
        "nemo.collections.asr.modules.transformer.transformer_decoders",
        "nemo.collections.asr.modules.transformer.transformer_modules",
        "nemo.collections.nlp.modules.common.transformer.transformer_encoders",
        "nemo.collections.nlp.modules.common.transformer.transformer_decoders",
        "nemo.collections.nlp.modules.common.transformer.transformer_modules"
    ],
    "nemo.collections.asr.parts.k2.graph_decoders.TokenLMDecoder": [
        "nemo.collections.asr.modules.graph_decoder"
    ],
    "nemo.collections.asr.parts.k2.graph_decoders.CtcDecoder": [
        "nemo.collections.asr.modules.graph_decoder"
    ],
    "nemo.collections.asr.parts.k2.graph_decoders.RnntAligner": [
        "nemo.collections.asr.modules.graph_decoder"
    ],
    "nemo.core.neural_types.PredictionsType": [
        "nemo.collections.asr.modules.graph_decoder",
        "nemo.collections.asr.modules.beam_search_decoder",
        "nemo.collections.asr.modules.flashlight_decoder",
        "nemo.collections.tts.losses.audio_codec_loss"
    ],
    "nemo.collections.asr.parts.submodules.spectr_augment.SpecCutout": [
        "nemo.collections.asr.modules.audio_preprocessing"
    ],
    "nemo.collections.asr.parts.submodules.spectr_augment.SpecAugment": [
        "nemo.collections.asr.modules.audio_preprocessing"
    ],
    "nemo.collections.asr.parts.preprocessing.features.FilterbankFeaturesTA": [
        "nemo.collections.asr.modules.audio_preprocessing"
    ],
    "nemo.core.utils.numba_utils.__NUMBA_MINIMUM_VERSION__": [
        "nemo.collections.asr.modules.audio_preprocessing"
    ],
    "nemo.collections.asr.parts.numba.spec_augment.SpecAugmentNumba": [
        "nemo.collections.asr.modules.audio_preprocessing"
    ],
    "nemo.collections.asr.parts.numba.spec_augment.spec_augment_launch_heuristics": [
        "nemo.collections.asr.modules.audio_preprocessing"
    ],
    "nemo.core.neural_types.MFCCSpectrogramType": [
        "nemo.collections.asr.modules.audio_preprocessing"
    ],
    "nemo.collections.asr.parts.preprocessing.features.FilterbankFeatures": [
        "nemo.collections.asr.modules.audio_preprocessing",
        "nemo.collections.tts.losses.audio_codec_loss"
    ],
    "nemo.collections.asr.parts.utils.adapter_utils": [
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conv_asr",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.asr.modules.transformer.transformer_encoders",
        "nemo.collections.asr.modules.transformer.transformer_decoders",
        "nemo.collections.asr.modules.transformer.transformer",
        "nemo.collections.tts.modules.adapters"
    ],
    "nemo.collections.asr.parts.submodules.multi_head_attention.RelPositionalEncoding": [
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.collections.asr.parts.submodules.squeezeformer_modules.SqueezeformerLayer": [
        "nemo.collections.asr.modules.squeezeformer_encoder"
    ],
    "nemo.collections.asr.parts.submodules.multi_head_attention.PositionalEncoding": [
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.collections.asr.parts.submodules.subsampling.TimeReductionModule": [
        "nemo.collections.asr.modules.squeezeformer_encoder"
    ],
    "nemo.collections.asr.parts.submodules.subsampling.StackingSubsampling": [
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.rnn_encoder"
    ],
    "nemo.collections.asr.parts.submodules.subsampling.ConvSubsampling": [
        "nemo.collections.asr.modules.squeezeformer_encoder",
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.asr.modules.rnn_encoder"
    ],
    "nemo.collections.asr.parts.submodules.jasper.JasperBlock": [
        "nemo.collections.asr.modules.conv_asr"
    ],
    "nemo.collections.asr.parts.submodules.tdnn_attention.TDNNModule": [
        "nemo.collections.asr.modules.conv_asr"
    ],
    "nemo.collections.asr.parts.submodules.tdnn_attention.TDNNSEModule": [
        "nemo.collections.asr.modules.conv_asr"
    ],
    "nemo.collections.asr.parts.submodules.jasper.SqueezeExcite": [
        "nemo.collections.asr.modules.conv_asr"
    ],
    "nemo.collections.asr.parts.submodules.tdnn_attention.StatsPoolLayer": [
        "nemo.collections.asr.modules.conv_asr"
    ],
    "nemo.collections.asr.parts.submodules.jasper.ParallelBlock": [
        "nemo.collections.asr.modules.conv_asr"
    ],
    "nemo.collections.asr.parts.submodules.tdnn_attention.AttentivePoolLayer": [
        "nemo.collections.asr.modules.conv_asr"
    ],
    "nemo.collections.asr.parts.submodules.jasper.MaskedConv1d": [
        "nemo.collections.asr.modules.conv_asr"
    ],
    "nemo.collections.asr.modules.rnnt": [
        "nemo.collections.asr.modules.hybrid_autoregressive_transducer"
    ],
    "nemo.collections.asr.parts.submodules.subsampling.SubsamplingReductionModule": [
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.collections.asr.models.configs.CacheAwareStreamingConfig": [
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.collections.asr.parts.utils.regularization_utils.compute_stochastic_depth_drop_probs": [
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.collections.asr.parts.submodules.conformer_modules.ConformerLayer": [
        "nemo.collections.asr.modules.conformer_encoder",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_lexical_audio_model"
    ],
    "nemo.collections.asr.parts.submodules.multi_head_attention.LocalAttRelPositionalEncoding": [
        "nemo.collections.asr.modules.conformer_encoder"
    ],
    "nemo.core.classes.mixins.AdapterModuleMixin": [
        "nemo.collections.asr.modules.rnnt"
    ],
    "nemo.core.classes.adapter_mixins": [
        "nemo.collections.asr.modules.rnnt",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.submodules",
        "nemo.collections.tts.modules.transformer",
        "nemo.collections.tts.modules.adapters"
    ],
    "nemo.collections.common.parts.rnn": [
        "nemo.collections.asr.modules.rnnt"
    ],
    "nemo.core.neural_types.EmbeddedTextType": [
        "nemo.collections.asr.modules.rnnt"
    ],
    "nemo.core.neural_types.ElementType": [
        "nemo.collections.asr.modules.rnnt"
    ],
    "nemo.collections.asr.parts.submodules.stateless_net": [
        "nemo.collections.asr.modules.rnnt"
    ],
    "nemo.collections.asr.modules.transformer.transformer_modules.PositionWiseFF": [
        "nemo.collections.asr.modules.transformer.transformer_encoders",
        "nemo.collections.asr.modules.transformer.transformer_decoders"
    ],
    "nemo.collections.asr.modules.transformer.transformer_modules.MultiHeadAttention": [
        "nemo.collections.asr.modules.transformer.transformer_encoders",
        "nemo.collections.asr.modules.transformer.transformer_decoders"
    ],
    "nemo.collections.common.parts.mask_padded_tokens": [
        "nemo.collections.asr.modules.transformer.transformer_generators",
        "nemo.collections.nlp.modules.common.transformer.transformer_generators"
    ],
    "nemo.core.neural_types.elements.BoolType": [
        "nemo.collections.asr.modules.transformer.transformer_bottleneck",
        "nemo.collections.tts.models.spectrogram_enhancer",
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.collections.asr.modules.transformer.bridge_encoders.BridgeEncoder": [
        "nemo.collections.asr.modules.transformer.transformer_bottleneck"
    ],
    "nemo.collections.asr.modules.transformer.transformer.NeMoTransformerConfig": [
        "nemo.collections.asr.modules.transformer.transformer_bottleneck"
    ],
    "nemo.collections.asr.modules.transformer.transformer.TransformerDecoderNM": [
        "nemo.collections.asr.modules.transformer.transformer_bottleneck",
        "nemo.collections.asr.modules.transformer.transformer_utils"
    ],
    "nemo.collections.asr.modules.transformer.reduction_encoders.PoolingEncoder": [
        "nemo.collections.asr.modules.transformer.transformer_bottleneck"
    ],
    "nemo.collections.asr.modules.transformer.perceiver_encoders.PerceiverEncoder": [
        "nemo.collections.asr.modules.transformer.transformer_bottleneck"
    ],
    "nemo.collections.asr.modules.transformer.transformer.TransformerEncoderNM": [
        "nemo.collections.asr.modules.transformer.transformer_bottleneck",
        "nemo.collections.asr.modules.transformer.transformer_utils"
    ],
    "nemo.collections.asr.modules.transformer.transformer_bottleneck.TransformerBottleneckEncoderNM": [
        "nemo.collections.asr.modules.transformer.transformer_utils"
    ],
    "nemo.collections.asr.modules.transformer.transformer_modules.AttentionBridge": [
        "nemo.collections.asr.modules.transformer.perceiver_encoders",
        "nemo.collections.asr.modules.transformer.bridge_encoders"
    ],
    "nemo.collections.asr.modules.transformer.transformer_decoders.TransformerDecoder": [
        "nemo.collections.asr.modules.transformer.perceiver_encoders",
        "nemo.collections.asr.modules.transformer.transformer"
    ],
    "nemo.collections.asr.modules.transformer.transformer_encoders.TransformerEncoder": [
        "nemo.collections.asr.modules.transformer.perceiver_encoders",
        "nemo.collections.asr.modules.transformer.bridge_encoders",
        "nemo.collections.asr.modules.transformer.transformer",
        "nemo.collections.asr.modules.transformer.reduction_encoders"
    ],
    "nemo.collections.asr.modules.transformer.encoder_module.EncoderModule": [
        "nemo.collections.asr.modules.transformer.transformer"
    ],
    "nemo.collections.asr.modules.transformer.transformer_decoders.TransformerDecoderAdapter": [
        "nemo.collections.asr.modules.transformer.transformer"
    ],
    "nemo.collections.asr.modules.transformer.decoder_module.DecoderModule": [
        "nemo.collections.asr.modules.transformer.transformer"
    ],
    "nemo.collections.asr.modules.transformer.transformer_modules.TransformerEmbedding": [
        "nemo.collections.asr.modules.transformer.transformer"
    ],
    "nemo.collections.asr.modules.AudioToMelSpectrogramPreprocessor": [
        "nemo.collections.asr.modules.ssl_modules.multi_layer_feat",
        "nemo.collections.tts.parts.preprocessing.features",
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.collections.asr.modules.ConformerEncoder": [
        "nemo.collections.asr.modules.ssl_modules.multi_layer_feat",
        "nemo.collections.speechlm.modules.modality_adapter"
    ],
    "nemo.collections.asr.data.ssl_dataset.AudioNoiseBatch": [
        "nemo.collections.asr.modules.ssl_modules.augmentation"
    ],
    "nemo.utils.data_utils.is_tarred_path": [
        "nemo.collections.asr.data.audio_to_text"
    ],
    "nemo.utils.data_utils.datastore_path_to_webdataset_url": [
        "nemo.collections.asr.data.audio_to_text"
    ],
    "nemo.utils.data_utils.is_datastore_cache_shared": [
        "nemo.collections.asr.data.audio_to_text"
    ],
    "nemo.utils.data_utils.datastore_object_get": [
        "nemo.collections.asr.data.audio_to_text"
    ],
    "nemo.collections.asr.parts.preprocessing.segment.available_formats": [
        "nemo.collections.asr.data.audio_to_text",
        "nemo.collections.asr.data.audio_to_label",
        "nemo.collections.tts.data.vocoder_dataset"
    ],
    "nemo.collections.asr.parts.preprocessing.feature_loader.ExternalFeatureLoader": [
        "nemo.collections.asr.data.feature_to_label",
        "nemo.collections.asr.data.feature_to_text"
    ],
    "nemo.collections.asr.data.audio_to_text.ASRManifestProcessor": [
        "nemo.collections.asr.data.audio_to_text_dali"
    ],
    "nemo.collections.asr.data.audio_to_label": [
        "nemo.collections.asr.data.audio_to_label_dataset"
    ],
    "nemo.collections.common.data.dataset.ConcatDataset": [
        "nemo.collections.asr.data.audio_to_label_dataset",
        "nemo.collections.asr.data.audio_to_text_dataset",
        "nemo.collections.asr.data.ssl_dataset",
        "nemo.collections.speechlm.data.dataset.audio_text_dataset"
    ],
    "nemo.collections.asr.data.feature_to_text.FeatureToCharDataset": [
        "nemo.collections.asr.data.feature_to_text_dataset"
    ],
    "nemo.collections.asr.data.feature_to_text.FeatureToBPEDataset": [
        "nemo.collections.asr.data.feature_to_text_dataset"
    ],
    "nemo.collections.common.data.dataset.CodeSwitchedDataset": [
        "nemo.collections.asr.data.audio_to_text_dataset"
    ],
    "nemo.collections.asr.data.audio_to_text_dali": [
        "nemo.collections.asr.data.audio_to_text_dataset"
    ],
    "nemo.collections.asr.data.huggingface.hf_audio_to_text_dataset.get_hf_audio_to_text_char_dataset": [
        "nemo.collections.asr.data.audio_to_text_dataset"
    ],
    "nemo.collections.asr.data.audio_to_text": [
        "nemo.collections.asr.data.audio_to_text_dataset",
        "nemo.collections.asr.data.ssl_dataset"
    ],
    "nemo.collections.asr.data.huggingface.hf_audio_to_text_dataset.get_hf_audio_to_text_bpe_dataset": [
        "nemo.collections.asr.data.audio_to_text_dataset"
    ],
    "nemo.collections.asr.data.audio_to_text_dataset.ASRPredictionWriter": [
        "nemo.collections.asr.data.audio_to_ctm_dataset"
    ],
    "nemo.collections.asr.parts.utils.asr_multispeaker_utils.get_hidden_length_from_sample_length": [
        "nemo.collections.asr.data.audio_to_diar_label_lhotse"
    ],
    "nemo.collections.asr.parts.utils.asr_multispeaker_utils.speaker_to_target": [
        "nemo.collections.asr.data.audio_to_diar_label_lhotse"
    ],
    "nemo.collections.asr.data.feature_to_label._audio_feature_collate_fn": [
        "nemo.collections.asr.data.feature_to_text"
    ],
    "nemo.collections.asr.parts.utils.vad_utils.load_speech_segments_from_rttm": [
        "nemo.collections.asr.data.feature_to_text"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.get_random_offset_index": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.is_overlap": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.perturb_audio": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.read_noise_manifest": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.get_split_points_in_alignments": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.normalize_audio": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.load_speaker_sample": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.SpeechSampler": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.per_speaker_normalize": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.DataAnnotator": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.get_background_noise": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.get_cleaned_base_path": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.build_speaker_samples_map": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.get_speaker_ids": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.get_overlap_range": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.read_audio_from_buffer": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.merge_float_intervals": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.utils.data_simulation_utils.get_speaker_samples": [
        "nemo.collections.asr.data.data_simulation"
    ],
    "nemo.collections.asr.parts.preprocessing.perturb.WhiteNoisePerturbation": [
        "nemo.collections.asr.data.ssl_dataset"
    ],
    "nemo.collections.common.prompts.CanaryPromptFormatter": [
        "nemo.collections.asr.data.audio_to_text_lhotse_prompted"
    ],
    "nemo.collections.common.data.apply_prompt_format_fn": [
        "nemo.collections.asr.data.audio_to_text_lhotse_prompted"
    ],
    "nemo.collections.asr.data.feature_to_label": [
        "nemo.collections.asr.data.feature_to_label_dataset"
    ],
    "nemo.collections.common.parts.preprocessing.collections.DiarizationSpeechLabel": [
        "nemo.collections.asr.data.audio_to_diar_label"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.get_subsegments": [
        "nemo.collections.asr.data.audio_to_diar_label"
    ],
    "nemo.collections.common.parts.preprocessing.collections.EndtoEndDiarizationSpeechLabel": [
        "nemo.collections.asr.data.audio_to_diar_label"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.prepare_split_data": [
        "nemo.collections.asr.data.audio_to_diar_label"
    ],
    "nemo.collections.asr.parts.utils.speaker_utils.convert_rttm_line": [
        "nemo.collections.asr.data.audio_to_diar_label"
    ],
    "nemo.collections.asr.data.huggingface.hf_audio_to_text.HFIterableAudioToCharDataset": [
        "nemo.collections.asr.data.huggingface.hf_audio_to_text_dataset"
    ],
    "nemo.collections.asr.data.huggingface.hf_audio_to_text.HFAudioToBPEDataset": [
        "nemo.collections.asr.data.huggingface.hf_audio_to_text_dataset"
    ],
    "nemo.collections.asr.data.huggingface.hf_audio_to_text.HFAudioToCharDataset": [
        "nemo.collections.asr.data.huggingface.hf_audio_to_text_dataset"
    ],
    "nemo.collections.asr.data.huggingface.hf_audio_to_text.HFIterableAudioToBPEDataset": [
        "nemo.collections.asr.data.huggingface.hf_audio_to_text_dataset"
    ],
    "nemo.core.neural_types.neural_type.NeuralType": [
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.losses.hifigan_losses",
        "nemo.collections.tts.losses.stftlosses",
        "nemo.collections.tts.losses.waveglowloss",
        "nemo.collections.tts.losses.vits_losses",
        "nemo.collections.tts.losses.aligner_loss",
        "nemo.collections.tts.losses.tacotron2loss",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.two_stages",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.models.base",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.submodules",
        "nemo.collections.tts.modules.radtts",
        "nemo.collections.tts.modules.tacotron2",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.transformer",
        "nemo.collections.tts.modules.univnet_modules",
        "nemo.collections.tts.modules.waveglow",
        "nemo.collections.tts.modules.hifigan_modules",
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.core.neural_types.elements.RegressionValuesType": [
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.modules.fastpitch"
    ],
    "nemo.collections.tts.modules.transformer.mask_from_lens": [
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.models.fastpitch_ssl"
    ],
    "nemo.core.neural_types.elements.LengthsType": [
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.losses.stftlosses",
        "nemo.collections.tts.losses.aligner_loss",
        "nemo.collections.tts.losses.tacotron2loss",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.submodules",
        "nemo.collections.tts.modules.radtts",
        "nemo.collections.tts.modules.tacotron2",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.transformer",
        "nemo.collections.tts.modules.audio_codec_modules",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.core.neural_types.elements.LossType": [
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.losses.hifigan_losses",
        "nemo.collections.tts.losses.stftlosses",
        "nemo.collections.tts.losses.waveglowloss",
        "nemo.collections.tts.losses.vits_losses",
        "nemo.collections.tts.losses.aligner_loss",
        "nemo.collections.tts.losses.tacotron2loss",
        "nemo.collections.tts.modules.encodec_modules"
    ],
    "nemo.core.neural_types.elements.TokenDurationType": [
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.core.neural_types.elements.MelSpectrogramType": [
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.losses.tacotron2loss",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.two_stages",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.submodules",
        "nemo.collections.tts.modules.radtts",
        "nemo.collections.tts.modules.tacotron2",
        "nemo.collections.tts.modules.univnet_modules",
        "nemo.collections.tts.modules.waveglow",
        "nemo.collections.tts.modules.hifigan_modules",
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.core.neural_types.elements.TokenLogDurationType": [
        "nemo.collections.tts.losses.fastpitchloss",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.modules.fastpitch"
    ],
    "nemo.collections.tts.parts.utils.helpers.get_mask_from_lengths": [
        "nemo.collections.tts.losses.audio_codec_loss",
        "nemo.collections.tts.losses.radttsloss",
        "nemo.collections.tts.losses.tacotron2loss",
        "nemo.collections.tts.models.aligner",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.magpietts",
        "nemo.collections.tts.modules.radtts",
        "nemo.collections.tts.modules.tacotron2",
        "nemo.collections.tts.modules.common",
        "nemo.collections.tts.modules.transformer",
        "nemo.collections.tts.modules.vits_modules",
        "nemo.collections.tts.modules.attribute_prediction_model",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset"
    ],
    "nemo.collections.tts.losses.aligner_loss.ForwardSumLoss": [
        "nemo.collections.tts.losses.radttsloss",
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.aligner",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.magpietts",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.core.neural_types.elements.AudioSignal": [
        "nemo.collections.tts.losses.stftlosses",
        "nemo.collections.tts.models.two_stages",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.models.base",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.univnet_modules",
        "nemo.collections.tts.modules.waveglow",
        "nemo.collections.tts.modules.hifigan_modules",
        "nemo.collections.tts.modules.audio_codec_modules",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.core.neural_types.elements.SpectrogramType": [
        "nemo.collections.tts.losses.stftlosses"
    ],
    "nemo.core.neural_types.elements.NormalDistributionSamplesType": [
        "nemo.collections.tts.losses.waveglowloss",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.modules.waveglow"
    ],
    "nemo.core.neural_types.elements.LogprobsType": [
        "nemo.collections.tts.losses.aligner_loss",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.modules.fastpitch"
    ],
    "nemo.core.neural_types.elements.LogitsType": [
        "nemo.collections.tts.losses.tacotron2loss",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.modules.tacotron2"
    ],
    "nemo.collections.tts.g2p.models.zh_cn_pinyin.ChineseG2p": [
        "nemo.collections.tts.g2p.modules",
        "nemo.collections.tts.torch.g2ps"
    ],
    "nemo.collections.tts.g2p.models.i18n_ipa.IpaG2p": [
        "nemo.collections.tts.g2p.modules",
        "nemo.collections.tts.torch.g2ps"
    ],
    "nemo.collections.tts.g2p.data.t5.T5G2PDataset": [
        "nemo.collections.tts.g2p.models.t5"
    ],
    "nemo.collections.tts.models.base.G2PModel": [
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.tts.g2p.models.ctc"
    ],
    "nemo.core.neural_types.TokenIndex": [
        "nemo.collections.tts.g2p.models.t5",
        "nemo.collections.tts.g2p.models.ctc"
    ],
    "nemo.collections.tts.g2p.data.ctc.CTCG2PBPEDataset": [
        "nemo.collections.tts.g2p.models.ctc"
    ],
    "nemo.collections.tts.g2p.models.base.BaseG2p": [
        "nemo.collections.tts.g2p.models.ja_jp_ipa",
        "nemo.collections.tts.g2p.models.zh_cn_pinyin",
        "nemo.collections.tts.g2p.models.i18n_ipa",
        "nemo.collections.tts.g2p.models.en_us_arpabet"
    ],
    "nemo.collections.tts.g2p.utils.set_grapheme_case": [
        "nemo.collections.tts.g2p.models.ja_jp_ipa",
        "nemo.collections.tts.g2p.models.zh_cn_pinyin",
        "nemo.collections.tts.g2p.models.i18n_ipa"
    ],
    "nemo.collections.tts.g2p.utils.read_wordids": [
        "nemo.collections.tts.g2p.models.heteronym_classification"
    ],
    "nemo.collections.nlp.metrics.classification_report.ClassificationReport": [
        "nemo.collections.tts.g2p.models.heteronym_classification",
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.models.text_classification.text_classification_model",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.token_classification.token_classification_model"
    ],
    "nemo.collections.nlp.modules.common.TokenClassifier": [
        "nemo.collections.tts.g2p.models.heteronym_classification",
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.token_classification.token_classification_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model"
    ],
    "nemo.collections.tts.g2p.data.heteronym_classification.HeteronymClassificationDataset": [
        "nemo.collections.tts.g2p.models.heteronym_classification"
    ],
    "nemo.collections.tts.g2p.utils.get_heteronym_spans": [
        "nemo.collections.tts.g2p.models.heteronym_classification"
    ],
    "nemo.collections.nlp.parts.utils_funcs.tensor2list": [
        "nemo.collections.tts.g2p.models.heteronym_classification",
        "nemo.collections.nlp.metrics.qa_metrics",
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.sgdqa_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger",
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.models.text_classification.text_classification_model",
        "nemo.collections.nlp.models.token_classification.token_classification_model",
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset"
    ],
    "nemo.collections.tts.g2p.utils.get_wordid_to_phonemes": [
        "nemo.collections.tts.g2p.models.heteronym_classification"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.normalize_unicode_text": [
        "nemo.collections.tts.g2p.models.i18n_ipa"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.english_word_tokenize": [
        "nemo.collections.tts.g2p.models.i18n_ipa",
        "nemo.collections.tts.g2p.models.en_us_arpabet"
    ],
    "nemo.collections.tts.g2p.utils.GRAPHEME_CASE_MIXED": [
        "nemo.collections.tts.g2p.models.i18n_ipa"
    ],
    "nemo.collections.tts.g2p.utils.GRAPHEME_CASE_UPPER": [
        "nemo.collections.tts.g2p.models.i18n_ipa"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.any_locale_word_tokenize": [
        "nemo.collections.tts.g2p.models.i18n_ipa"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tokenizer_utils.LATIN_CHARS_ALL": [
        "nemo.collections.tts.g2p.models.i18n_ipa"
    ],
    "nemo.collections.tts.g2p.models.heteronym_classification.HeteronymClassificationModel": [
        "nemo.collections.tts.g2p.models.base"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.GermanCharsTokenizer": [
        "nemo.collections.tts.torch.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.BaseCharsTokenizer": [
        "nemo.collections.tts.torch.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.GermanPhonemesTokenizer": [
        "nemo.collections.tts.torch.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.IPATokenizer": [
        "nemo.collections.tts.torch.tts_tokenizers"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.EnglishCharsTokenizer": [
        "nemo.collections.tts.torch.tts_tokenizers",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.BaseTokenizer": [
        "nemo.collections.tts.torch.tts_tokenizers",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.data.text_to_speech_dataset",
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.parts.utils.helpers.plot_alignment_to_numpy": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.aligner",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.magpietts"
    ],
    "nemo.collections.tts.parts.utils.helpers.process_batch": [
        "nemo.collections.tts.models.fastpitch"
    ],
    "nemo.collections.tts.modules.fastpitch.FastPitchModule": [
        "nemo.collections.tts.models.fastpitch"
    ],
    "nemo.collections.tts.parts.utils.callbacks.LoggingCallback": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.parts.utils.helpers.g2p_backward_compatible_support": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.aligner",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.parts.utils.helpers.sample_tts_input": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts"
    ],
    "nemo.collections.tts.losses.aligner_loss.BinLoss": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.aligner",
        "nemo.collections.tts.models.mixer_tts"
    ],
    "nemo.collections.tts.parts.utils.helpers.plot_spectrogram_to_numpy": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.fastpitch_ssl",
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.parts.utils.helpers.batch_from_ragged": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts"
    ],
    "nemo.collections.tts.models.base.SpectrogramGenerator": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.models.mixer_tts"
    ],
    "nemo.collections.tts.losses.fastpitchloss.PitchLoss": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.fastpitch_ssl"
    ],
    "nemo.core.neural_types.elements.TokenIndex": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.radtts",
        "nemo.collections.tts.modules.transformer"
    ],
    "nemo.collections.tts.losses.fastpitchloss.DurationLoss": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.fastpitch_ssl"
    ],
    "nemo.collections.tts.losses.fastpitchloss.EnergyLoss": [
        "nemo.collections.tts.models.fastpitch"
    ],
    "nemo.collections.tts.parts.mixins.FastPitchAdapterModelMixin": [
        "nemo.collections.tts.models.fastpitch"
    ],
    "nemo.core.neural_types.elements.Index": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.submodules",
        "nemo.collections.tts.modules.radtts",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.collections.tts.losses.fastpitchloss.MelLoss": [
        "nemo.collections.tts.models.fastpitch",
        "nemo.collections.tts.models.fastpitch_ssl"
    ],
    "nemo.collections.tts.models.base.NeedsNormalizer": [
        "nemo.collections.tts.models.aligner"
    ],
    "nemo.collections.tts.parts.utils.helpers.binarize_attention": [
        "nemo.collections.tts.models.aligner"
    ],
    "nemo.core.optim.radam.RAdam": [
        "nemo.collections.tts.models.radtts"
    ],
    "nemo.collections.tts.losses.radttsloss.RADTTSLoss": [
        "nemo.collections.tts.models.radtts"
    ],
    "nemo.collections.tts.parts.utils.helpers.regulate_len": [
        "nemo.collections.tts.models.radtts",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.losses.radttsloss.AttentionBinarizationLoss": [
        "nemo.collections.tts.models.radtts"
    ],
    "nemo.collections.tts.parts.utils.helpers.OperationMode": [
        "nemo.collections.tts.models.two_stages",
        "nemo.collections.tts.models.waveglow",
        "nemo.collections.tts.models.base",
        "nemo.collections.tts.modules.waveglow"
    ],
    "nemo.collections.tts.models.base.Vocoder": [
        "nemo.collections.tts.models.two_stages",
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.hifigan"
    ],
    "nemo.collections.tts.parts.utils.helpers.griffin_lim": [
        "nemo.collections.tts.models.two_stages"
    ],
    "nemo.collections.tts.models.base.MelToSpec": [
        "nemo.collections.tts.models.two_stages"
    ],
    "nemo.collections.tts.parts.utils.helpers.tacotron2_log_to_wandb_func": [
        "nemo.collections.tts.models.tacotron2"
    ],
    "nemo.collections.tts.losses.tacotron2loss.Tacotron2Loss": [
        "nemo.collections.tts.models.tacotron2"
    ],
    "nemo.collections.tts.parts.utils.helpers.tacotron2_log_to_tb_func": [
        "nemo.collections.tts.models.tacotron2"
    ],
    "nemo.core.neural_types.elements.EmbeddedTextType": [
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.modules.tacotron2"
    ],
    "nemo.core.neural_types.elements.SequenceToSequenceAlignmentType": [
        "nemo.collections.tts.models.tacotron2",
        "nemo.collections.tts.modules.tacotron2"
    ],
    "nemo.collections.tts.torch.tts_tokenizers.BaseTokenizer": [
        "nemo.collections.tts.models.ssl_tts"
    ],
    "nemo.collections.asr.losses.angularloss.AngularSoftmaxLoss": [
        "nemo.collections.tts.models.ssl_tts"
    ],
    "nemo.collections.tts.modules.ssl_tts.GreedyCTCDecoder": [
        "nemo.collections.tts.models.ssl_tts"
    ],
    "nemo.collections.tts.torch.tts_tokenizers.EnglishCharsTokenizer": [
        "nemo.collections.tts.models.ssl_tts"
    ],
    "nemo.collections.tts.data.dataset.TTSDataset": [
        "nemo.collections.tts.models.ssl_tts"
    ],
    "nemo.collections.tts.modules.univnet_modules.MultiPeriodDiscriminator": [
        "nemo.collections.tts.models.univnet"
    ],
    "nemo.collections.tts.parts.utils.helpers.get_batch_size": [
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.core.optim.lr_scheduler.prepare_lr_scheduler": [
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.losses.stftlosses.MultiResolutionSTFTLoss": [
        "nemo.collections.tts.models.univnet"
    ],
    "nemo.core.Exportable": [
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.spectrogram_enhancer"
    ],
    "nemo.core.optim.lr_scheduler.compute_max_steps": [
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.modules.univnet_modules.MultiResolutionDiscriminator": [
        "nemo.collections.tts.models.univnet"
    ],
    "nemo.collections.tts.losses.hifigan_losses.GeneratorLoss": [
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.hifigan"
    ],
    "nemo.collections.tts.parts.utils.helpers.get_num_workers": [
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.hifigan",
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.losses.hifigan_losses.DiscriminatorLoss": [
        "nemo.collections.tts.models.univnet",
        "nemo.collections.tts.models.hifigan"
    ],
    "nemo.collections.tts.parts.utils.helpers.plot_pitch_to_numpy": [
        "nemo.collections.tts.models.mixer_tts"
    ],
    "nemo.collections.tts.parts.utils.helpers.binarize_attention_parallel": [
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.aligner"
    ],
    "nemo.collections.tts.modules.fastpitch.average_features": [
        "nemo.collections.tts.models.mixer_tts",
        "nemo.collections.tts.models.fastpitch_ssl"
    ],
    "nemo.collections.tts.modules.fastpitch.regulate_len": [
        "nemo.collections.tts.models.mixer_tts"
    ],
    "nemo.collections.tts.modules.hifigan_modules.MultiPeriodDiscriminator": [
        "nemo.collections.tts.models.hifigan"
    ],
    "nemo.collections.tts.modules.hifigan_modules.MultiScaleDiscriminator": [
        "nemo.collections.tts.models.hifigan"
    ],
    "nemo.collections.tts.losses.hifigan_losses.FeatureMatchingLoss": [
        "nemo.collections.tts.models.hifigan"
    ],
    "nemo.collections.tts.modules.fastpitch.FastPitchSSLModule": [
        "nemo.collections.tts.models.fastpitch_ssl"
    ],
    "nemo.collections.tts.parts.utils.helpers.plot_multipitch_to_numpy": [
        "nemo.collections.tts.models.fastpitch_ssl"
    ],
    "nemo.collections.tts.models.AudioCodecModel": [
        "nemo.collections.tts.models.magpietts",
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.stack_tensors": [
        "nemo.collections.tts.models.magpietts",
        "nemo.collections.tts.parts.preprocessing.features",
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.text_to_speech_dataset"
    ],
    "nemo.collections.tts.modules.transformer_2501": [
        "nemo.collections.tts.models.magpietts"
    ],
    "nemo.collections.common.tokenizers.text_to_speech.tts_tokenizers.AggregatedTTSTokenizer": [
        "nemo.collections.tts.models.magpietts"
    ],
    "nemo.core.neural_types.elements.IntType": [
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.modules.waveglow"
    ],
    "nemo.collections.tts.torch.tts_data_types.SpeakerID": [
        "nemo.collections.tts.models.vits",
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.utils.decorators.experimental.experimental": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.parts.utils.helpers.clip_grad_value_": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.data.dataset.DistributedBucketSampler": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.losses.vits_losses.GeneratorLoss": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.parts.utils.helpers.slice_segments": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.core.neural_types.elements.FloatType": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.losses.vits_losses.KlLoss": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.losses.vits_losses.FeatureMatchingLoss": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.modules.vits_modules.MultiPeriodDiscriminator": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.losses.vits_losses.DiscriminatorLoss": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.collections.tts.models.base.TextToWaveform": [
        "nemo.collections.tts.models.vits"
    ],
    "nemo.core.neural_types.elements.LogDeterminantType": [
        "nemo.collections.tts.models.waveglow"
    ],
    "nemo.collections.tts.losses.waveglowloss.WaveGlowLoss": [
        "nemo.collections.tts.models.waveglow"
    ],
    "nemo.collections.tts.parts.utils.helpers.waveglow_log_to_tb_func": [
        "nemo.collections.tts.models.waveglow"
    ],
    "nemo.collections.tts.models.base.GlowVocoder": [
        "nemo.collections.tts.models.waveglow"
    ],
    "nemo.collections.tts.parts.utils.helpers.to_device_recursive": [
        "nemo.collections.tts.models.spectrogram_enhancer"
    ],
    "nemo.collections.tts.losses.spectrogram_enhancer_losses.HingeLoss": [
        "nemo.collections.tts.models.spectrogram_enhancer"
    ],
    "nemo.collections.tts.losses.spectrogram_enhancer_losses.GradientPenaltyLoss": [
        "nemo.collections.tts.models.spectrogram_enhancer"
    ],
    "nemo.collections.tts.losses.spectrogram_enhancer_losses.GeneratorLoss": [
        "nemo.collections.tts.models.spectrogram_enhancer"
    ],
    "nemo.collections.tts.losses.spectrogram_enhancer_losses.ConsistencyLoss": [
        "nemo.collections.tts.models.spectrogram_enhancer"
    ],
    "nemo.collections.tts.losses.audio_codec_loss.MultiResolutionMelLoss": [
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.modules.audio_codec_modules.ResNetSpeakerEncoder": [
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.losses.audio_codec_loss.RelativeFeatureMatchingLoss": [
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.losses.audio_codec_loss.FeatureMatchingLoss": [
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.losses.audio_codec_loss.SISDRLoss": [
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.modules.common.GaussianDropout": [
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.losses.audio_codec_loss.MultiResolutionSTFTLoss": [
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.collections.tts.losses.audio_codec_loss.TimeDomainLoss": [
        "nemo.collections.tts.models.audio_codec"
    ],
    "nemo.core.neural_types.elements.EncodedRepresentation": [
        "nemo.collections.tts.models.audio_codec",
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.submodules",
        "nemo.collections.tts.modules.encodec_modules",
        "nemo.collections.tts.modules.transformer",
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.collections.tts.data.speechllm.t5_speechllm_dataset.T5SpeechLMDataset": [
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.tts.parts.utils.helpers.plot_alignment_to_numpy_for_speechllm": [
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.tts.parts.utils.helpers.plot_codec_to_numpy": [
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset.T5SpeechLMTarredDataset": [
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model.MegatronBaseSpeechLM": [
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.tts.data.speechllm.t5_speechllm_dataset.Lang": [
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.common.tokenizers.sentencepiece_tokenizer.SentencePieceSpeechLLMTTSTokenizer": [
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder.MegatronTokenLevelEncoderDecoderSpeechLLMModule": [
        "nemo.collections.tts.models.speechllm.megatron_t5_speechllm_model"
    ],
    "nemo.collections.nlp.metrics.prompt_learning_metrics.AccuracyScore": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model"
    ],
    "nemo.collections.nlp.metrics.prompt_learning_metrics.ROUGEScores": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model"
    ],
    "nemo.collections.nlp.modules.common.PromptEncoder": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model"
    ],
    "nemo.collections.nlp.metrics.prompt_learning_metrics.BLEUScore": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model"
    ],
    "nemo.collections.nlp.modules.common.VirtualPromptStyle": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model"
    ],
    "nemo.collections.nlp.modules.common.PromptEncoderType": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model"
    ],
    "nemo.collections.nlp.parts.utils_funcs": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_full_te_layer_autocast_spec",
        "nemo.collections.nlp.parts.nlp_overrides",
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.transformer.text_generation.TextGeneration": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.collections.nlp.modules.common.VirtualPromptSource": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model",
        "nemo.collections.nlp.data.language_modeling.megatron.base_prompt_learning_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_prompt_learning_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_prompt_learning_dataset"
    ],
    "nemo.collections.nlp.modules.common.VirtualPromptPlaceholderToken": [
        "nemo.collections.tts.models.speechllm.megatron_base_speechllm_prompt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model"
    ],
    "nemo.collections.tts.models.HifiGanModel": [
        "nemo.collections.tts.parts.utils.callbacks"
    ],
    "nemo.collections.tts.parts.utils.helpers.create_plot": [
        "nemo.collections.tts.parts.utils.callbacks"
    ],
    "nemo.collections.tts.models.UnivNetModel": [
        "nemo.collections.tts.parts.utils.callbacks"
    ],
    "nemo.collections.tts.torch.tts_data_types.MAIN_DATA_TYPES": [
        "nemo.collections.tts.parts.utils.helpers",
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.DATA_STR2DATA_CLASS": [
        "nemo.collections.tts.parts.utils.helpers",
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.WithLens": [
        "nemo.collections.tts.parts.utils.helpers",
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.normalize_volume": [
        "nemo.collections.tts.parts.preprocessing.audio_trimming",
        "nemo.collections.tts.parts.preprocessing.features"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.get_audio_filepaths": [
        "nemo.collections.tts.parts.preprocessing.features"
    ],
    "nemo.collections.tts.modules.submodules.ConditionalLayerNorm": [
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.transformer"
    ],
    "nemo.collections.tts.modules.submodules.ConditionalInput": [
        "nemo.collections.tts.modules.fastpitch",
        "nemo.collections.tts.modules.aligner",
        "nemo.collections.tts.modules.transformer"
    ],
    "nemo.collections.tts.modules.submodules.ConvNorm": [
        "nemo.collections.tts.modules.aligner",
        "nemo.collections.tts.modules.tacotron2",
        "nemo.collections.tts.modules.mixer_tts",
        "nemo.collections.tts.modules.common",
        "nemo.collections.tts.modules.attribute_prediction_model"
    ],
    "nemo.collections.tts.modules.attribute_prediction_model.get_attribute_prediction_model": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.modules.common.Invertible1x1ConvLUS": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.modules.common.ExponentialClass": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.modules.common.Invertible1x1Conv": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.modules.common.get_radtts_encoder": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.modules.common.BiLSTM": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.modules.common.LinearNorm": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.modules.common.AffineTransformationLayer": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.modules.common.ConvAttention": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.parts.utils.helpers.mas_width1": [
        "nemo.collections.tts.modules.radtts"
    ],
    "nemo.collections.tts.modules.submodules.Attention": [
        "nemo.collections.tts.modules.tacotron2"
    ],
    "nemo.collections.tts.modules.submodules.Prenet": [
        "nemo.collections.tts.modules.tacotron2"
    ],
    "nemo.collections.tts.modules.submodules.LinearNorm": [
        "nemo.collections.tts.modules.tacotron2",
        "nemo.collections.tts.modules.common",
        "nemo.collections.tts.modules.transformer"
    ],
    "nemo.collections.tts.modules.transformer.PositionalEmbedding": [
        "nemo.collections.tts.modules.mixer_tts"
    ],
    "nemo.collections.tts.parts.utils.splines.piecewise_linear_inverse_transform": [
        "nemo.collections.tts.modules.common"
    ],
    "nemo.collections.tts.parts.utils.helpers.unsort_tensor": [
        "nemo.collections.tts.modules.common"
    ],
    "nemo.collections.tts.parts.utils.splines.piecewise_linear_transform": [
        "nemo.collections.tts.modules.common"
    ],
    "nemo.collections.tts.parts.utils.splines.unbounded_piecewise_quadratic_transform": [
        "nemo.collections.tts.modules.common"
    ],
    "nemo.collections.tts.parts.utils.helpers.sort_tensor": [
        "nemo.collections.tts.modules.common"
    ],
    "nemo.collections.tts.modules.audio_codec_modules.VectorQuantizerBase": [
        "nemo.collections.tts.modules.encodec_modules"
    ],
    "nemo.collections.tts.modules.audio_codec_modules.Conv1dNorm": [
        "nemo.collections.tts.modules.encodec_modules"
    ],
    "nemo.collections.tts.modules.audio_codec_modules.Conv2dNorm": [
        "nemo.collections.tts.modules.encodec_modules"
    ],
    "nemo.collections.tts.modules.audio_codec_modules.get_down_sample_padding": [
        "nemo.collections.tts.modules.encodec_modules"
    ],
    "nemo.collections.tts.modules.audio_codec_modules.CodecActivation": [
        "nemo.collections.tts.modules.encodec_modules"
    ],
    "nemo.collections.tts.modules.audio_codec_modules.ConvTranspose1dNorm": [
        "nemo.collections.tts.modules.encodec_modules"
    ],
    "nemo.collections.tts.losses.audio_codec_loss.MaskedMSELoss": [
        "nemo.collections.tts.modules.encodec_modules"
    ],
    "nemo.collections.tts.parts.utils.distributed.broadcast_tensors": [
        "nemo.collections.tts.modules.encodec_modules"
    ],
    "nemo.core.neural_types.elements.MaskType": [
        "nemo.collections.tts.modules.transformer"
    ],
    "nemo.collections.tts.modules.submodules.Invertible1x1Conv": [
        "nemo.collections.tts.modules.waveglow"
    ],
    "nemo.collections.tts.modules.submodules.WaveNet": [
        "nemo.collections.tts.modules.waveglow"
    ],
    "nemo.collections.tts.parts.utils.helpers.split_view": [
        "nemo.collections.tts.modules.waveglow"
    ],
    "nemo.collections.tts.parts.utils.helpers.remove": [
        "nemo.collections.tts.modules.waveglow"
    ],
    "nemo.collections.common.parts.utils.HalfSnake": [
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.collections.common.parts.utils.Snake": [
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.collections.common.parts.utils.ClampActivation": [
        "nemo.collections.tts.modules.audio_codec_modules"
    ],
    "nemo.collections.tts.modules.monotonic_align.maximum_path": [
        "nemo.collections.tts.modules.vits_modules"
    ],
    "nemo.collections.tts.modules.hifigan_modules.ResBlock1": [
        "nemo.collections.tts.modules.vits_modules"
    ],
    "nemo.collections.tts.parts.utils.helpers.generate_path": [
        "nemo.collections.tts.modules.vits_modules"
    ],
    "nemo.collections.tts.parts.utils.splines.piecewise_rational_quadratic_transform": [
        "nemo.collections.tts.modules.vits_modules"
    ],
    "nemo.collections.tts.modules.hifigan_modules.get_padding": [
        "nemo.collections.tts.modules.vits_modules"
    ],
    "nemo.collections.tts.parts.utils.helpers.rand_slice_segments": [
        "nemo.collections.tts.modules.vits_modules"
    ],
    "nemo.collections.tts.modules.hifigan_modules.init_weights": [
        "nemo.collections.tts.modules.vits_modules"
    ],
    "nemo.collections.tts.modules.hifigan_modules.ResBlock2": [
        "nemo.collections.tts.modules.vits_modules"
    ],
    "nemo.collections.tts.parts.utils.helpers.convert_pad_shape": [
        "nemo.collections.tts.modules.vits_modules"
    ],
    "nemo.collections.tts.modules.common.ConvLSTMLinear": [
        "nemo.collections.tts.modules.attribute_prediction_model"
    ],
    "nemo.collections.tts.modules.transformer.FFTransformer": [
        "nemo.collections.tts.modules.attribute_prediction_model"
    ],
    "nemo.collections.tts.modules.aligner.AlignmentEncoder": [
        "nemo.collections.tts.modules.adapters"
    ],
    "nemo.collections.tts.modules.transformer.FFTransformerEncoder": [
        "nemo.collections.tts.modules.adapters"
    ],
    "nemo.collections.tts.modules.transformer.FFTransformerDecoder": [
        "nemo.collections.tts.modules.adapters"
    ],
    "nemo.collections.tts.modules.fastpitch.TemporalPredictor": [
        "nemo.collections.tts.modules.adapters"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.load_audio": [
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.text_to_speech_dataset"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.filter_dataset_by_duration": [
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.text_to_speech_dataset"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.sample_audio": [
        "nemo.collections.tts.data.vocoder_dataset"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.get_weighted_sampler": [
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.text_to_speech_dataset"
    ],
    "nemo.collections.tts.parts.preprocessing.feature_processors.FeatureProcessor": [
        "nemo.collections.tts.data.vocoder_dataset",
        "nemo.collections.tts.data.text_to_speech_dataset"
    ],
    "nemo.collections.tts.parts.preprocessing.features.Featurizer": [
        "nemo.collections.tts.data.text_to_speech_dataset"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils._read_audio": [
        "nemo.collections.tts.data.text_to_speech_dataset"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.beta_binomial_prior_distribution": [
        "nemo.collections.tts.data.text_to_speech_dataset",
        "nemo.collections.tts.data.dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.TTSDataType": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.LogMel": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.Durations": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.Voiced_mask": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.Energy": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.get_base_dir": [
        "nemo.collections.tts.data.dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.Pitch": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.P_voiced": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.BetaBinomialInterpolator": [
        "nemo.collections.tts.data.dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.AlignPriorMatrix": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.parts.utils.tts_dataset_utils.general_padding": [
        "nemo.collections.tts.data.dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.LMTokens": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.tts.torch.tts_data_types.ReferenceAudio": [
        "nemo.collections.tts.data.dataset"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_t5_model.T5Sentinel": [
        "nemo.collections.tts.data.speechllm.t5_speechllm_tarred_dataset",
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_prompt_learning_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.base_prompt_learning_dataset.BasePromptLearningDataset": [
        "nemo.collections.tts.data.speechllm.t5_speechllm_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_prompt_learning_dataset"
    ],
    "nemo.collections.nlp.modules.common.tokenizer_utils.TokenizerConfig": [
        "nemo.collections.nlp.models.enc_dec_nlp_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config"
    ],
    "nemo.core.config.modelPT.ModelConfig": [
        "nemo.collections.nlp.models.enc_dec_nlp_model"
    ],
    "nemo.collections.nlp.modules.common.decoder_module.DecoderModule": [
        "nemo.collections.nlp.models.enc_dec_nlp_model",
        "nemo.collections.nlp.modules.common.lm_utils",
        "nemo.collections.nlp.modules.common.transformer.transformer",
        "nemo.collections.nlp.modules.common.huggingface.huggingface_decoder"
    ],
    "nemo.collections.nlp.modules.common.encoder_module.EncoderModule": [
        "nemo.collections.nlp.models.enc_dec_nlp_model",
        "nemo.collections.nlp.modules.common.lm_utils",
        "nemo.collections.nlp.modules.common.transformer.transformer",
        "nemo.collections.nlp.modules.common.huggingface.huggingface_encoder"
    ],
    "nemo.collections.nlp.modules.BertModule": [
        "nemo.collections.nlp.models.nlp_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_utils.get_megatron_pretrained_bert_models": [
        "nemo.collections.nlp.models.nlp_model",
        "nemo.collections.nlp.modules.common.lm_utils"
    ],
    "nemo.collections.nlp.modules.common.huggingface.huggingface_utils.VOCAB_FILE_NAME": [
        "nemo.collections.nlp.models.nlp_model"
    ],
    "nemo.collections.nlp.modules.common.lm_utils.get_lm_model": [
        "nemo.collections.nlp.models.nlp_model",
        "nemo.collections.nlp.models.information_retrieval.base_ir_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_utils.MEGATRON_CONFIG_MAP": [
        "nemo.collections.nlp.models.nlp_model"
    ],
    "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset.ZeroShotIntentInferenceDataset": [
        "nemo.collections.nlp.models.zero_shot_intent_recognition.zero_shot_intent_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model"
    ],
    "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset.calc_class_weights_from_dataloader": [
        "nemo.collections.nlp.models.zero_shot_intent_recognition.zero_shot_intent_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model"
    ],
    "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset.ZeroShotIntentDataset": [
        "nemo.collections.nlp.models.zero_shot_intent_recognition.zero_shot_intent_model"
    ],
    "nemo.collections.nlp.models.TextClassificationModel": [
        "nemo.collections.nlp.models.zero_shot_intent_recognition.zero_shot_intent_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model"
    ],
    "nemo.utils.decorators.deprecated_warning": [
        "nemo.collections.nlp.models.entity_linking.entity_linking_model",
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.models.question_answering.qa_gpt_model",
        "nemo.collections.nlp.models.question_answering.qa_s2s_model",
        "nemo.collections.nlp.models.question_answering.qa_base_model",
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.sgdqa_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model",
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.data.question_answering.dataset.qa_bert_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_s2s_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_gpt_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_dataset",
        "nemo.collections.nlp.data.spellchecking_asr_customization.bert_example",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_nearest_neighbour_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_gpt_classification_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_gpt_generation_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_s2s_generation_dataset",
        "nemo.collections.nlp.data.dialogue.data_processor.design_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.sgd_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.ms_marco_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.assistant_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.mellon_qa_data_processor",
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.base_prompt_learning_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_prompt_learning_dataset"
    ],
    "nemo.collections.nlp.data.EntityLinkingDataset": [
        "nemo.collections.nlp.models.entity_linking.entity_linking_model"
    ],
    "nemo.collections.common.losses.MultiSimilarityLoss": [
        "nemo.collections.nlp.models.entity_linking.entity_linking_model"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.INFERENCE_MODE": [
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.SquadDataset": [
        "nemo.collections.nlp.models.question_answering.qa_model"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.EVALUATION_MODE": [
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.common.losses.SpanningLoss": [
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.models.question_answering.qa_bert_model"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.TRAINING_MODE": [
        "nemo.collections.nlp.models.question_answering.qa_model",
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.common.parts.utils._compute_softmax": [
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering.dataset.qa_bert_dataset.BERTQADataset": [
        "nemo.collections.nlp.models.question_answering.qa_bert_model"
    ],
    "nemo.collections.nlp.data.question_answering.data_processor.qa_processing.QAProcessor": [
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.models.question_answering.qa_gpt_model",
        "nemo.collections.nlp.models.question_answering.qa_s2s_model"
    ],
    "nemo.collections.nlp.models.question_answering.qa_base_model.BaseQAModel": [
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.models.question_answering.qa_gpt_model",
        "nemo.collections.nlp.models.question_answering.qa_s2s_model"
    ],
    "nemo.collections.nlp.metrics.qa_metrics.QAMetrics": [
        "nemo.collections.nlp.models.question_answering.qa_bert_model",
        "nemo.collections.nlp.models.question_answering.qa_gpt_model",
        "nemo.collections.nlp.models.question_answering.qa_s2s_model"
    ],
    "nemo.collections.nlp.data.question_answering.dataset.qa_gpt_dataset.GPTQADataset": [
        "nemo.collections.nlp.models.question_answering.qa_gpt_model"
    ],
    "nemo.collections.nlp.data.question_answering.dataset.qa_s2s_dataset.S2SQADataset": [
        "nemo.collections.nlp.models.question_answering.qa_s2s_model"
    ],
    "nemo.collections.nlp.data.question_answering.data_processor.qa_processing.EVALUATION_MODE": [
        "nemo.collections.nlp.models.question_answering.qa_base_model",
        "nemo.collections.nlp.data.question_answering.dataset.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering.data_processor.qa_processing.TRAINING_MODE": [
        "nemo.collections.nlp.models.question_answering.qa_base_model",
        "nemo.collections.nlp.data.question_answering.dataset.qa_bert_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_s2s_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_gpt_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering.data_processor.qa_processing.INFERENCE_MODE": [
        "nemo.collections.nlp.models.question_answering.qa_base_model",
        "nemo.collections.nlp.data.question_answering.dataset.qa_bert_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_s2s_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_gpt_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_dataset"
    ],
    "nemo.collections.nlp.data.intent_slot_classification.IntentSlotClassificationDataset": [
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_dataset"
    ],
    "nemo.collections.nlp.data.intent_slot_classification.IntentSlotInferenceDataset": [
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model"
    ],
    "nemo.collections.nlp.data.intent_slot_classification.IntentSlotDataDesc": [
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model"
    ],
    "nemo.collections.nlp.modules.common.SequenceTokenClassifier": [
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model"
    ],
    "nemo.collections.common.losses.AggregatorLoss": [
        "nemo.collections.nlp.models.intent_slot_classification.intent_slot_classification_model",
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model"
    ],
    "nemo.collections.common.losses.BCEWithLogitsLoss": [
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model"
    ],
    "nemo.collections.nlp.models.intent_slot_classification.IntentSlotClassificationModel": [
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model"
    ],
    "nemo.collections.nlp.data.intent_slot_classification.MultiLabelIntentSlotDataDesc": [
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model"
    ],
    "nemo.collections.nlp.metrics.classification_report.MultiLabelClassificationReport": [
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model"
    ],
    "nemo.collections.nlp.data.intent_slot_classification.MultiLabelIntentSlotClassificationDataset": [
        "nemo.collections.nlp.models.intent_slot_classification.multi_label_intent_slot_classification_model"
    ],
    "nemo.collections.nlp.data.spellchecking_asr_customization.SpellcheckingAsrCustomizationTestDataset": [
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model"
    ],
    "nemo.collections.nlp.data.spellchecking_asr_customization.SpellcheckingAsrCustomizationDataset": [
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model"
    ],
    "nemo.collections.nlp.data.spellchecking_asr_customization.bert_example": [
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.utils.read_label_map": [
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger"
    ],
    "nemo.collections.nlp.modules.common.token_classifier.TokenClassifier": [
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model",
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger"
    ],
    "nemo.collections.nlp.data.spellchecking_asr_customization.TarredSpellcheckingAsrCustomizationDataset": [
        "nemo.collections.nlp.models.spellchecking_asr_customization.spellchecking_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_export.EncEmb": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model"
    ],
    "nemo.collections.nlp.data.common.sequence_to_sequence_dataset.TextMemmapSequenceToSequenceDataset": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.data.language_modeling.megatron.xlm_dataset"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model.MegatronLMEncoderDecoderModel": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.xlm_dataset.TextMemmapCrossLingualMLMAndTranslationDataset": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model"
    ],
    "nemo.collections.nlp.data.common.sequence_to_sequence_dataset.BinarizedMemmapSequenceToSequenceDataset": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.data.language_modeling.megatron.xlm_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.xlm_dataset.BinarizedMemmapCrossLingualMLMAndTranslationDataset": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.GlobalBatchDataFetcher": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_export.DecEmb": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_export.TokensHeadEmb": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model"
    ],
    "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model.MTEncDecModel": [
        "nemo.collections.nlp.models.machine_translation.megatron_nmt_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_bottleneck_model"
    ],
    "nemo.collections.common.tokenizers.en_ja_tokenizers.JaMecabProcessor": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.common.tokenizers.indic_tokenizers.IndicProcessor": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.nlp.models.enc_dec_nlp_model.EncDecNLPModel": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.nlp.modules.common.transformer.TopKSequenceGenerator": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.common.losses.NLLLoss": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_bottleneck_model"
    ],
    "nemo.collections.common.tokenizers.bytelevel_tokenizers.ByteLevelProcessor": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.common.tokenizers.moses_tokenizers.MosesProcessor": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.data.text_normalization.tagger_dataset",
        "nemo.collections.nlp.data.text_normalization.decoder_dataset",
        "nemo.collections.nlp.data.text_normalization.test_dataset"
    ],
    "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config.MTEncDecModelConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.data.machine_translation.preproc_mt_data"
    ],
    "nemo.collections.nlp.modules.common.transformer.BeamSearchSequenceGenerator": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.common.tokenizers.en_ja_tokenizers.EnJaProcessor": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.nlp.data.TarredTranslationDataset": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.nlp.data.TranslationDataset": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.nlp.modules.common.lm_utils.get_transformer": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model",
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model"
    ],
    "nemo.collections.common.tokenizers.chinese_tokenizers.ChineseProcessor": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_model"
    ],
    "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config.MTBottleneckModelConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_bottleneck_model"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck.NeMoTransformerBottleneckDecoderConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config"
    ],
    "nemo.collections.nlp.data.machine_translation.machine_translation_dataset.TranslationDataConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config"
    ],
    "nemo.core.config.modelPT.SchedConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config"
    ],
    "nemo.collections.nlp.models.enc_dec_nlp_model.EncDecNLPModelConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config"
    ],
    "nemo.collections.nlp.modules.common.token_classifier.TokenClassifierConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer.NeMoTransformerConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config",
        "nemo.collections.nlp.modules.common.lm_utils",
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck"
    ],
    "nemo.core.config.modelPT.OptimConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck.NeMoTransformerBottleneckEncoderConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer.NeMoTransformerEncoderConfig": [
        "nemo.collections.nlp.models.machine_translation.mt_enc_dec_config"
    ],
    "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model.MegatronBertEmbeddingModel": [
        "nemo.collections.nlp.models.rag.custom_bert_embedder"
    ],
    "nemo.collections.nlp.data.BertInformationRetrievalDataset": [
        "nemo.collections.nlp.models.information_retrieval.base_ir_model",
        "nemo.collections.nlp.models.information_retrieval.bert_dpr_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_spec.bert_layer_with_transformer_engine_spec_postln": [
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model"
    ],
    "nemo.collections.nlp.models.information_retrieval.bert_embedding_model.NeMoBertEmbeddingModel": [
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model"
    ],
    "nemo.collections.nlp.data.information_retrieval.bert_embedding_dataset.BertEmbeddingDataset": [
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_bert_model.MegatronBertModel": [
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model",
        "nemo.collections.nlp.modules.common.lm_utils",
        "nemo.collections.nlp.modules.common.megatron.megatron_utils"
    ],
    "nemo.collections.nlp.models.information_retrieval.bert_embedding_model.MCoreBertEmbeddingModel": [
        "nemo.collections.nlp.models.information_retrieval.megatron_bert_embedding_model"
    ],
    "nemo.collections.nlp.data.information_retrieval.gpt_embedding_dataset.GPTRerankerDataset": [
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_reranker_model"
    ],
    "nemo.collections.nlp.models.information_retrieval.megatron_gpt_embedding_model.MegatronGPTEmbeddingModel": [
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_reranker_model"
    ],
    "nemo.collections.nlp.models.information_retrieval.megatron_gpt_embedding_model._gather_global_inbatch_representations": [
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_reranker_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model.MCoreBertModelWrapperWithPostLNSupport": [
        "nemo.collections.nlp.models.information_retrieval.bert_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model.NeMoBertModel": [
        "nemo.collections.nlp.models.information_retrieval.bert_embedding_model",
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model"
    ],
    "nemo.collections.nlp.data.information_retrieval.gpt_embedding_dataset.GPTEmbeddingDataset": [
        "nemo.collections.nlp.models.information_retrieval.megatron_gpt_embedding_model"
    ],
    "nemo.collections.nlp.models.information_retrieval.base_ir_model.BaseIRModel": [
        "nemo.collections.nlp.models.information_retrieval.bert_dpr_model",
        "nemo.collections.nlp.models.information_retrieval.bert_joint_ir_model"
    ],
    "nemo.collections.nlp.modules.common.SequenceRegression": [
        "nemo.collections.nlp.models.information_retrieval.bert_joint_ir_model",
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model"
    ],
    "nemo.collections.nlp.data.dialogue.dataset.dialogue_s2s_generation_dataset.DialogueS2SGenerationDataset": [
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model"
    ],
    "nemo.collections.nlp.data.dialogue.data_processor.ms_marco_data_processor.DialogueMSMarcoDataProcessor": [
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model"
    ],
    "nemo.collections.nlp.metrics.dialogue_metrics.DialogueGenerationMetrics": [
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model"
    ],
    "nemo.collections.nlp.data.dialogue.DialogueSGDDataProcessor": [
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model",
        "nemo.collections.nlp.models.dialogue.sgdqa_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model"
    ],
    "nemo.collections.nlp.data.dialogue.data_processor.mellon_qa_data_processor.DialogueMellonQADataProcessor": [
        "nemo.collections.nlp.models.dialogue.dialogue_s2s_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model"
    ],
    "nemo.collections.nlp.data.dialogue.dataset.dialogue_gpt_generation_dataset.DialogueGPTGenerationDataset": [
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model.MegatronGPTPromptLearningModel": [
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_generation_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.nlp.data.dialogue.data_processor.assistant_data_processor.DialogueAssistantDataProcessor": [
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model"
    ],
    "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset.DialogueIntentSlotInferenceDataset": [
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model"
    ],
    "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset.DialogueBERTDataset": [
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model"
    ],
    "nemo.collections.nlp.metrics.dialogue_metrics.DialogueClassificationMetrics": [
        "nemo.collections.nlp.models.dialogue.intent_slot_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model"
    ],
    "nemo.collections.nlp.modules.SGDEncoder": [
        "nemo.collections.nlp.models.dialogue.sgdqa_model"
    ],
    "nemo.collections.nlp.data.dialogue.sgd.prediction_utils.write_predictions_to_file": [
        "nemo.collections.nlp.models.dialogue.sgdqa_model"
    ],
    "nemo.collections.nlp.data.dialogue.DialogueSGDBERTDataset": [
        "nemo.collections.nlp.models.dialogue.sgdqa_model"
    ],
    "nemo.collections.nlp.modules.SGDDecoder": [
        "nemo.collections.nlp.models.dialogue.sgdqa_model"
    ],
    "nemo.collections.nlp.data.dialogue.sgd.evaluate.evaluate": [
        "nemo.collections.nlp.models.dialogue.sgdqa_model"
    ],
    "nemo.collections.nlp.losses.SGDDialogueStateLoss": [
        "nemo.collections.nlp.models.dialogue.sgdqa_model"
    ],
    "nemo.collections.nlp.data.dialogue.sgd.evaluate.get_in_domain_services": [
        "nemo.collections.nlp.models.dialogue.sgdqa_model"
    ],
    "nemo.collections.nlp.data.dialogue.DialogueGPTClassificationDataset": [
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model"
    ],
    "nemo.collections.nlp.data.dialogue.data_processor.design_data_processor.DialogueDesignDataProcessor": [
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model",
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model"
    ],
    "nemo.collections.nlp.modules.common.text_generation_utils.megatron_gpt_generate": [
        "nemo.collections.nlp.models.dialogue.dialogue_gpt_classification_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.collections.nlp.data.dialogue.dataset.dialogue_nearest_neighbour_dataset.DialogueNearestNeighbourDataset": [
        "nemo.collections.nlp.models.dialogue.dialogue_nearest_neighbour_model"
    ],
    "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset.DialogueZeroShotIntentDataset": [
        "nemo.collections.nlp.models.dialogue.dialogue_zero_shot_intent_model"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.ThutmoseTaggerTestDataset": [
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.utils.read_semiotic_classes": [
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.ThutmoseTaggerDataset": [
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.bert_example": [
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.tagging": [
        "nemo.collections.nlp.models.text_normalization_as_tagging.thutmose_tagger"
    ],
    "nemo.collections.common.metrics.Perplexity": [
        "nemo.collections.nlp.models.text2sparql.text2sparql_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model"
    ],
    "nemo.collections.nlp.data.text2sparql.Text2SparqlDataset": [
        "nemo.collections.nlp.models.text2sparql.text2sparql_model"
    ],
    "nemo.collections.nlp.models.glue_benchmark.metrics_for_glue.compute_metrics": [
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model"
    ],
    "nemo.collections.nlp.modules.common.SequenceClassifier": [
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.models.text_classification.text_classification_model",
        "nemo.collections.nlp.models.language_modeling.bert_lm_model"
    ],
    "nemo.collections.nlp.parts.utils_funcs.list2str": [
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset.GLUE_TASKS_NUM_LABELS": [
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model"
    ],
    "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset.GLUEDataset": [
        "nemo.collections.nlp.models.glue_benchmark.glue_benchmark_model",
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset"
    ],
    "nemo.collections.nlp.data.text_classification.calc_class_weights": [
        "nemo.collections.nlp.models.text_classification.text_classification_model"
    ],
    "nemo.collections.nlp.data.text_classification.TextClassificationDataset": [
        "nemo.collections.nlp.models.text_classification.text_classification_model"
    ],
    "nemo.collections.nlp.models.duplex_text_normalization.utils.has_numbers": [
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger"
    ],
    "nemo.collections.nlp.data.text_normalization.TextNormalizationTaggerDataset": [
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger"
    ],
    "nemo.collections.nlp.data.text_normalization.constants": [
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tagger",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tn",
        "nemo.collections.nlp.data.text_normalization.tagger_dataset",
        "nemo.collections.nlp.data.text_normalization.decoder_dataset",
        "nemo.collections.nlp.data.text_normalization.utils",
        "nemo.collections.nlp.data.text_normalization.test_dataset"
    ],
    "nemo.collections.nlp.models.duplex_text_normalization.utils.get_formatted_string": [
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tn"
    ],
    "nemo.collections.nlp.data.text_normalization.decoder_dataset.TarredTextNormalizationDecoderDataset": [
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder"
    ],
    "nemo.collections.nlp.data.text_normalization.TextNormalizationTestDataset": [
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder",
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tn"
    ],
    "nemo.collections.nlp.data.text_normalization.decoder_dataset.TextNormalizationDecoderDataset": [
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_decoder"
    ],
    "nemo.collections.nlp.data.text_normalization.utils.input_preprocessing": [
        "nemo.collections.nlp.models.duplex_text_normalization.duplex_tn"
    ],
    "nemo.collections.nlp.modules.common.transformer.TransformerDecoder": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_lexical_audio_model"
    ],
    "nemo.collections.common.losses.cross_entropy.CrossEntropyLoss": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_lexical_audio_model"
    ],
    "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model.PunctuationCapitalizationModel": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_lexical_audio_model"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.PunctuationCapitalizationTrainDataConfig": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_config"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset.BertPunctuationCapitalizationInferDataset": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset.BertPunctuationCapitalizationTarredDataset": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model"
    ],
    "nemo.collections.nlp.models.token_classification.punctuation_capitalization_config.legacy_model_config_to_new_model_config": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.load_label_ids": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.PunctuationCapitalizationEvalDataConfig": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_config"
    ],
    "nemo.collections.nlp.models.token_classification.punctuation_capitalization_config.is_legacy_model_config": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.BertPunctuationCapitalizationDataset": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.raise_not_equal_labels_error": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_model",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.legacy_data_config_to_new_data_config": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_config"
    ],
    "nemo.collections.common.parts.adapter_modules.LinearAdapterConfig": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_config",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.utils.exp_manager.ExpManagerConfig": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_config"
    ],
    "nemo.core.config.TrainerConfig": [
        "nemo.collections.nlp.models.token_classification.punctuation_capitalization_config"
    ],
    "nemo.collections.nlp.data.token_classification.token_classification_dataset.BertTokenClassificationInferDataset": [
        "nemo.collections.nlp.models.token_classification.token_classification_model"
    ],
    "nemo.collections.nlp.data.token_classification.token_classification_utils.get_label_ids": [
        "nemo.collections.nlp.models.token_classification.token_classification_model"
    ],
    "nemo.collections.nlp.parts.utils_funcs.plot_confusion_matrix": [
        "nemo.collections.nlp.models.token_classification.token_classification_model"
    ],
    "nemo.collections.nlp.data.token_classification.token_classification_dataset.BertTokenClassificationDataset": [
        "nemo.collections.nlp.models.token_classification.token_classification_model"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.get_labels_to_labels_id_mapping": [
        "nemo.collections.nlp.models.token_classification.token_classification_model",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_descriptor"
    ],
    "nemo.collections.nlp.parts.utils_funcs.get_classification_report": [
        "nemo.collections.nlp.models.token_classification.token_classification_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_griffin_model.MegatronGriffinModel": [
        "nemo.collections.nlp.models.language_modeling.megatron_griffin_sft_model",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.nlp.data.language_modeling.lm_bert_dataset.BertPretrainingDataset": [
        "nemo.collections.nlp.models.language_modeling.bert_lm_model"
    ],
    "nemo.collections.nlp.modules.common.BertPretrainingTokenClassifier": [
        "nemo.collections.nlp.models.language_modeling.bert_lm_model"
    ],
    "nemo.collections.nlp.data.language_modeling.lm_bert_dataset.BertPretrainingPreprocessedDataloader": [
        "nemo.collections.nlp.models.language_modeling.bert_lm_model"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.GradScaler": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_base_model",
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_prompt_learning_dataset.GPTPromptLearningDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_base_prompt_learning_model.MegatronBasePromptLearningModel": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_prompt_learning_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.mup.shape.set_base_shapes": [
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.mup.init.normal_": [
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy.build_train_valid_test_datasets": [
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model"
    ],
    "nemo.collections.nlp.modules.common.text_generation_strategy.model_inference_strategy_dispatcher": [
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model",
        "nemo.collections.nlp.modules.common.text_generation_utils"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder.MegatronRetrievalTokenLevelEncoderDecoderModule": [
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy.build_mock_train_valid_test_datasets": [
        "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_retrieval_model.MegatronRetrievalModel": [
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.base_dataset_utils.get_train_valid_test_split_": [
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.retro_fine_tune_dataset.RetroQAFineTuneDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model"
    ],
    "nemo.collections.nlp.data.common.sequence_to_sequence_dataset.SequenceToSequenceDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model"
    ],
    "nemo.collections.common.metrics.classification_accuracy.ExactStringPerCategoryMatchMetric": [
        "nemo.collections.nlp.models.language_modeling.megatron_retro_fine_tune_model",
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.t5_prompt_learning_dataset.T5PromptLearningDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_fim_dataset.GPTFIMDatasetConfig": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset.build_train_valid_test_datasets": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_fim_dataset.GPTFIMDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.gemma2.gemma2_spec.get_gemma2_layer_spec": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.falcon.falcon_spec.get_falcon_layer_spec": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.gpt_layer_modelopt_spec.get_gpt_layer_modelopt_spec": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.nlp.modules.common.text_generation_strategy.TextGenerationStrategy": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model",
        "nemo.collections.nlp.modules.common.retro_inference_strategies"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.gemma2.gemma2_modules.Gemma2OutputLayer": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.common.parts.utils.apply_rope_scaling": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.data_samplers.MegatronCorePretrainingSampler": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_model"
    ],
    "nemo.collections.nlp.data.language_modeling.t0_dataset.T0Dataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_t0_model"
    ],
    "nemo.collections.nlp.metrics.SequencePerplexity": [
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model"
    ],
    "nemo.collections.nlp.data.TarredSentenceDataset": [
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model"
    ],
    "nemo.collections.nlp.data.SentenceDataset": [
        "nemo.collections.nlp.models.language_modeling.transformer_lm_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils.build_train_valid_test_datasets": [
        "nemo.collections.nlp.models.language_modeling.megatron_t5_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraKQVAdapterConfig": [
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.attention",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraQAdapterConfig": [
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.modules.common.megatron.attention"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.InfusedAdapterConfig": [
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.attention",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_t5_prompt_learning_model.MegatronT5PromptLearningModel": [
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.MLPInfusedAdapterConfig": [
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_adapter_model",
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraKVAdapterConfig": [
        "nemo.collections.nlp.models.language_modeling.megatron_t5_adapter_model",
        "nemo.collections.nlp.modules.common.megatron.attention"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.t5_sft_dataset.T5SFTDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_t5_sft_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_chat_dataset.GPTSFTChatDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_dataset.GPTSFTPackedDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_dataset.GPTSFTDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_gpt_sft_model",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_chat_dataset"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_model.GriffinModel": [
        "nemo.collections.nlp.models.language_modeling.megatron_griffin_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils": [
        "nemo.collections.nlp.models.language_modeling.megatron_bert_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_mamba_model.MegatronMambaModel": [
        "nemo.collections.nlp.models.language_modeling.megatron_mamba_sft_model",
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_init.initialize_model_parallel_for_nemo": [
        "nemo.collections.nlp.models.language_modeling.megatron_base_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.attention.HAVE_FLASH_ATTENTION": [
        "nemo.collections.nlp.models.language_modeling.megatron_base_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.clip_grads.clip_grad_norm_distributed_optimizer": [
        "nemo.collections.nlp.models.language_modeling.megatron_base_model"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.NEMO_MEGATRON_MODEL_PARALLEL_APPSTATE_OVERRIDE": [
        "nemo.collections.nlp.models.language_modeling.megatron_base_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.clip_grads.clip_grad_norm_fp32": [
        "nemo.collections.nlp.models.language_modeling.megatron_base_model"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset.build_train_valid_test_datasets": [
        "nemo.collections.nlp.models.language_modeling.megatron_retro_model"
    ],
    "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset.TextToTextGLUEDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_glue_model"
    ],
    "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset.TextToTextXNLIDataset": [
        "nemo.collections.nlp.models.language_modeling.megatron_glue_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder.MegatronTokenLevelEncoderDecoderModule": [
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.collections.nlp.modules.common.text_generation_utils.get_sampling_token_fn": [
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.collections.nlp.modules.common.text_generation_utils.compute_beam_search_len_penalty": [
        "nemo.collections.nlp.models.language_modeling.megatron_lm_encoder_decoder_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.parallel_lm_logits": [
        "nemo.collections.nlp.models.language_modeling.megatron.gpt_model",
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.mup.layer"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.gemma2.gemma2_modules.TERowParallelLinearLayerNorm": [
        "nemo.collections.nlp.models.language_modeling.megatron.gemma2.gemma2_spec"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.gemma2.gemma2_modules.Gemma2DotProductAttention": [
        "nemo.collections.nlp.models.language_modeling.megatron.gemma2.gemma2_spec"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.recurrent_layer.RecurrentBlock": [
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_layer_spec"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.recurrent_module.RGLRU": [
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_layer_spec"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.recurrent_layer.RecurrentBlockSubmodules": [
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_layer_spec"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.recurrent_module.RecurrentLayer": [
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_layer_spec"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.recurrent_module.RecurrentLayerSubmodules": [
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_layer_spec"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.recurrent_module.Conv1D": [
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_layer_spec"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_block.GriffinStack": [
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_model"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_layer_spec.griffin_recurrent_layer_with_transformer_engine_spec": [
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_block"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_layer_spec.griffin_mqa_layer_with_transformer_engine_spec": [
        "nemo.collections.nlp.models.language_modeling.megatron.griffin.griffin_block"
    ],
    "nemo.collections.nlp.modules.common.megatron.transformer.get_layer_norm": [
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.erf_gelu": [
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.parts.utils_funcs",
        "nemo.collections.nlp.modules.common.megatron.mlp"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.openai_gelu": [
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model",
        "nemo.collections.nlp.parts.utils_funcs",
        "nemo.collections.nlp.modules.common.megatron.mlp"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model.TransformerLayerSubmodulesWithPostLNSupport": [
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_spec"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_model.TransformerLayerWithPostLNSupport": [
        "nemo.collections.nlp.models.language_modeling.megatron.bert.bert_spec"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.squared_relu": [
        "nemo.collections.nlp.parts.utils_funcs",
        "nemo.collections.nlp.modules.common.megatron.mlp"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.MegatronHalfPrecisionPlugin": [
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.utils.callbacks.dist_ckpt_io.DistributedCheckpointIO": [
        "nemo.collections.nlp.parts.megatron_trainer_builder",
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.FSDPMixedPrecisionPlugin": [
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.CustomProgressBar": [
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.NLPDDPStrategyNotebook": [
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.collections.common.metrics.perf_metrics.FLOPsMeasurementCallback": [
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.collections.nlp.parts.nlp_overrides.PipelineMixedPrecisionPlugin": [
        "nemo.collections.nlp.parts.megatron_trainer_builder"
    ],
    "nemo.collections.nlp.modules.common.megatron.transformer.AutocastTransformerLayer": [
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.collections.nlp.modules.common.megatron.transformer.ParallelTransformerLayer": [
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.collections.multimodal.modules.stable_diffusion.attention.BasicTransformerBlock": [
        "nemo.collections.nlp.parts.nlp_overrides"
    ],
    "nemo.core.optim.lr_scheduler.AVAILABLE_SCHEDULERS": [
        "nemo.collections.nlp.parts.megatron_lr_schedulers"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.MLPHeadAdapterConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins.MCoreTransformerBlockMixin": [
        "nemo.collections.nlp.parts.peft_config"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins.MCoreTransformerLayerMixin": [
        "nemo.collections.nlp.parts.peft_config"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.Lora4HtoHAdapterConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins.MCoreGPTEmbeddingMixin": [
        "nemo.collections.nlp.parts.peft_config"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraDenseAttentionAdapterConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.attention",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraUnfusedHto4HAdapterConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins.MCoreSelfAttentionMixin": [
        "nemo.collections.nlp.parts.peft_config"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraHto4HAdapterConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins.MCoreMLPMixin": [
        "nemo.collections.nlp.parts.peft_config"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraKQVAdapterWeightTyingConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.attention"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraMoe4HtoHAdapterConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.PromptEncoderAdapterConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins",
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraMoeHto4HAdapterConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.ParallelLinearAdapterWeightTyingConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins.MCoreSequentialMLPMixin": [
        "nemo.collections.nlp.parts.peft_config"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters.LoraUnfusedKQVAdapterConfig": [
        "nemo.collections.nlp.parts.peft_config",
        "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins"
    ],
    "nemo.collections.nlp.parts.peft_config.PtuningPEFTConfig": [
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.mcore_mixins.swap_mcore_mixin": [
        "nemo.collections.nlp.parts.mixins.multimodal_adapter_mixins",
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.collections.nlp.parts.peft_config.CanonicalAdaptersPEFTConfig": [
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.collections.nlp.parts.peft_config.LoraPEFTConfig": [
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.collections.nlp.modules.common.megatron.adapters.qlora.qlora_load_model": [
        "nemo.collections.nlp.parts.mixins.nlp_adapter_mixins"
    ],
    "nemo.collections.nlp.modules.common.classifier.Classifier": [
        "nemo.collections.nlp.modules.common.sequence_classifier",
        "nemo.collections.nlp.modules.common.sequence_regression",
        "nemo.collections.nlp.modules.common.sequence_token_classifier",
        "nemo.collections.nlp.modules.common.token_classifier",
        "nemo.collections.nlp.modules.dialogue_state_tracking.sgd_encoder"
    ],
    "nemo.collections.nlp.modules.common.retro_inference_strategies.RetroModelTextGenerationStrategy": [
        "nemo.collections.nlp.modules.common.text_generation_strategy",
        "nemo.collections.nlp.modules.common.text_generation_server"
    ],
    "nemo.collections.common.tokenizers.chat_template_mixin.is_chat_input": [
        "nemo.collections.nlp.modules.common.text_generation_strategy",
        "nemo.collections.speechlm.utils.text_generation.audio_text_generation_strategy"
    ],
    "nemo.collections.nlp.modules.common.lm_utils.pad_batch": [
        "nemo.collections.nlp.modules.common.text_generation_strategy",
        "nemo.collections.nlp.modules.common.retro_inference_strategies"
    ],
    "nemo.collections.common.tokenizers.chat_template_mixin.explode_chat_template_input": [
        "nemo.collections.nlp.modules.common.text_generation_strategy",
        "nemo.collections.speechlm.utils.text_generation.audio_text_generation_strategy"
    ],
    "nemo.collections.nlp.modules.common.retro_inference_strategies.RetroQAModelTextGenerationStrategy": [
        "nemo.collections.nlp.modules.common.text_generation_strategy",
        "nemo.collections.nlp.modules.common.text_generation_server"
    ],
    "nemo.collections.nlp.models.language_modeling.megatron_retro_model.MegatronRetroModel": [
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.nlp.modules.common.retro_inference_strategies.RetroFileQAModelTextGenerationStrategy": [
        "nemo.collections.nlp.modules.common.text_generation_strategy"
    ],
    "nemo.collections.common.tokenizers.bytelevel_tokenizers.ByteLevelTokenizer": [
        "nemo.collections.nlp.modules.common.tokenizer_utils"
    ],
    "nemo.collections.common.tokenizers.word_tokenizer.WordTokenizer": [
        "nemo.collections.nlp.modules.common.tokenizer_utils"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_utils.get_megatron_tokenizer": [
        "nemo.collections.nlp.modules.common.tokenizer_utils"
    ],
    "nemo.collections.common.tokenizers.null_tokenizer.NullTokenizer": [
        "nemo.collections.nlp.modules.common.tokenizer_utils"
    ],
    "nemo.collections.common.tokenizers.tiktoken_tokenizer.TiktokenTokenizer": [
        "nemo.collections.nlp.modules.common.tokenizer_utils"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_utils.get_megatron_merges_file": [
        "nemo.collections.nlp.modules.common.tokenizer_utils"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_utils.get_megatron_vocab_file": [
        "nemo.collections.nlp.modules.common.tokenizer_utils"
    ],
    "nemo.collections.common.tokenizers.regex_tokenizer.RegExTokenizer": [
        "nemo.collections.nlp.modules.common.tokenizer_utils"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_chat_dataset._get_header_conversation_type_mask_role": [
        "nemo.collections.nlp.modules.common.text_generation_server"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_chat_dataset.get_prompt_template_example": [
        "nemo.collections.nlp.modules.common.text_generation_server"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_services.retrieval_service.ComboRetrievalService": [
        "nemo.collections.nlp.modules.common.retro_inference_strategies"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_bias_gelu.fused_bias_gelu": [
        "nemo.collections.nlp.modules.common.prompt_encoder",
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_utils.get_nemo_transformer": [
        "nemo.collections.nlp.modules.common.lm_utils"
    ],
    "nemo.collections.nlp.modules.common.huggingface.huggingface_utils.get_huggingface_pretrained_lm_models_list": [
        "nemo.collections.nlp.modules.common.lm_utils",
        "nemo.collections.nlp.modules.common.huggingface.huggingface_encoder",
        "nemo.collections.nlp.modules.common.huggingface.huggingface_decoder"
    ],
    "nemo.collections.nlp.modules.common.bert_module.BertModule": [
        "nemo.collections.nlp.modules.common.lm_utils",
        "nemo.collections.nlp.modules.common.huggingface.camembert",
        "nemo.collections.nlp.modules.common.huggingface.roberta",
        "nemo.collections.nlp.modules.common.huggingface.distilbert",
        "nemo.collections.nlp.modules.common.huggingface.albert",
        "nemo.collections.nlp.modules.common.huggingface.bert"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_utils.get_huggingface_transformer": [
        "nemo.collections.nlp.modules.common.lm_utils"
    ],
    "nemo.collections.nlp.modules.common.huggingface.huggingface_utils.get_huggingface_lm_model": [
        "nemo.collections.nlp.modules.common.lm_utils"
    ],
    "nemo.collections.nlp.modules.common.chat_css.CSS": [
        "nemo.collections.nlp.modules.common.megatron_web_server"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_services.util.request_data": [
        "nemo.collections.nlp.modules.common.megatron_web_server",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.static_retrieval_server",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.dynamic_retrieval_server",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.retrieval_service"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_services.util.convert_retrieved_to_md": [
        "nemo.collections.nlp.modules.common.megatron_web_server"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_services.util.text_generation": [
        "nemo.collections.nlp.modules.common.megatron_web_server"
    ],
    "nemo.collections.nlp.modules.common.chatbot_component.Chatbot": [
        "nemo.collections.nlp.modules.common.megatron_web_server"
    ],
    "nemo.core.neural_types.IntType": [
        "nemo.collections.nlp.modules.common.gpt_module",
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset",
        "nemo.collections.nlp.data.text_normalization_as_tagging.thutmose_tagger_dataset"
    ],
    "nemo.core.neural_types.StringType": [
        "nemo.collections.nlp.modules.common.gpt_module",
        "nemo.collections.nlp.data.text_classification.ptune_text_classification_dataset"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_modules.MultiHeadAttention": [
        "nemo.collections.nlp.modules.common.transformer.transformer_encoders",
        "nemo.collections.nlp.modules.common.transformer.transformer_decoders"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_modules.PositionWiseFF": [
        "nemo.collections.nlp.modules.common.transformer.transformer_encoders",
        "nemo.collections.nlp.modules.common.transformer.transformer_decoders"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer.TransformerDecoderNM": [
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck",
        "nemo.collections.nlp.modules.common.transformer.transformer_utils"
    ],
    "nemo.collections.nlp.modules.common.transformer.perceiver_encoders.PerceiverEncoder": [
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer.TransformerEncoderNM": [
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck",
        "nemo.collections.nlp.modules.common.transformer.transformer_utils"
    ],
    "nemo.collections.nlp.modules.common.transformer.reduction_encoders.PoolingEncoder": [
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck"
    ],
    "nemo.collections.nlp.modules.common.transformer.bridge_encoders.BridgeEncoder": [
        "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck"
    ],
    "nemo.collections.nlp.modules.common.huggingface.huggingface_decoder.HuggingFaceDecoderModule": [
        "nemo.collections.nlp.modules.common.transformer.transformer_utils"
    ],
    "nemo.collections.nlp.modules.common.huggingface.huggingface_encoder.HuggingFaceEncoderModule": [
        "nemo.collections.nlp.modules.common.transformer.transformer_utils"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_bottleneck.TransformerBottleneckEncoderNM": [
        "nemo.collections.nlp.modules.common.transformer.transformer_utils"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_encoders.TransformerEncoder": [
        "nemo.collections.nlp.modules.common.transformer.perceiver_encoders",
        "nemo.collections.nlp.modules.common.transformer.bridge_encoders",
        "nemo.collections.nlp.modules.common.transformer.transformer",
        "nemo.collections.nlp.modules.common.transformer.reduction_encoders"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_modules.AttentionBridge": [
        "nemo.collections.nlp.modules.common.transformer.perceiver_encoders",
        "nemo.collections.nlp.modules.common.transformer.bridge_encoders"
    ],
    "nemo.collections.nlp.modules.common.transformer.transformer_modules.TransformerEmbedding": [
        "nemo.collections.nlp.modules.common.transformer.transformer"
    ],
    "nemo.collections.nlp.modules.common.hyena.hyena_filter.HyenaFilterSubmodules": [
        "nemo.collections.nlp.modules.common.hyena.hyena",
        "nemo.collections.nlp.modules.common.hyena.hyena_spec"
    ],
    "nemo.collections.nlp.modules.common.hyena.hyena_filter.HyenaFilter": [
        "nemo.collections.nlp.modules.common.hyena.hyena",
        "nemo.collections.nlp.modules.common.hyena.hyena_spec"
    ],
    "nemo.collections.nlp.modules.common.hyena.fftconv_wrapper.fftconv_func": [
        "nemo.collections.nlp.modules.common.hyena.hyena"
    ],
    "nemo.collections.nlp.modules.common.hyena.hyena_filter.ExponentialModulation": [
        "nemo.collections.nlp.modules.common.hyena.hyena_spec"
    ],
    "nemo.collections.nlp.modules.common.hyena.hyena.CausalDepthWiseConv1d": [
        "nemo.collections.nlp.modules.common.hyena.hyena_spec"
    ],
    "nemo.collections.nlp.modules.common.hyena.hyena.HyenaOperator": [
        "nemo.collections.nlp.modules.common.hyena.hyena_spec"
    ],
    "nemo.collections.nlp.modules.common.hyena.hyena_filter.PositionalEmbedding": [
        "nemo.collections.nlp.modules.common.hyena.hyena_spec"
    ],
    "nemo.collections.nlp.modules.common.hyena.hyena_filter.Sin": [
        "nemo.collections.nlp.modules.common.hyena.hyena_spec"
    ],
    "nemo.collections.nlp.modules.common.hyena.hyena.HyenaOperatorSubmodules": [
        "nemo.collections.nlp.modules.common.hyena.hyena_spec"
    ],
    "nemo.collections.nlp.modules.common.gpt_module.GPTModule": [
        "nemo.collections.nlp.modules.common.huggingface.gpt2"
    ],
    "nemo.collections.nlp.modules.common.huggingface.gpt2.GPT2Encoder": [
        "nemo.collections.nlp.modules.common.huggingface.huggingface_utils"
    ],
    "nemo.collections.nlp.modules.common.huggingface.albert.AlbertEncoder": [
        "nemo.collections.nlp.modules.common.huggingface.huggingface_utils"
    ],
    "nemo.collections.nlp.modules.common.huggingface.camembert.CamembertEncoder": [
        "nemo.collections.nlp.modules.common.huggingface.huggingface_utils"
    ],
    "nemo.collections.nlp.modules.common.huggingface.roberta.RobertaEncoder": [
        "nemo.collections.nlp.modules.common.huggingface.huggingface_utils"
    ],
    "nemo.collections.nlp.modules.common.huggingface.bert.BertEncoder": [
        "nemo.collections.nlp.modules.common.huggingface.huggingface_utils"
    ],
    "nemo.collections.nlp.modules.common.huggingface.distilbert.DistilBertEncoder": [
        "nemo.collections.nlp.modules.common.huggingface.huggingface_utils"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_transformer_decoder.MegatronTransformerDecoderModule": [
        "nemo.collections.nlp.modules.common.megatron.megatron_decoders"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_transformer.MegatronRetrievalTransformerDecoderModule": [
        "nemo.collections.nlp.modules.common.megatron.megatron_decoders"
    ],
    "nemo.collections.nlp.modules.common.megatron.position_embedding.ALiBiRelativePositionEmbedding": [
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.position_embedding.RotaryEmbedding": [
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.retrieval_transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.position_embedding.SandwichRelativePositionEmbedding": [
        "nemo.collections.nlp.modules.common.megatron.language_model"
    ],
    "nemo.collections.nlp.modules.common.megatron.position_embedding.KERPLERelativePositionEmbedding": [
        "nemo.collections.nlp.modules.common.megatron.language_model",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.position_embedding.rotary_position_embedding.apply_rotary_pos_emb": [
        "nemo.collections.nlp.modules.common.megatron.attention"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils._cast_if_autocast_enabled": [
        "nemo.collections.nlp.modules.common.megatron.attention",
        "nemo.collections.nlp.modules.common.megatron.layer_norm_1p"
    ],
    "nemo.collections.nlp.modules.common.megatron.position_embedding.XPOSPositionEmbedding": [
        "nemo.collections.nlp.modules.common.megatron.attention"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.attention_mask_func": [
        "nemo.collections.nlp.modules.common.megatron.attention"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.attn_mask_postprocess": [
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_decoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_perceiver_encoders"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_decoder_module.MegatronDecoderModule": [
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.build_attention_mask_3d": [
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_decoder",
        "nemo.collections.nlp.modules.common.megatron.retrieval_transformer",
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder",
        "nemo.collections.nlp.modules.common.megatron.megatron_perceiver_encoders"
    ],
    "nemo.collections.nlp.modules.common.megatron.mup.layer.MuReadout": [
        "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.mup.shape"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_decoders.get_decoder_model": [
        "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_encoders.get_encoder_model": [
        "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.language_model.Embedding": [
        "nemo.collections.nlp.modules.common.megatron.retrieval_token_level_encoder_decoder",
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_transformer.MegatronRetrievalTransformerEncoderModule": [
        "nemo.collections.nlp.modules.common.megatron.megatron_encoders"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_perceiver_encoders.MegatronPerceiverEncoderModule": [
        "nemo.collections.nlp.modules.common.megatron.megatron_encoders",
        "nemo.collections.nlp.modules.common.megatron.megatron_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder.MegatronTransformerEncoderModule": [
        "nemo.collections.nlp.modules.common.megatron.megatron_encoders"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder.MultiMegatronTransformerEncoderModule": [
        "nemo.collections.nlp.modules.common.megatron.megatron_encoders"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_encoder_module.MegatronEncoderModule": [
        "nemo.collections.nlp.modules.common.megatron.megatron_transformer_encoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.hiddens.MegatronHiddensModule": [
        "nemo.collections.nlp.modules.common.megatron.megatron_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.layer_norm_1p.LayerNorm1P": [
        "nemo.collections.nlp.modules.common.megatron.mlp",
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_bias_geglu.fused_bias_geglu": [
        "nemo.collections.nlp.modules.common.megatron.mlp"
    ],
    "nemo.collections.nlp.modules.common.megatron.alibi_relative_position_embedding.build_relative_position": [
        "nemo.collections.nlp.modules.common.megatron.kerple_relative_position_embedding"
    ],
    "nemo.collections.nlp.modules.common.megatron.alibi_relative_position_embedding.build_slopes": [
        "nemo.collections.nlp.modules.common.megatron.kerple_relative_position_embedding"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_bias_dropout_add.dropout_add": [
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.mlp.ParallelMLP": [
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_bias_dropout_add.bias_dropout_add_fused_inference": [
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.attention.ParallelAttention": [
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.mlp.SwitchMLP": [
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.layer_norm_1p.LPLayerNorm": [
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_bias_dropout_add.bias_dropout_add": [
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.attention.ParallelChunkedCrossAttention": [
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_bias_dropout_add.bias_dropout_add_fused_train": [
        "nemo.collections.nlp.modules.common.megatron.transformer"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_bias_gelu.bias_gelu_back": [
        "nemo.collections.nlp.modules.common.megatron.fused_bias_geglu"
    ],
    "nemo.collections.nlp.modules.common.megatron.fused_bias_gelu.bias_gelu": [
        "nemo.collections.nlp.modules.common.megatron.fused_bias_geglu"
    ],
    "nemo.collections.nlp.modules.common.megatron.position_embedding.T5RelativePositionEmbedding": [
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.vocab_parallel_cross_entropy.vocab_parallel_cross_entropy": [
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.hiddens.get_hiddens_module": [
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.modules.common.megatron.megatron_encoder_decoder.MegatronTransformerEncoderDecoderModule": [
        "nemo.collections.nlp.modules.common.megatron.token_level_encoder_decoder"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.indexed_retrieval_dataset.MMapRetrievalIndexedDataset": [
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.static_retrieval_server",
        "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_services.util.lock": [
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.static_retrieval_server",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.dynamic_retrieval_server",
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.combo_retrieval_server"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_services.static_retrieval_server.FaissRetrievalResource": [
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.dynamic_retrieval_server"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_services.retrieval_service.DynamicFaissRetrievalService": [
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.combo_retrieval_server"
    ],
    "nemo.collections.nlp.modules.common.megatron.retrieval_services.retrieval_service.FaissRetrievalService": [
        "nemo.collections.nlp.modules.common.megatron.retrieval_services.combo_retrieval_server"
    ],
    "nemo.collections.nlp.modules.common.megatron.mup.layer.rescale_linear_bias": [
        "nemo.collections.nlp.modules.common.megatron.mup.shape"
    ],
    "nemo.collections.nlp.modules.common.megatron.mup.infshape.InfShape": [
        "nemo.collections.nlp.modules.common.megatron.mup.shape"
    ],
    "nemo.collections.nlp.modules.common.megatron.mup.infshape.zip_infshape": [
        "nemo.collections.nlp.modules.common.megatron.mup.shape"
    ],
    "nemo.collections.nlp.parts.peft_config.LORA_CONFIG_TO_MCORE_MAP": [
        "nemo.collections.nlp.modules.common.megatron.adapters.qlora"
    ],
    "nemo.collections.nlp.parts.peft_config.get_target_modules": [
        "nemo.collections.nlp.modules.common.megatron.adapters.qlora"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.init_method_const": [
        "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters"
    ],
    "nemo.collections.nlp.modules.common.megatron.utils.init_method_kaiming_uniform": [
        "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters"
    ],
    "nemo.core.classes.mixins.adapter_mixins.AdapterConfig": [
        "nemo.collections.nlp.modules.common.megatron.adapters.parallel_adapters"
    ],
    "nemo.collections.nlp.modules.common.megatron.position_embedding.alibi_relative_position_embedding.build_slopes": [
        "nemo.collections.nlp.modules.common.megatron.position_embedding.kerple_relative_position_embedding"
    ],
    "nemo.collections.nlp.modules.common.megatron.position_embedding.alibi_relative_position_embedding.build_relative_position": [
        "nemo.collections.nlp.modules.common.megatron.position_embedding.kerple_relative_position_embedding",
        "nemo.collections.nlp.modules.common.megatron.position_embedding.sandwich_relative_position_embedding"
    ],
    "nemo.collections.nlp.modules.common.megatron.hiddens.megatron_hidden_transform.MegatronBaseHiddenTransform": [
        "nemo.collections.nlp.modules.common.megatron.hiddens.megatron_hiddens"
    ],
    "nemo.collections.nlp.modules.common.megatron.hiddens.megatron_hidden_loss.MegatronBaseHiddenLoss": [
        "nemo.collections.nlp.modules.common.megatron.hiddens.megatron_hiddens"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.DataProcessor": [
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.dialogue.data_processor.data_processor",
        "nemo.collections.nlp.data.glue_benchmark.data_processors"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.get_freq_weights": [
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_descriptor",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_descriptor",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_utils"
    ],
    "nemo.core.neural_types.CategoricalValuesType": [
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset",
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.fill_class_weights": [
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_descriptor",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_descriptor",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_utils"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.InputExample": [
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_zero_shot_intent_dataset"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.get_label_stats": [
        "nemo.collections.nlp.data.zero_shot_intent_recognition.zero_shot_intent_dataset",
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_descriptor",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_descriptor",
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_utils"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.find_newlines": [
        "nemo.collections.nlp.data.entity_linking.entity_linking_dataset",
        "nemo.collections.nlp.data.language_modeling.lm_bert_dataset"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.load_data_indices": [
        "nemo.collections.nlp.data.entity_linking.entity_linking_dataset",
        "nemo.collections.nlp.data.language_modeling.lm_bert_dataset"
    ],
    "nemo.collections.nlp.data.question_answering.dataset.qa_dataset.QADataset": [
        "nemo.collections.nlp.data.question_answering.dataset.qa_bert_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_s2s_dataset",
        "nemo.collections.nlp.data.question_answering.dataset.qa_gpt_dataset"
    ],
    "nemo.collections.nlp.data.question_answering.input_example.qa_bert_input_example.BERTQAInputExample": [
        "nemo.collections.nlp.data.question_answering.dataset.qa_bert_dataset"
    ],
    "nemo.collections.nlp.data.question_answering.input_example.qa_s2s_input_example.S2SQAInputExample": [
        "nemo.collections.nlp.data.question_answering.dataset.qa_s2s_dataset"
    ],
    "nemo.collections.nlp.data.question_answering.input_example.qa_gpt_input_example.GPTQAInputExample": [
        "nemo.collections.nlp.data.question_answering.dataset.qa_gpt_dataset"
    ],
    "nemo.collections.nlp.data.data_utils.is_whitespace": [
        "nemo.collections.nlp.data.question_answering.dataset.qa_dataset",
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering.input_example.qa_input_example.QAExample": [
        "nemo.collections.nlp.data.question_answering.data_processor.qa_processing"
    ],
    "nemo.collections.nlp.data.data_utils.DataProcessor": [
        "nemo.collections.nlp.data.question_answering.data_processor.qa_processing",
        "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing"
    ],
    "nemo.collections.nlp.data.data_utils.get_stats": [
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset"
    ],
    "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_dataset.get_features": [
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_dataset"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.get_multi_label_stats": [
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_descriptor"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.get_freq_weights_bce_with_logits_loss": [
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_descriptor"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.if_exist": [
        "nemo.collections.nlp.data.intent_slot_classification.multi_label_intent_slot_classification_descriptor",
        "nemo.collections.nlp.data.intent_slot_classification.intent_slot_classification_descriptor"
    ],
    "nemo.core.classes.dataset.Dataset": [
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset",
        "nemo.collections.nlp.data.text_normalization_as_tagging.thutmose_tagger_dataset"
    ],
    "nemo.collections.nlp.data.spellchecking_asr_customization.bert_example.BertExampleBuilder": [
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset"
    ],
    "nemo.core.classes.dataset.IterableDataset": [
        "nemo.collections.nlp.data.spellchecking_asr_customization.dataset"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.dataset_to_ids": [
        "nemo.collections.nlp.data.machine_translation.machine_translation_dataset",
        "nemo.collections.nlp.data.language_modeling.sentence_dataset"
    ],
    "nemo.core.Dataset": [
        "nemo.collections.nlp.data.machine_translation.machine_translation_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset",
        "nemo.collections.nlp.data.language_modeling.text_memmap_dataset",
        "nemo.collections.nlp.data.language_modeling.sentence_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_fine_tune_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.base_prompt_learning_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_prompt_learning_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy"
    ],
    "nemo.collections.nlp.data.machine_translation.machine_translation_dataset.TranslationDataset": [
        "nemo.collections.nlp.data.machine_translation.preproc_mt_data"
    ],
    "nemo.collections.nlp.data.language_modeling.sentence_dataset.SentenceDataset": [
        "nemo.collections.nlp.data.machine_translation.preproc_mt_data"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils.get_samples_mapping": [
        "nemo.collections.nlp.data.information_retrieval.bert_embedding_dataset",
        "nemo.collections.nlp.data.information_retrieval.gpt_embedding_dataset",
        "nemo.collections.nlp.data.common.sequence_to_sequence_dataset",
        "nemo.collections.nlp.data.language_modeling.t0_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_fine_tune_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.bert_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.bart_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.text_memmap_dataset.JSONLMemMapDataset": [
        "nemo.collections.nlp.data.information_retrieval.bert_embedding_dataset",
        "nemo.collections.nlp.data.information_retrieval.gpt_embedding_dataset",
        "nemo.collections.nlp.data.language_modeling.t0_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_fine_tune_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_sft_dataset"
    ],
    "nemo.collections.nlp.data.dialogue.dataset.dialogue_dataset.DialogueDataset": [
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_nearest_neighbour_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_gpt_classification_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_gpt_generation_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_bert_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_s2s_generation_dataset",
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_sgd_bert_dataset"
    ],
    "nemo.collections.nlp.data.dialogue.input_example.sgd_input_example.SGDInputExample": [
        "nemo.collections.nlp.data.dialogue.dataset.dialogue_sgd_bert_dataset"
    ],
    "nemo.collections.nlp.data.dialogue.input_example.input_example.DialogueInputExample": [
        "nemo.collections.nlp.data.dialogue.input_example.design_input_example",
        "nemo.collections.nlp.data.dialogue.input_example.assistant_input_example",
        "nemo.collections.nlp.data.dialogue.input_example.ms_marco_input_example",
        "nemo.collections.nlp.data.dialogue.input_example.mellon_qa_input_example",
        "nemo.collections.nlp.data.dialogue.input_example.sgd_input_example",
        "nemo.collections.nlp.data.dialogue.data_processor.design_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.sgd_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.ms_marco_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.assistant_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.mellon_qa_data_processor"
    ],
    "nemo.collections.nlp.data.dialogue.data_processor.data_processor.DialogueDataProcessor": [
        "nemo.collections.nlp.data.dialogue.data_processor.design_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.sgd_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.ms_marco_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.assistant_data_processor",
        "nemo.collections.nlp.data.dialogue.data_processor.mellon_qa_data_processor"
    ],
    "nemo.collections.nlp.data.dialogue.sgd.schema.Schema": [
        "nemo.collections.nlp.data.dialogue.data_processor.sgd_data_processor"
    ],
    "nemo.collections.nlp.data.dialogue.input_example.sgd_input_example.STR_DONTCARE": [
        "nemo.collections.nlp.data.dialogue.sgd.prediction_utils"
    ],
    "nemo.collections.nlp.data.dialogue.input_example.sgd_input_example.STATUS_DONTCARE": [
        "nemo.collections.nlp.data.dialogue.sgd.prediction_utils"
    ],
    "nemo.collections.nlp.data.dialogue.input_example.sgd_input_example.STATUS_ACTIVE": [
        "nemo.collections.nlp.data.dialogue.sgd.prediction_utils"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.SLOT_TAGGING_F1": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.SLOT_TAGGING_PRECISION": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.SLOT_TAGGING_RECALL": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.JOINT_NONCAT_ACCURACY": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.get_requested_slots_f1": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.JOINT_GOAL_ACCURACY": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.get_slot_tagging_f1": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.REQUESTED_SLOTS_PRECISION": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.NAN_VAL": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.ACTIVE_INTENT_ACCURACY": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.get_average_and_joint_goal_accuracy": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.REQUESTED_SLOTS_F1": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.REQUESTED_SLOTS_RECALL": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.get_active_intent_accuracy": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.metrics.sgd_metrics.JOINT_CAT_ACCURACY": [
        "nemo.collections.nlp.data.dialogue.sgd.evaluate"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.tagging.Tag": [
        "nemo.collections.nlp.data.text_normalization_as_tagging.bert_example"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.utils.yield_sources_and_targets": [
        "nemo.collections.nlp.data.text_normalization_as_tagging.bert_example"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.tagging.EditingTask": [
        "nemo.collections.nlp.data.text_normalization_as_tagging.bert_example"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.bert_example.BertExampleBuilder": [
        "nemo.collections.nlp.data.text_normalization_as_tagging.thutmose_tagger_dataset"
    ],
    "nemo.collections.nlp.data.text_normalization_as_tagging.bert_example.read_input_file": [
        "nemo.collections.nlp.data.text_normalization_as_tagging.thutmose_tagger_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils.get_indexed_dataset_": [
        "nemo.collections.nlp.data.common.sequence_to_sequence_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.text_memmap_dataset.TextMemMapDataset": [
        "nemo.collections.nlp.data.common.sequence_to_sequence_dataset",
        "nemo.collections.nlp.data.language_modeling.t0_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset"
    ],
    "nemo.collections.nlp.data.text_normalization.utils.read_data_file": [
        "nemo.collections.nlp.data.text_normalization.tagger_dataset",
        "nemo.collections.nlp.data.text_normalization.decoder_dataset",
        "nemo.collections.nlp.data.text_normalization.test_dataset"
    ],
    "nemo.collections.nlp.data.text_normalization.utils.remove_puncts": [
        "nemo.collections.nlp.data.text_normalization.test_dataset"
    ],
    "nemo.collections.nlp.data.text_normalization.utils.normalize_str": [
        "nemo.collections.nlp.data.text_normalization.test_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.QnliProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.MrpcProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.MnliProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.StsbProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.XNLIProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.RteProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.Sst2Processor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.MnliMismatchedProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.WnliProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.QqpProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.glue_benchmark.data_processors.ColaProcessor": [
        "nemo.collections.nlp.data.glue_benchmark.glue_benchmark_dataset"
    ],
    "nemo.collections.nlp.data.data_utils.data_preprocessing.get_stats": [
        "nemo.collections.nlp.data.text_classification.text_classification_dataset",
        "nemo.collections.nlp.data.token_classification.token_classification_dataset",
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset"
    ],
    "nemo.core.neural_types.StringLabel": [
        "nemo.collections.nlp.data.text_classification.ptune_text_classification_dataset"
    ],
    "nemo.collections.nlp.data.data_utils.check_chinese_char": [
        "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing"
    ],
    "nemo.collections.nlp.data.data_utils.normalize_answer": [
        "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing"
    ],
    "nemo.collections.nlp.data.data_utils.normalize_chinese_answer": [
        "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.apply_no_ans_threshold": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.exact_match_score": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.find_all_best_thresh": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing._improve_answer_span": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.get_best_indexes": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.get_final_text": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.make_eval_dict": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.normalize_answer": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.f1_score": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.SquadProcessor": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.question_answering_squad.qa_squad_processing.merge_eval": [
        "nemo.collections.nlp.data.question_answering_squad.qa_dataset"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.create_label_ids": [
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.Progress": [
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.create_masks_and_segment_ids": [
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.nlp.data.token_classification.punctuation_capitalization_dataset.LABEL_ID_DIR_FOR_NEMO_CHECKPOINT": [
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_tarred_dataset"
    ],
    "nemo.collections.nlp.data.get_stats": [
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.core.neural_types.Index": [
        "nemo.collections.nlp.data.token_classification.punctuation_capitalization_infer_dataset"
    ],
    "nemo.collections.nlp.data.data_utils.dataset_to_ids": [
        "nemo.collections.nlp.data.language_modeling.l2r_lm_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset.make_dataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset.deallocate_indexed_dataset_memory": [
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.helpers": [
        "nemo.collections.nlp.data.language_modeling.megatron.blendable_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils.compile_helper": [
        "nemo.collections.nlp.data.language_modeling.megatron.blendable_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset.GPTDataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.lm_adapted_t5_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.length_distribution_type.LengthDistribution": [
        "nemo.collections.nlp.data.language_modeling.megatron.lm_adapted_t5_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.xlm_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils",
        "nemo.collections.nlp.data.language_modeling.megatron.ul2_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils.get_a_and_b_segments": [
        "nemo.collections.nlp.data.language_modeling.megatron.bert_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils.create_masked_lm_predictions": [
        "nemo.collections.nlp.data.language_modeling.megatron.bert_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.t5_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.bart_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset.MMapIndexedDataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.bert_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils.truncate_segments": [
        "nemo.collections.nlp.data.language_modeling.megatron.bert_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils.create_tokens_and_tokentypes": [
        "nemo.collections.nlp.data.language_modeling.megatron.bert_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.text_memmap_dataset.OnlineSampleMapping": [
        "nemo.collections.nlp.data.language_modeling.megatron.gpt_sft_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.bert_dataset.build_training_sample": [
        "nemo.collections.nlp.data.language_modeling.megatron.xlm_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.ul2_dataset.UL2Dataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.xlm_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.t5_dataset.T5Dataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.xlm_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils",
        "nemo.collections.nlp.data.language_modeling.megatron.ul2_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.bart_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.bert_dataset.BertDataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.bart_dataset.BARTDataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.lm_adapted_t5_dataset.T5LMAdaptedDataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils",
        "nemo.collections.nlp.data.language_modeling.megatron.ul2_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset.make_indexed_dataset_compatibility": [
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.t5_dataset.MockT5Dataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.dataset_utils.create_extreme_masked_lm_predictions": [
        "nemo.collections.nlp.data.language_modeling.megatron.ul2_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset._build_index_mappings": [
        "nemo.collections.nlp.data.language_modeling.megatron.t5_dataset",
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy"
    ],
    "nemo.collections.nlp.data.language_modeling.text_memmap_dataset.CSVMemMapDataset": [
        "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.indexed_retrieval_dataset.MMapRetrievalIndexedDatasetBuilder": [
        "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.gpt_dataset.get_indexed_dataset_": [
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.indexed_retrieval_dataset.KNNIndex": [
        "nemo.collections.nlp.data.language_modeling.megatron.retro_dataset_legacy"
    ],
    "nemo.collections.nlp.data.language_modeling.megatron.indexed_dataset": [
        "nemo.collections.multimodal_autoregressive.data.preprocess_coyo_emu3_tokenizer",
        "nemo.collections.multimodal_autoregressive.data.preprocess_pokemon_blip_cosmos_tokenizer"
    ],
    "nemo.collections.multimodal_autoregressive.tokenizer.cosmos_multimodal_tokenizer.CosmosMultiModalTokenizer": [
        "nemo.collections.multimodal_autoregressive.data.preprocess_pokemon_blip_cosmos_tokenizer"
    ],
    "nemo.collections.speechlm.utils.model_transform.SPEECHLM_PEFT_RESUME": [
        "nemo.collections.speechlm.strategies.megatron_strategy"
    ],
    "nemo.lightning.pytorch.callbacks.peft.ADAPTER_META_FILENAME": [
        "nemo.collections.speechlm.utils.resume"
    ],
    "nemo.lightning.resume.AutoResume": [
        "nemo.collections.speechlm.utils.resume"
    ],
    "nemo.lightning.pytorch.callbacks.peft.WrappedAdapterIO": [
        "nemo.collections.speechlm.utils.model_transform"
    ],
    "nemo.collections.speechlm.models.speech_to_text_llm_model.SpeechToTextLLM": [
        "nemo.collections.speechlm.utils.text_generation.audio_text_generation_strategy",
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.utils.text_generation.audio_text_generation_utils.generate": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.utils.io.get_nested_attr": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.utils.text_generation.audio_text_generation_strategy.SpeechToTextGenerationStrategy": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.utils.io.import_ckpt": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.utils.get_rank.get_last_rank": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.utils.text_generation.audio_text_generation_utils.default_inference_config": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.modules.asr_module.ASRModuleConfig": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model",
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.data.dataset.data_utils.build_position_ids": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.modules.asr_module.HFWrappedEncoder": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.models.base.SpeechLanguageModel": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.utils.io.load_distributed_ckpt": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.modules.modality_adapter.ModalityAdapterConfig": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model",
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.utils.text_generation.audio_text_generation_utils.clean_end_string": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.data.dataset.data_utils.pad_or_trim_to_max_length": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.utils.text_generation.audio_text_generation_utils.get_computeprob_response": [
        "nemo.collections.speechlm.models.speech_to_text_llm_model"
    ],
    "nemo.collections.speechlm.utils.SpeechToTextLLMPEFT": [
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.utils.get_object_list_from_config": [
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.api._setup": [
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.utils.exp_manager.StatelessTimer": [
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.utils.io.prepare_pretrained_llm_dist_ckpt": [
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.api.finetune": [
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.models.speech_to_text_llm_model.SpeechToTextLLMConfig": [
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.data.audio_to_text_module.AudioToTextDataModule": [
        "nemo.collections.speechlm.recipes.pipeline"
    ],
    "nemo.collections.speechlm.utils.to_dict_config": [
        "nemo.collections.speechlm.modules.asr_module",
        "nemo.collections.speechlm.modules.modality_adapter"
    ],
    "nemo.collections.speechlm.utils.get_nested_attr": [
        "nemo.collections.speechlm.modules.asr_module"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.NeMoMultimodalConversation": [
        "nemo.collections.speechlm.data.text_processing",
        "nemo.collections.speechlm.data.dataset.audio_text_lhotse_dataset"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.AudioTurn": [
        "nemo.collections.speechlm.data.text_processing",
        "nemo.collections.speechlm.data.dataset.audio_text_lhotse_dataset"
    ],
    "nemo.collections.common.tokenizers.huggingface.AutoTokenizer": [
        "nemo.collections.speechlm.data.text_processing"
    ],
    "nemo.collections.common.data.dataset.ConcatMapDataset": [
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.speechlm.data.dataset.audio_text_dataset.get_audio_text_dataset_from_config": [
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.speechlm.data.dataset.audio_text_lhotse_dataset.MultimodalConversationDataset": [
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.speechlm.data.data_sampler.SpeechLMDataSampler": [
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.speechlm.data.dataset.audio_text_dataset.get_tarred_audio_text_dataset_from_config": [
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.speechlm.data.text_processing.MultimodalConversationTextProcessor": [
        "nemo.collections.speechlm.data.audio_to_text_module",
        "nemo.collections.speechlm.data.dataset.audio_text_lhotse_dataset"
    ],
    "nemo.collections.multimodal.speech_llm.parts.utils.data_utils.get_text_processor_from_cfg": [
        "nemo.collections.speechlm.data.audio_to_text_module"
    ],
    "nemo.collections.common.data.lhotse.text_adapters.TextTurn": [
        "nemo.collections.speechlm.data.dataset.audio_text_lhotse_dataset"
    ],
    "nemo.collections.speechlm.data.dataset.data_utils.build_loss_mask": [
        "nemo.collections.speechlm.data.dataset.audio_text_lhotse_dataset"
    ],
    "nemo.collections.speechlm.data.text_processing.TextProcessorOutput": [
        "nemo.collections.speechlm.data.dataset.audio_text_lhotse_dataset"
    ]
}